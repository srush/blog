<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sasha Rush - Dex</title><link href="https://blog.rush-nlp.com/" rel="alternate"></link><link href="https://blog.rush-nlp.com/feeds/dex.atom.xml" rel="self"></link><id>https://blog.rush-nlp.com/</id><updated>2021-06-18T12:00:00-04:00</updated><entry><title>Dex: Differential Probabilistic Inference</title><link href="https://blog.rush-nlp.com/dex-differential-probabilistic-inference.html" rel="alternate"></link><published>2021-06-18T12:00:00-04:00</published><updated>2021-06-18T12:00:00-04:00</updated><author><name>Sasha Rush</name></author><id>tag:blog.rush-nlp.com,2021-06-18:/dex-differential-probabilistic-inference.html</id><summary type="html">A differential approach to probabilistic modeling in Dex</summary><content type="html">&lt;div id="main-output"&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This notebook develops an unconventional approach to probabilistic
inference using Dex tables and auto-differentiation. It is based
loosely on the approach described in:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;code&gt;A Differential Approach to Inference in Bayesian Networks, Adnan Darwiche (2003)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This approach can be thought of as a probabilistic programming
language (PPL) in the sense the inference is seperated from the
modeling language. However, it does not require interrupting
standard control flow.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Running Example 1: Coins and Dice&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Let us start with a simple probabilistic modeling example to establish some notation.&lt;/p&gt;
&lt;p&gt;In this example we have a coin and two weighted dice. We first
flip the coin, if it is heads we roll dice 1 and if it is tails we
roll dice 2.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Coin&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 2
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;[tails&lt;span class="symbol"&gt;,&lt;/span&gt; heads] &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Coin&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; i
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Dice&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Range&lt;/span&gt; 1 7
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;roll &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;i &lt;span class="symbol"&gt;.&lt;/span&gt; (i &lt;span class="symbol"&gt;-&lt;/span&gt; 1)&lt;span class="symbol"&gt;@&lt;/span&gt; &lt;span class="type-name"&gt;Dice&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;None&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 1
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;nil &lt;span class="symbol"&gt;=&lt;/span&gt; 0&lt;span class="symbol"&gt;@&lt;/span&gt;&lt;span class="type-name"&gt;None&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;coin &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; [0&lt;span class="symbol"&gt;.&lt;/span&gt;2&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;8]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;dice_1 &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dice&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; 1&lt;span class="symbol"&gt;.&lt;/span&gt;0 &lt;span class="symbol"&gt;/&lt;/span&gt; 6&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;dice_2 &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dice&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; [0&lt;span class="symbol"&gt;.&lt;/span&gt;5&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;1&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;1&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;1&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;1&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;1]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This defines a  generative process over two random variables $\mathbf{X} = { A, B } $, the coin flip and the dice roll respectively. We can write the process explicitly as,&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$a \sim Pr(A)$$
$$ b \sim Pr(B\ |\ A=a) $$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Probability Combinators&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;A discrete probability distribution is a normalized table of probabilities&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;data&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; variables &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;AsDist&lt;/span&gt; (variables &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; (&lt;span class="symbol"&gt;??&lt;/span&gt;) (y&lt;span class="command"&gt;:m&lt;/span&gt;) (&lt;span class="type-name"&gt;AsDist&lt;/span&gt; x&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; m) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;y
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Distributions are easy to create. Here are a couple simple ones.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; normalize (x&lt;span class="symbol"&gt;:&lt;/span&gt; m&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; m &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;AsDist&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;/&lt;/span&gt; sum x
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; uniform &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; m  &lt;span class="symbol"&gt;=&lt;/span&gt; normalize &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; 1&lt;span class="symbol"&gt;.&lt;/span&gt;0 
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; delta (x&lt;span class="command"&gt;:m&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; m  &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;AsDist&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; select ((ordinal x) &lt;span class="symbol"&gt;==&lt;/span&gt; (ordinal i)) 1&lt;span class="symbol"&gt;.&lt;/span&gt;0 0&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Arbitrary&lt;/span&gt; (&lt;span class="type-name"&gt;Dist&lt;/span&gt; m)
    arb &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;key&lt;span class="symbol"&gt;.&lt;/span&gt;
        a &lt;span class="symbol"&gt;=&lt;/span&gt; arb key
        normalize &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; abs a&lt;span class="symbol"&gt;.&lt;/span&gt;i
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;And they are displayed by their support.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; support (&lt;span class="type-name"&gt;AsDist&lt;/span&gt; x&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; m)  &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;List&lt;/span&gt; (m &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;=&lt;/span&gt;
    concat &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; select (x&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0) (&lt;span class="type-name"&gt;AsList&lt;/span&gt; 1 [(i&lt;span class="symbol"&gt;,&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i)]) mempty
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; [&lt;span class="type-name"&gt;Show&lt;/span&gt; m] &lt;span class="type-name"&gt;Show&lt;/span&gt; (&lt;span class="type-name"&gt;Dist&lt;/span&gt; m)
         show &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;a&lt;span class="symbol"&gt;.&lt;/span&gt;
              (&lt;span class="type-name"&gt;AsList&lt;/span&gt; _  out) &lt;span class="symbol"&gt;=&lt;/span&gt; support a
              concat &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;Key&lt;/span&gt;&lt;span class="symbol"&gt;:&lt;/span&gt; &amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; (show &lt;span class="symbol"&gt;$&lt;/span&gt; fst out&lt;span class="symbol"&gt;.&lt;/span&gt;i) &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot; &lt;span class="type-name"&gt;Prob&lt;/span&gt;&lt;span class="symbol"&gt;:&lt;/span&gt; &amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; (show &lt;span class="symbol"&gt;$&lt;/span&gt; snd out&lt;span class="symbol"&gt;.&lt;/span&gt;i) &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot;&lt;span class="symbol"&gt;\&lt;/span&gt;n&amp;quot;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Show&lt;/span&gt; (&lt;span class="type-name"&gt;Range&lt;/span&gt; i j)
         show &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;a &lt;span class="symbol"&gt;.&lt;/span&gt; show &lt;span class="symbol"&gt;$&lt;/span&gt; ordinal a
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;show &lt;span class="symbol"&gt;$&lt;/span&gt; (delta (4&lt;span class="symbol"&gt;@&lt;/span&gt;_))&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Dist&lt;/span&gt; &lt;span class="type-name"&gt;Dice&lt;/span&gt;
&lt;/div&gt;&lt;div class="result-block"&gt;(AsList 15 &amp;quot;Key: 4 Prob: 1
&amp;quot;)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Expectations can be taken over arbitrary tables.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; expect [&lt;span class="type-name"&gt;VSpace&lt;/span&gt; out] (&lt;span class="type-name"&gt;AsDist&lt;/span&gt; x&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; m) (y &lt;span class="symbol"&gt;:&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; out) &lt;span class="symbol"&gt;:&lt;/span&gt; out &lt;span class="symbol"&gt;=&lt;/span&gt;
    sum &lt;span class="keyword"&gt;for&lt;/span&gt; m&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;m&amp;#39; &lt;span class="symbol"&gt;.*&lt;/span&gt; y&lt;span class="symbol"&gt;.&lt;/span&gt;m&amp;#39;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;To represent conditional probabilities such as $ Pr(B \ |\ A)$ we define a type alias.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="type-name"&gt;Pr&lt;/span&gt; (b&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt;) (a&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt;)&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Type&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; a &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; b
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;With this machinery we can define distributions for the coin and the dice.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;p_&lt;span class="type-name"&gt;A&lt;/span&gt; &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Pr&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt; &lt;span class="type-name"&gt;None&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; [&lt;span class="type-name"&gt;AsDist&lt;/span&gt; coin]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;p_&lt;span class="type-name"&gt;B&lt;/span&gt;_&lt;span class="type-name"&gt;A&lt;/span&gt; &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Pr&lt;/span&gt; &lt;span class="type-name"&gt;Dice&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt;  &lt;span class="symbol"&gt;=&lt;/span&gt; [&lt;span class="type-name"&gt;AsDist&lt;/span&gt; dice_1&lt;span class="symbol"&gt;,&lt;/span&gt; &lt;span class="type-name"&gt;AsDist&lt;/span&gt; dice_2]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Attempt 1: Observations and Marginalization&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This allows us to compute the probability of any full observation
from our model.
$$Pr(A=a, B=b) =  Pr(B=b\ | A=a) Pr(A=a) $$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; p_&lt;span class="type-name"&gt;AB&lt;/span&gt; (a&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Coin&lt;/span&gt;) (b&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Dice&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    (a &lt;span class="symbol"&gt;??&lt;/span&gt; p_&lt;span class="type-name"&gt;A&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;nil) &lt;span class="symbol"&gt;*&lt;/span&gt;
    (b &lt;span class="symbol"&gt;??&lt;/span&gt; p_&lt;span class="type-name"&gt;B&lt;/span&gt;_&lt;span class="type-name"&gt;A&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;a)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;p_&lt;span class="type-name"&gt;AB&lt;/span&gt; heads (roll 6)
&lt;/div&gt;&lt;div class="result-block"&gt;0.08&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;However, this assumes that we have full observation
of our variables. What if the coin is latent? This requires a sum.
$$Pr(B) = \sum_a Pr(B\ | A=a) Pr(A=a) $$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; p_&lt;span class="type-name"&gt;B&lt;/span&gt; (b&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Dice&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    sum &lt;span class="keyword"&gt;for&lt;/span&gt; a&lt;span class="symbol"&gt;.&lt;/span&gt; (a &lt;span class="symbol"&gt;??&lt;/span&gt; p_&lt;span class="type-name"&gt;A&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;nil) &lt;span class="symbol"&gt;*&lt;/span&gt;
     (b &lt;span class="symbol"&gt;??&lt;/span&gt; p_&lt;span class="type-name"&gt;B&lt;/span&gt;_&lt;span class="type-name"&gt;A&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;a)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;p_&lt;span class="type-name"&gt;B&lt;/span&gt; (roll 6)
&lt;/div&gt;&lt;div class="result-block"&gt;0.113333&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;But now we have two seperate functions for the same model!
This feels unnecessary and bug-prone.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Attempt 2: Indicator Variables and the Network Polynomial&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;In order to make things simpler we will introduce explicit &lt;em&gt;indicator variables&lt;/em&gt; $\lambda$
to the modeling language.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; (a&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Type&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; a &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;These can either be observed or latent.
If a random variable is observed then we use an indicator.
The expectation over the indicator gives,&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$ p(A=a) = E_{a' \sim p(A)} \lambda_{a'} $$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;If it is latent the variable is one everywhere.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; observed (x&lt;span class="command"&gt;:a&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; a &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; select ((ordinal i) &lt;span class="symbol"&gt;==&lt;/span&gt; (ordinal x)) 1&lt;span class="symbol"&gt;.&lt;/span&gt;0 0&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; latent &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; a &lt;span class="symbol"&gt;=&lt;/span&gt; one
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The probability &lt;em&gt;chain rule&lt;/em&gt; tells us that we can propagate conditioning.
$$\sum_{b} Pr(A,\ B = b)  = Pr(A) \sum_b Pr(B=b\ | A)$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This implies that the expectation of these indicators factors as well.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$E_{a, b\sim Pr(A,\ B)} \lambda_a \lambda_b  = E_{a'\sim Pr(A)}\left[ \lambda_a   E_{b' \sim Pr(B | A=a)} [\lambda_b] \right] $$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We can write one step of this chain rule really cleanly in Dex.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; (&lt;span class="symbol"&gt;~&lt;/span&gt;) (lambda&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Var&lt;/span&gt; a) (pr&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; a) (fn_a &lt;span class="symbol"&gt;:&lt;/span&gt; a &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    expect pr &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; a&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt; lambda&lt;span class="symbol"&gt;.&lt;/span&gt;a&amp;#39; &lt;span class="symbol"&gt;*&lt;/span&gt; fn_a&lt;span class="symbol"&gt;.&lt;/span&gt;a&amp;#39;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This allows us to final write our model down in an extremely clean form.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$a \sim Pr(A)$$
$$ b \sim Pr(B\ |\ A=a) $$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; coin_flip (a&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt;) (b&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Dice&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    (a&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; p_&lt;span class="type-name"&gt;A&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;nil) (&lt;span class="keyword"&gt;for&lt;/span&gt; a&lt;span class="symbol"&gt;.&lt;/span&gt;
     (b&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; p_&lt;span class="type-name"&gt;B&lt;/span&gt;_&lt;span class="type-name"&gt;A&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;a) one)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Now we can easily reproduce all the result above.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;coin_flip (observed heads) (observed (roll 6))
&lt;/div&gt;&lt;div class="result-block"&gt;0.08&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;coin_flip (latent) (observed (roll 6))
&lt;/div&gt;&lt;div class="result-block"&gt;0.113333&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;coin_flip latent latent
&lt;/div&gt;&lt;div class="result-block"&gt;1.&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This representation for joint distributions is known as the
&lt;em&gt;network polynomial&lt;/em&gt;. This is a &lt;em&gt;multi-linear&lt;/em&gt; function that uses
indicator variables to represent data observations.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$ f(\lambda) = \sum_{\mathbf{x}} \prod_{x, \mathbf{u}\in \mathbf{x}} \lambda_x \theta_{x|\mathbf{u}} $$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Here $\theta$ is the model parameters. These play the same role as above.
The $\lambda$ are &lt;em&gt;evidence indicators&lt;/em&gt; which indicate the states of
the variable instantiations.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The &lt;em&gt;network polynomial&lt;/em&gt; can be used to compute &lt;em&gt;marginal&lt;/em&gt; probabilities of any
subset of variables. Let $\mathbf{e}$ be the observations of some subset of $\mathbf{X}$.
Darwiche shows that -&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$f[\mathbf{e}] = p(\mathbf{E} = \mathbf{e})$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Where $f[e]$ assigns 1 to any $\lambda$ term that is consistent
(non-contradictory) with $\mathbf{e}$ and 0 otherwise. Let's look at an example.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Differential  Inference&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The network polynomial is a convenient method for computing probilities,
but what makes it particularly useful is that it allows us to compute
posterior probabilities simply using derivatives.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;For example, consider the probability on the coin flip given an observation of a
dice roll. We can compute this using Bayes' Rule.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$Pr(A | B=b) \propto Pr(B=b | A) Pr(A)$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;normalize &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; a&lt;span class="symbol"&gt;.&lt;/span&gt; coin_flip (observed a) (observed (roll 4))
&lt;/div&gt;&lt;div class="result-block"&gt;(AsDist [0.294118, 0.705882])&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;However using the network polynomial we can compute this same term purely with
derivatives.  Computing partial derivatives directly yields joint terms.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$\frac{df[\mathbf{e}]}{dx} = Pr(\mathbf{e}, x)$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This implies that the derivative of the log polynomial
yields posterior terms.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$\frac{d\log f[\mathbf{e}]}{dx} = Pr(x\ |\ \mathbf{e})$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Let us try this out. We can compute the posterior probabity of
the first coin after observing the second.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; posterior (f &lt;span class="symbol"&gt;:&lt;/span&gt; (&lt;span class="type-name"&gt;Var&lt;/span&gt; a) &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; a &lt;span class="symbol"&gt;=&lt;/span&gt;
     &lt;span class="type-name"&gt;AsDist&lt;/span&gt; &lt;span class="symbol"&gt;$&lt;/span&gt; (grad (&lt;span class="symbol"&gt;\&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt; log &lt;span class="symbol"&gt;$&lt;/span&gt; f x)) one
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;     
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;posterior (&lt;span class="symbol"&gt;\&lt;/span&gt; x &lt;span class="symbol"&gt;.&lt;/span&gt; coin_flip x (observed (roll 4)) )
&lt;/div&gt;&lt;div class="result-block"&gt;(AsDist [0.294118, 0.705882])&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;And this yields exactly the term above! This is really neat, it
doesn't require any application of model specific inference.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We can generalize this to compute a table of distributions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; posteriorTab (f &lt;span class="symbol"&gt;:&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; (&lt;span class="type-name"&gt;Var&lt;/span&gt; a) &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; a &lt;span class="symbol"&gt;=&lt;/span&gt;
     out &lt;span class="symbol"&gt;=&lt;/span&gt;  (grad (&lt;span class="symbol"&gt;\&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt; log &lt;span class="symbol"&gt;$&lt;/span&gt; f x)) one
     &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="type-name"&gt;AsDist&lt;/span&gt; &lt;span class="symbol"&gt;$&lt;/span&gt; out&lt;span class="symbol"&gt;.&lt;/span&gt;i
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Example 2: Bayes Nets&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;A classic example in probalistic modeling is the Wet grass Bayes' net.
In this example we need to infer the factors that could have led to
the grass being wet.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;More details on the problem are given &lt;a href="https://en.wikipedia.org/wiki/Bayesian_network"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0e/SimpleBayesNet.svg/1024px-SimpleBayesNet.svg.png" alt="grass" /&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Rain&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; {norain &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Unit&lt;/span&gt; &lt;span class="symbol"&gt;|&lt;/span&gt; rain &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Unit&lt;/span&gt;}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Sprinkler&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; {nosprinkler &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Unit&lt;/span&gt; &lt;span class="symbol"&gt;|&lt;/span&gt; sprinkler &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Unit&lt;/span&gt;}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Grass&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; {notwet &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Unit&lt;/span&gt; &lt;span class="symbol"&gt;|&lt;/span&gt; wet &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Unit&lt;/span&gt;}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; bernoulli (p&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; m &lt;span class="symbol"&gt;=&lt;/span&gt;  &lt;span class="type-name"&gt;AsDist&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; [1&lt;span class="symbol"&gt;.&lt;/span&gt;0 &lt;span class="symbol"&gt;-&lt;/span&gt; p&lt;span class="symbol"&gt;,&lt;/span&gt; p]&lt;span class="symbol"&gt;.&lt;/span&gt;((ordinal i)&lt;span class="symbol"&gt;@&lt;/span&gt;_)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We now define the tables above.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;rain &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Pr&lt;/span&gt; &lt;span class="type-name"&gt;Rain&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 1) &lt;span class="symbol"&gt;=&lt;/span&gt; [bernoulli 0&lt;span class="symbol"&gt;.&lt;/span&gt;2]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;sprinkler &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Pr&lt;/span&gt; &lt;span class="type-name"&gt;Sprinkler&lt;/span&gt; &lt;span class="type-name"&gt;Rain&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; r&lt;span class="symbol"&gt;.&lt;/span&gt; bernoulli &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;case&lt;/span&gt; r &lt;span class="keyword"&gt;of&lt;/span&gt;
          {&lt;span class="symbol"&gt;|&lt;/span&gt;norain&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;} &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;4
          {&lt;span class="symbol"&gt;|&lt;/span&gt;rain&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;} &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;01
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;          
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;grass &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Pr&lt;/span&gt; &lt;span class="type-name"&gt;Grass&lt;/span&gt; (&lt;span class="type-name"&gt;Sprinkler&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;Rain&lt;/span&gt;) &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; (s&lt;span class="symbol"&gt;,&lt;/span&gt; r)&lt;span class="symbol"&gt;.&lt;/span&gt; bernoulli &lt;span class="symbol"&gt;$&lt;/span&gt;
          &lt;span class="keyword"&gt;case&lt;/span&gt; s &lt;span class="keyword"&gt;of&lt;/span&gt; 
            {&lt;span class="symbol"&gt;|&lt;/span&gt;nosprinkler&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;} &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;
                  &lt;span class="keyword"&gt;case&lt;/span&gt; r &lt;span class="keyword"&gt;of&lt;/span&gt;
                     {&lt;span class="symbol"&gt;|&lt;/span&gt;norain&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;} &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0
                     {&lt;span class="symbol"&gt;|&lt;/span&gt;rain&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;} &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;8
            {&lt;span class="symbol"&gt;|&lt;/span&gt;sprinkler&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;} &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; 
                  &lt;span class="keyword"&gt;case&lt;/span&gt; r &lt;span class="keyword"&gt;of&lt;/span&gt;
                     {&lt;span class="symbol"&gt;|&lt;/span&gt;norain&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;} &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;9
                     {&lt;span class="symbol"&gt;|&lt;/span&gt;rain&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;} &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;99
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;And the architecture of the Bayes net.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; wet_naive (r&amp;#39; &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Rain&lt;/span&gt;)
              (s&amp;#39; &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Sprinkler&lt;/span&gt;)
              (g&amp;#39; &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Grass&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    (r&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; rain&lt;span class="symbol"&gt;.&lt;/span&gt;nil) (&lt;span class="keyword"&gt;for&lt;/span&gt; r&lt;span class="symbol"&gt;.&lt;/span&gt;
     (s&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; sprinkler&lt;span class="symbol"&gt;.&lt;/span&gt;r) (&lt;span class="keyword"&gt;for&lt;/span&gt; s&lt;span class="symbol"&gt;.&lt;/span&gt;
      (g&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; grass&lt;span class="symbol"&gt;.&lt;/span&gt;(s&lt;span class="symbol"&gt;,&lt;/span&gt;r)) one))
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;wet_naive (latent) (latent) (observed {&lt;span class="symbol"&gt;|&lt;/span&gt;wet&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;})
&lt;/div&gt;&lt;div class="result-block"&gt;0.44838&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;posterior (&lt;span class="symbol"&gt;\&lt;/span&gt;x&lt;span class="symbol"&gt;.&lt;/span&gt; wet_naive x (latent) (observed {&lt;span class="symbol"&gt;|&lt;/span&gt;wet&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;}))
&lt;/div&gt;&lt;div class="result-block"&gt;(AsDist [0.642312, 0.357688]@{norain: Unit | rain: Unit})&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Example 3: Dice Counting&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Here's a classic elementary probability problem. Given two
standard dice rolls, what is the probability distribution
over their sum?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;img src="https://qph.fs.quoracdn.net/main-qimg-13d2e066e80c0ac1511e0477c6ffdcb4-c" alt="dice" /&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;DiceSum&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Range&lt;/span&gt; 2 13
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Helper functions for Dice sum&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; (&lt;span class="symbol"&gt;+@+&lt;/span&gt;) (a&lt;span class="command"&gt;:a&lt;/span&gt;&amp;#39;) (b&lt;span class="command"&gt;:b&lt;/span&gt;&amp;#39;) &lt;span class="symbol"&gt;:&lt;/span&gt; c &lt;span class="symbol"&gt;=&lt;/span&gt; (((ordinal a) &lt;span class="symbol"&gt;+&lt;/span&gt; (ordinal b))&lt;span class="symbol"&gt;@&lt;/span&gt;_)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; roll_sum (x&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Int&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;DiceSum&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; (x &lt;span class="symbol"&gt;-&lt;/span&gt; 2)&lt;span class="symbol"&gt;@&lt;/span&gt;_
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; two_dice (dice &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; (&lt;span class="type-name"&gt;Dice&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;Dice&lt;/span&gt;))  (dicesum &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;DiceSum&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    (dice &lt;span class="symbol"&gt;~&lt;/span&gt; uniform) (&lt;span class="keyword"&gt;for&lt;/span&gt; (d1&lt;span class="symbol"&gt;,&lt;/span&gt; d2)&lt;span class="symbol"&gt;.&lt;/span&gt;
     (dicesum &lt;span class="symbol"&gt;~&lt;/span&gt; delta (d1 &lt;span class="symbol"&gt;+@+&lt;/span&gt; d2)) one)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Here's the result.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;posterior (&lt;span class="symbol"&gt;\&lt;/span&gt;m&lt;span class="symbol"&gt;.&lt;/span&gt; two_dice latent m)
&lt;/div&gt;&lt;div class="result-block"&gt;(AsDist [ 0.027778
        , 0.055556
        , 0.083333
        , 0.111111
        , 0.138889
        , 0.166667
        , 0.138889
        , 0.111111
        , 0.083333
        , 0.055556
        , 0.027778 ]@(%IntRange 2 13))&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We might also ask what the probability of the dice rolls given on output value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;support &lt;span class="symbol"&gt;$&lt;/span&gt; posterior (&lt;span class="symbol"&gt;\&lt;/span&gt;m&lt;span class="symbol"&gt;.&lt;/span&gt; two_dice m (observed (roll_sum 4)))
&lt;/div&gt;&lt;div class="result-block"&gt;(AsList 3 [ (((0@%IntRange 1 7), (2@%IntRange 1 7)), 0.333333)
          , (((1@%IntRange 1 7), (1@%IntRange 1 7)), 0.333333)
          , (((2@%IntRange 1 7), (0@%IntRange 1 7)), 0.333333) ])&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Discussion - Conditional Independence&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;One tricky problem for discrete PPLs is modeling conditional independence.
Models can be very slow to compute if we are not careful to exploint
conditional independence properties such as Markov assumptions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;For example, let us consider a more complex version of the coin flip
example. We will flip three times. The choice of the second weighted coin
depends on the first. The choice of third weighted coin depends on the second.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$a \sim Pr(A)$$
$$ b \sim Pr(B\ |\ A=a) $$
$$ c \sim Pr(C\ |\ B=b) $$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;In this example $C$ is conditionally independent of $A$ given $B$.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We can be lazy and create the distributions randomly.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;coin1 &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Pr&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt; &lt;span class="type-name"&gt;None&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; arb &lt;span class="symbol"&gt;$&lt;/span&gt; newKey 1
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;coin2 &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Pr&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; arb &lt;span class="symbol"&gt;$&lt;/span&gt; newKey 2
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;coin3 &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Pr&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; arb &lt;span class="symbol"&gt;$&lt;/span&gt; newKey 3
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Now here is the generative process.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; coin_flip2 (a&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt;) (b&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt;) (c&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    (a&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; coin1&lt;span class="symbol"&gt;.&lt;/span&gt;nil) (&lt;span class="keyword"&gt;for&lt;/span&gt; a&lt;span class="symbol"&gt;.&lt;/span&gt;
     (b&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; coin2&lt;span class="symbol"&gt;.&lt;/span&gt;a) (&lt;span class="keyword"&gt;for&lt;/span&gt; b&lt;span class="symbol"&gt;.&lt;/span&gt;
      (c&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; coin3&lt;span class="symbol"&gt;.&lt;/span&gt;b) one))
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Note that as written this process looks like it does not take
advantage of the conditional independence property of the model.
The construction of the final coin is in a &lt;code&gt;for&lt;/code&gt; constructor that
contains &lt;code&gt;a&lt;/code&gt;. However, Dex knows that &lt;code&gt;a&lt;/code&gt; is not used in the inner
most construct. In theory it can lift that out of the loop and exploit
the conditional independence.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Alternatively we can make this explicit and do the lifting ourselves.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; coin_flip_opt2 (a&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt;) (b&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt;) (c&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Coin&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    final_flip &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; b&lt;span class="symbol"&gt;.&lt;/span&gt; (c&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; coin3&lt;span class="symbol"&gt;.&lt;/span&gt;b) one
    (a&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; coin1&lt;span class="symbol"&gt;.&lt;/span&gt;nil) (&lt;span class="keyword"&gt;for&lt;/span&gt; a&lt;span class="symbol"&gt;.&lt;/span&gt;
     (b&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; coin2&lt;span class="symbol"&gt;.&lt;/span&gt;a) final_flip)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Example 4: Monty Hall Problem&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Perhaps the most celebrated elementary problem in conditional
probability is the Monty Hall problem.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Monty_Hall_problem"&gt;Monty Hall&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/3/3f/Monty_open_door.svg" alt="Goat" /&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;You are on a game show. The host asks you to pick a door at random to win a prize.
After selecting a door, one of the remaining doors (without the prize) is removed.
You are asked if you want to change your selection...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Doors&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 3
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;YesNo&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; { no&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Unit&lt;/span&gt; &lt;span class="symbol"&gt;|&lt;/span&gt; yes&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Unit&lt;/span&gt;}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; yesno (x&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Bool&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; &lt;span class="type-name"&gt;YesNo&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; delta &lt;span class="symbol"&gt;$&lt;/span&gt; select x {&lt;span class="symbol"&gt;|&lt;/span&gt;yes&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;} {&lt;span class="symbol"&gt;|&lt;/span&gt;no&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The generative model is relatively simple&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We will first sample our pick and the door.&lt;/li&gt;
&lt;li&gt;Then we will consider changing our pick.&lt;/li&gt;
&lt;li&gt;Finally we will see if we won.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; monty_hall (change&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;YesNo&lt;/span&gt;) (win&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;YesNo&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    (one &lt;span class="symbol"&gt;~&lt;/span&gt; uniform) (&lt;span class="keyword"&gt;for&lt;/span&gt; (pick&lt;span class="symbol"&gt;,&lt;/span&gt; correct)&lt;span class="symbol"&gt;:&lt;/span&gt; (&lt;span class="type-name"&gt;Doors&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;Doors&lt;/span&gt;)&lt;span class="symbol"&gt;.&lt;/span&gt;
     (change&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; uniform) (&lt;span class="keyword"&gt;for&lt;/span&gt; change&lt;span class="symbol"&gt;.&lt;/span&gt;
        win_dist &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;case&lt;/span&gt; change &lt;span class="keyword"&gt;of&lt;/span&gt; 
                     {&lt;span class="symbol"&gt;|&lt;/span&gt;yes&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;} &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; yesno (pick &lt;span class="symbol"&gt;/=&lt;/span&gt; correct)
                     {&lt;span class="symbol"&gt;|&lt;/span&gt;no&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;}  &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; yesno (pick &lt;span class="symbol"&gt;==&lt;/span&gt; correct)
        (win&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; win_dist) one))
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;To check the odds we will compute probabity of winning conditioned
on changing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;{&lt;span class="symbol"&gt;|&lt;/span&gt;yes&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;} &lt;span class="symbol"&gt;??&lt;/span&gt; (posterior &lt;span class="symbol"&gt;$&lt;/span&gt; monty_hall (observed {&lt;span class="symbol"&gt;|&lt;/span&gt;yes&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;}))
&lt;/div&gt;&lt;div class="result-block"&gt;0.666667&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;And compare to proability of winning with no change.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;{&lt;span class="symbol"&gt;|&lt;/span&gt;yes&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;} &lt;span class="symbol"&gt;??&lt;/span&gt; (posterior &lt;span class="symbol"&gt;$&lt;/span&gt; monty_hall (observed {&lt;span class="symbol"&gt;|&lt;/span&gt;no&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;}))
&lt;/div&gt;&lt;div class="result-block"&gt;0.333333&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;


&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Example 5: Hidden Markov Models&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Finally we conclude with a more complex example. A hidden Markov model is
one of the most widely used discrete time series models. It models the relationship between discrete hidden states $Z$ and emissions $X$.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Z&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 5
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;X&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 10
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;It consists of three distributions: initial, transition, and emission.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;initial &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Pr&lt;/span&gt; &lt;span class="type-name"&gt;Z&lt;/span&gt; nil &lt;span class="symbol"&gt;=&lt;/span&gt; arb &lt;span class="symbol"&gt;$&lt;/span&gt; newKey 1
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;emission &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Pr&lt;/span&gt; &lt;span class="type-name"&gt;X&lt;/span&gt; &lt;span class="type-name"&gt;Z&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; arb &lt;span class="symbol"&gt;$&lt;/span&gt; newKey 2
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;transition &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Pr&lt;/span&gt; &lt;span class="type-name"&gt;Z&lt;/span&gt; &lt;span class="type-name"&gt;Z&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; arb &lt;span class="symbol"&gt;$&lt;/span&gt; newKey 3
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The model itself takes the following form for $m$ steps.
'
$$ z_0 \sim \text{initial}$$
$$ z_1 \sim \text{transition}(z_0)$$
$$ x_1 \sim \text{emission}(z_1)$$
$$ ...$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This is implemented in reverse order for clarity (backward algorithm).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; hmm (init&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Z&lt;/span&gt;) (x&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;X&lt;/span&gt;) (z&amp;#39; &lt;span class="symbol"&gt;:&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Z&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    (init&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; initial&lt;span class="symbol"&gt;.&lt;/span&gt;nil) &lt;span class="symbol"&gt;$&lt;/span&gt; yieldState one ( &lt;span class="symbol"&gt;\&lt;/span&gt;future &lt;span class="symbol"&gt;.&lt;/span&gt;
        &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="command"&gt;:m&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;
            j &lt;span class="symbol"&gt;=&lt;/span&gt; ((size m) &lt;span class="symbol"&gt;-&lt;/span&gt; (ordinal i) &lt;span class="symbol"&gt;-&lt;/span&gt; 1)&lt;span class="symbol"&gt;@&lt;/span&gt;_
            future &lt;span class="symbol"&gt;:=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; z&lt;span class="symbol"&gt;.&lt;/span&gt;
                (x&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt;j &lt;span class="symbol"&gt;~&lt;/span&gt; emission&lt;span class="symbol"&gt;.&lt;/span&gt;z) (&lt;span class="keyword"&gt;for&lt;/span&gt; _&lt;span class="symbol"&gt;.&lt;/span&gt;
                 (z&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt;j &lt;span class="symbol"&gt;~&lt;/span&gt; transition&lt;span class="symbol"&gt;.&lt;/span&gt;z) (get future)))
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We can marginalize out over latents.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;hmm (observed (1&lt;span class="symbol"&gt;@&lt;/span&gt;_)) (&lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; 2)&lt;span class="symbol"&gt;.&lt;/span&gt; observed (1&lt;span class="symbol"&gt;@&lt;/span&gt;_)) (&lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; latent)
&lt;/div&gt;&lt;div class="result-block"&gt;0.000285&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Or we can compute the posterior probabilities of specific values.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;posteriorTab &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;z &lt;span class="symbol"&gt;.&lt;/span&gt; hmm (observed (1&lt;span class="symbol"&gt;@&lt;/span&gt;_)) (&lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; 2)&lt;span class="symbol"&gt;.&lt;/span&gt; observed (1&lt;span class="symbol"&gt;@&lt;/span&gt;_)) z
&lt;/div&gt;&lt;div class="result-block"&gt;[ (AsDist [0.004153, 0.162454, 0.539687, 0.069191, 0.224516])
, (AsDist [0.180291, 0.288983, 0.129116, 0.108978, 0.292633]) ]&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Example 5a. HMM Monoid&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We can also write out an HMM using a Monoid. Here we define a monoid
for square matrix multiplication.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="type-name"&gt;MarkovMonoid&lt;/span&gt; (a&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Monoid&lt;/span&gt; (a &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; a &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;=&lt;/span&gt;
  &lt;span class="type-name"&gt;M&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; a &lt;span class="comment"&gt;-- XXX: Typing `Monoid a` below would quantify it over a, which we don&amp;#39;t want
&lt;/span&gt;  named&lt;span class="symbol"&gt;-&lt;/span&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; result &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Monoid&lt;/span&gt; (&lt;span class="type-name"&gt;M&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;M&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;)
     mempty &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; m1 m2&lt;span class="symbol"&gt;.&lt;/span&gt; select ((ordinal m1) &lt;span class="symbol"&gt;==&lt;/span&gt; (ordinal m2)) 1&lt;span class="symbol"&gt;.&lt;/span&gt;0 0&lt;span class="symbol"&gt;.&lt;/span&gt;0
     mcombine &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;m1 m2&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i j&lt;span class="symbol"&gt;.&lt;/span&gt; sum &lt;span class="keyword"&gt;for&lt;/span&gt; k&lt;span class="symbol"&gt;.&lt;/span&gt; m1&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;k &lt;span class="symbol"&gt;*&lt;/span&gt; m2&lt;span class="symbol"&gt;.&lt;/span&gt;k&lt;span class="symbol"&gt;.&lt;/span&gt;j
  result
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We also define a Markov version of our sample function.
Instead of summing out over the usage of its result,
it constructs a matrix a vector.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; markov (lambda&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Var&lt;/span&gt; a) (pr&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; a) &lt;span class="symbol"&gt;:&lt;/span&gt; a &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; a&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt; (a&amp;#39; &lt;span class="symbol"&gt;??&lt;/span&gt; pr) &lt;span class="symbol"&gt;*&lt;/span&gt; lambda&lt;span class="symbol"&gt;.&lt;/span&gt;a&amp;#39;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Here we write out the HMM using a forward style approach.
Each time through the algorithm the accumulator represents
the matrix of the joint likelihood from position 1 to i.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; hmm_monoid (init&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Z&lt;/span&gt;) (x&amp;#39;&lt;span class="symbol"&gt;:&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;X&lt;/span&gt;) (z&amp;#39; &lt;span class="symbol"&gt;:&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;Z&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    scores &lt;span class="symbol"&gt;=&lt;/span&gt; yieldAccum (&lt;span class="type-name"&gt;MarkovMonoid&lt;/span&gt; &lt;span class="type-name"&gt;Z&lt;/span&gt;) &lt;span class="symbol"&gt;\&lt;/span&gt;ref &lt;span class="symbol"&gt;.&lt;/span&gt;
        &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="command"&gt;:m&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;
            ref &lt;span class="symbol"&gt;+=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; z&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Z&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;
                emit &lt;span class="symbol"&gt;=&lt;/span&gt; (x&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;~&lt;/span&gt; emission&lt;span class="symbol"&gt;.&lt;/span&gt;z) one
                emit &lt;span class="symbol"&gt;.*&lt;/span&gt; (markov z&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt;i transition&lt;span class="symbol"&gt;.&lt;/span&gt;z)
    (init&amp;#39; &lt;span class="symbol"&gt;~&lt;/span&gt; initial&lt;span class="symbol"&gt;.&lt;/span&gt;nil) &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;.&lt;/span&gt; sum scores&lt;span class="symbol"&gt;.&lt;/span&gt;j
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;At first glance, this seems much less efficient. Above we
had an algorithm that only required $O(Z)$ storage whereas this
requires $O(Z^2)$. In theory this approach can be parallelized
over the intermediate size variable $m$.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This should give the same result as before.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;hmm_monoid (observed (1&lt;span class="symbol"&gt;@&lt;/span&gt;_)) (&lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; 2)&lt;span class="symbol"&gt;.&lt;/span&gt; observed (1&lt;span class="symbol"&gt;@&lt;/span&gt;_)) (&lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; latent)
&lt;/div&gt;&lt;div class="result-block"&gt;0.000285&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Unfortunately though, the code for monoid's does not yet allow for
auto-differentiation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;posteriorTab &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;z &lt;span class="symbol"&gt;.&lt;/span&gt; hmm (observed (1&lt;span class="symbol"&gt;@&lt;/span&gt;_)) (&lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; 2)&lt;span class="symbol"&gt;.&lt;/span&gt; observed (1&lt;span class="symbol"&gt;@&lt;/span&gt;_)) z
&lt;/div&gt;&lt;div class="result-block"&gt;[ (AsDist [0.004153, 0.162454, 0.539687, 0.069191, 0.224516])
, (AsDist [0.180291, 0.288983, 0.129116, 0.108978, 0.292633]) ]&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Fancier Distributions&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; without_replacement (y&lt;span class="symbol"&gt;:&lt;/span&gt; n&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;m) (&lt;span class="type-name"&gt;AsDist&lt;/span&gt; x&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; m) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Dist&lt;/span&gt; m &lt;span class="symbol"&gt;=&lt;/span&gt;
    renorm &lt;span class="symbol"&gt;=&lt;/span&gt; sum &lt;span class="keyword"&gt;for&lt;/span&gt; n&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;(y&lt;span class="symbol"&gt;.&lt;/span&gt;n&amp;#39;)
    &lt;span class="type-name"&gt;AsDist&lt;/span&gt; &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; m&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt;
           &lt;span class="keyword"&gt;case&lt;/span&gt; (any &lt;span class="keyword"&gt;for&lt;/span&gt; n&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt; (ordinal (y&lt;span class="symbol"&gt;.&lt;/span&gt;n&amp;#39;)) &lt;span class="symbol"&gt;==&lt;/span&gt; (ordinal m&amp;#39;)) &lt;span class="keyword"&gt;of&lt;/span&gt;
                &lt;span class="type-name"&gt;False&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; (x&lt;span class="symbol"&gt;.&lt;/span&gt;m&amp;#39; &lt;span class="symbol"&gt;/&lt;/span&gt; (1&lt;span class="symbol"&gt;.&lt;/span&gt;0 &lt;span class="symbol"&gt;-&lt;/span&gt; renorm))
                &lt;span class="type-name"&gt;True&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;                
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h3&gt;Probability Exercises (from Stat 110 textbook)&lt;/h3&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;A college has 10 (non-overlapping) time slots for its 10 courses, and blithely assigns
courses to time slots randomly and independently. A student randomly chooses 3 of the
courses to enroll in. What is the probability that there is a conflict in the student’s
schedule?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Slot&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 10
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; courses (conflict&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;YesNo&lt;/span&gt;)&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; 
    (one &lt;span class="symbol"&gt;~&lt;/span&gt; uniform) (&lt;span class="keyword"&gt;for&lt;/span&gt; (i&lt;span class="symbol"&gt;,&lt;/span&gt;j&lt;span class="symbol"&gt;,&lt;/span&gt;k)&lt;span class="symbol"&gt;:&lt;/span&gt;(&lt;span class="type-name"&gt;Slot&lt;/span&gt;&lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;Slot&lt;/span&gt;&lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;Slot&lt;/span&gt;)&lt;span class="symbol"&gt;.&lt;/span&gt;
          (conflict &lt;span class="symbol"&gt;~&lt;/span&gt; yesno ((i &lt;span class="symbol"&gt;==&lt;/span&gt; j) &lt;span class="symbol"&gt;||&lt;/span&gt; (j &lt;span class="symbol"&gt;==&lt;/span&gt; k) &lt;span class="symbol"&gt;||&lt;/span&gt; (i &lt;span class="symbol"&gt;==&lt;/span&gt; k))) one)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;courses (observed {&lt;span class="symbol"&gt;|&lt;/span&gt;yes&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;})
&lt;/div&gt;&lt;div class="result-block"&gt;0.28&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;A certain family has 6 children, consisting of 3 boys and 3 girls. Assuming that all
birth orders are equally likely, what is the probability that the 3 eldest children are the
3 girls.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Children&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 6
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; birth (event&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Var&lt;/span&gt; &lt;span class="type-name"&gt;YesNo&lt;/span&gt;)&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; 
    (one &lt;span class="symbol"&gt;~&lt;/span&gt; uniform) (&lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Children&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;
        (one &lt;span class="symbol"&gt;~&lt;/span&gt; without_replacement [i] uniform) (&lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Children&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;
            (one &lt;span class="symbol"&gt;~&lt;/span&gt; without_replacement [i&lt;span class="symbol"&gt;,&lt;/span&gt; j] uniform) (&lt;span class="keyword"&gt;for&lt;/span&gt; k&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Children&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;
               (event &lt;span class="symbol"&gt;~&lt;/span&gt; yesno ((ordinal i &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt; 3) &lt;span class="symbol"&gt;&amp;amp;&amp;amp;&lt;/span&gt; (ordinal j &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt; 3) &lt;span class="symbol"&gt;&amp;amp;&amp;amp;&lt;/span&gt; (ordinal k &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt; 3))) one)))
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;birth (observed {&lt;span class="symbol"&gt;|&lt;/span&gt;yes&lt;span class="symbol"&gt;=&lt;/span&gt;()&lt;span class="symbol"&gt;|&lt;/span&gt;})
&lt;/div&gt;&lt;div class="result-block"&gt;0.05&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><category term="Dex"></category><category term="Probability"></category><category term="Dex"></category><category term="AutoDiff"></category></entry><entry><title>Dex: Quaternions</title><link href="https://blog.rush-nlp.com/dex-quaternions.html" rel="alternate"></link><published>2021-06-01T12:00:00-04:00</published><updated>2020-06-01T12:00:00-04:00</updated><author><name>Sasha Rush</name></author><id>tag:blog.rush-nlp.com,2021-06-01:/dex-quaternions.html</id><summary type="html">Literate WebGL blog on Quaternion rotation with a Dex implementation.</summary><content type="html">&lt;div id="main-output"&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h1&gt;Rotations with quaternions&lt;/h1&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;(This is a Dex reimplementation of the @imadr's lovely little blog post &lt;a href="https://imadr.github.io/rotations-with-quaternions/"&gt;Rotation with Quaternions&lt;/a&gt; that includes an example front-end in three.js.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;A quaternion is a 4 dimensional complex-like number, it has four components, three of which are the &amp;quot;imaginary&amp;quot; part.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$ q = a+b\textrm{i}+c\textrm{j}+d\textrm{k} $$
$$ q = (b,c,d, a) $$
$$ \textrm{i}^{2}=\textrm{j}^{2}=\textrm{k}^{2}=\textrm{i}\textrm{j}\textrm{k}=-1 $$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We represent a quaternion with this data structure:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;data&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Q&lt;/span&gt; {x&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; y&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; z&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; w&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The four components are usually ordered (w,x,y,z) but I like to put (w) at the end.
Initializing a quaternion:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;q &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Q&lt;/span&gt; {x&lt;span class="symbol"&gt;=&lt;/span&gt;1&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; y&lt;span class="symbol"&gt;=&lt;/span&gt;2&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; z&lt;span class="symbol"&gt;=&lt;/span&gt;3&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; w&lt;span class="symbol"&gt;=&lt;/span&gt;4&lt;span class="symbol"&gt;.&lt;/span&gt;0}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;q
&lt;/div&gt;&lt;div class="result-block"&gt;(Q {w = 4., x = 1., y = 2., z = 3.})&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Quaternion magnitude&lt;/h2&gt;
&lt;p&gt;A quaternion is basically a 4 dimensional vector.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;as_vec &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt; &lt;span class="type-name"&gt;Q&lt;/span&gt;{x&lt;span class="symbol"&gt;,&lt;/span&gt;y&lt;span class="symbol"&gt;,&lt;/span&gt;z&lt;span class="symbol"&gt;,&lt;/span&gt;w}&lt;span class="symbol"&gt;.&lt;/span&gt; [x&lt;span class="symbol"&gt;,&lt;/span&gt; y&lt;span class="symbol"&gt;,&lt;/span&gt; z&lt;span class="symbol"&gt;,&lt;/span&gt; w]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;from_vec &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt; [x&lt;span class="symbol"&gt;,&lt;/span&gt; y&lt;span class="symbol"&gt;,&lt;/span&gt; z&lt;span class="symbol"&gt;,&lt;/span&gt; w]&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="type-name"&gt;Q&lt;/span&gt;{x&lt;span class="symbol"&gt;,&lt;/span&gt;y&lt;span class="symbol"&gt;,&lt;/span&gt;z&lt;span class="symbol"&gt;,&lt;/span&gt;w}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;It has a vector magnitude (or norm, or length):
$$||q|| = \sqrt{x^{2}+y^{2}+z^{2}+w^{2}}$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; magnitude (x&lt;span class="command"&gt;:a&lt;/span&gt;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; sqrt &lt;span class="symbol"&gt;$&lt;/span&gt; sum &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;*&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Quaternion normalization&lt;/h2&gt;
&lt;p&gt;Like vectors a quaternion can be normalized by dividing each component by the magnitude:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; normalize (x&lt;span class="command"&gt;:a&lt;/span&gt;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; a&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; 1&lt;span class="symbol"&gt;.&lt;/span&gt;0 &lt;span class="symbol"&gt;/&lt;/span&gt; (magnitude x) &lt;span class="symbol"&gt;.*&lt;/span&gt; x
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;A special property of quaternions is that a unit quaternion (a quaternion with magnitude (1)) represents a rotation in 3D space.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Scaling a quaternion&lt;/h2&gt;
&lt;p&gt;Scaling a quaternion is multiplying each of its components by a real number (the scalar):&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Add&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt;
  add &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt; x y&lt;span class="symbol"&gt;.&lt;/span&gt; from_vec &lt;span class="symbol"&gt;$&lt;/span&gt; (as_vec x) &lt;span class="symbol"&gt;+&lt;/span&gt; as_vec y
  sub &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt; x y&lt;span class="symbol"&gt;.&lt;/span&gt; from_vec &lt;span class="symbol"&gt;$&lt;/span&gt; (as_vec x) &lt;span class="symbol"&gt;-&lt;/span&gt; as_vec y
  zero &lt;span class="symbol"&gt;=&lt;/span&gt; from_vec &lt;span class="symbol"&gt;$&lt;/span&gt; zero
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;VSpace&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt;
  scaleVec &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt; s x&lt;span class="symbol"&gt;.&lt;/span&gt; from_vec (s &lt;span class="symbol"&gt;.*&lt;/span&gt; as_vec x)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Identity quaternion&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;There is a special quaternion called the &lt;em&gt;identity quaternion&lt;/em&gt; which corresponds to no rotation:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;ident &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Q&lt;/span&gt;{x&lt;span class="symbol"&gt;=&lt;/span&gt;0&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; y&lt;span class="symbol"&gt;=&lt;/span&gt;0&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; z&lt;span class="symbol"&gt;=&lt;/span&gt;0&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; w&lt;span class="symbol"&gt;=&lt;/span&gt;1&lt;span class="symbol"&gt;.&lt;/span&gt;0}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Geometrically, we can also consider ((0, 0, 0, -1)) to be an identity quaternion since it corresponds to no rotation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Quaternion multiplication&lt;/h2&gt;
&lt;p&gt;Multiplying two unit quaternions represents a &lt;em&gt;composition of two rotations&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Quaternion multiplication isn't commutative . If we want to apply a rotation (q_{1}) then a rotation (q_{2}), the resulting rotation (q_{3}) is:
$$q_{3}=q_{2}.q_{1}$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Quaternion multiplication looks like this:
$$q_{1} = a+b\textrm{i}+c\textrm{j}+d\textrm{k}$$
$$q_{2} = e+f\textrm{i}+g\textrm{j}+h\textrm{k}$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$
q_{1}.q_{2} = (ae-bf-cg-dh)+(af+be+ch-dg)\textrm{i}+(ag-bh+ce+df)\textrm{j}+(ah+bg-cf+de)\textrm{k}
$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Mul&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt;
  mul &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt; (&lt;span class="type-name"&gt;Q&lt;/span&gt;{x&lt;span class="symbol"&gt;,&lt;/span&gt;y&lt;span class="symbol"&gt;,&lt;/span&gt;z&lt;span class="symbol"&gt;,&lt;/span&gt;w}) (&lt;span class="type-name"&gt;Q&lt;/span&gt;{x&lt;span class="symbol"&gt;=&lt;/span&gt;x&amp;#39;&lt;span class="symbol"&gt;,&lt;/span&gt;y&lt;span class="symbol"&gt;=&lt;/span&gt;y&amp;#39;&lt;span class="symbol"&gt;,&lt;/span&gt;z&lt;span class="symbol"&gt;=&lt;/span&gt;z&amp;#39;&lt;span class="symbol"&gt;,&lt;/span&gt;w&lt;span class="symbol"&gt;=&lt;/span&gt;w&amp;#39;})&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="type-name"&gt;Q&lt;/span&gt; {
        x &lt;span class="symbol"&gt;=&lt;/span&gt; w&lt;span class="symbol"&gt;*&lt;/span&gt;x&amp;#39; &lt;span class="symbol"&gt;+&lt;/span&gt; x&lt;span class="symbol"&gt;*&lt;/span&gt;w&amp;#39; &lt;span class="symbol"&gt;+&lt;/span&gt; y&lt;span class="symbol"&gt;*&lt;/span&gt;z&amp;#39; &lt;span class="symbol"&gt;-&lt;/span&gt; z&lt;span class="symbol"&gt;*&lt;/span&gt;y&amp;#39;&lt;span class="symbol"&gt;,&lt;/span&gt;
        y &lt;span class="symbol"&gt;=&lt;/span&gt; w&lt;span class="symbol"&gt;*&lt;/span&gt;y&amp;#39; &lt;span class="symbol"&gt;-&lt;/span&gt; x&lt;span class="symbol"&gt;*&lt;/span&gt;z&amp;#39; &lt;span class="symbol"&gt;+&lt;/span&gt; y&lt;span class="symbol"&gt;*&lt;/span&gt;w&amp;#39; &lt;span class="symbol"&gt;+&lt;/span&gt; z&lt;span class="symbol"&gt;*&lt;/span&gt;x&amp;#39;&lt;span class="symbol"&gt;,&lt;/span&gt;
        z &lt;span class="symbol"&gt;=&lt;/span&gt; w&lt;span class="symbol"&gt;*&lt;/span&gt;z&amp;#39; &lt;span class="symbol"&gt;+&lt;/span&gt; x&lt;span class="symbol"&gt;*&lt;/span&gt;y&amp;#39; &lt;span class="symbol"&gt;-&lt;/span&gt; y&lt;span class="symbol"&gt;*&lt;/span&gt;x&amp;#39; &lt;span class="symbol"&gt;+&lt;/span&gt; z&lt;span class="symbol"&gt;*&lt;/span&gt;w&amp;#39;&lt;span class="symbol"&gt;,&lt;/span&gt;
        w &lt;span class="symbol"&gt;=&lt;/span&gt; w&lt;span class="symbol"&gt;*&lt;/span&gt;w&amp;#39; &lt;span class="symbol"&gt;-&lt;/span&gt; x&lt;span class="symbol"&gt;*&lt;/span&gt;x&amp;#39; &lt;span class="symbol"&gt;-&lt;/span&gt; y&lt;span class="symbol"&gt;*&lt;/span&gt;y&amp;#39; &lt;span class="symbol"&gt;-&lt;/span&gt; z&lt;span class="symbol"&gt;*&lt;/span&gt;z&amp;#39;
  }
  one &lt;span class="symbol"&gt;=&lt;/span&gt; ident
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We will make this into a Monoid in Dex.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Monoid&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt;
  mempty &lt;span class="symbol"&gt;=&lt;/span&gt; one
  mcombine &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;a b&lt;span class="symbol"&gt;.&lt;/span&gt; a &lt;span class="symbol"&gt;*&lt;/span&gt; b
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Quaternion vs Euler angles&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We use quaternions instead of Euler angles to represent rotations for a couple of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Euler angles suffer from gimbal lock&lt;/li&gt;
&lt;li&gt;Interpolating between two Euler angles lead to weird results&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We represent the orientation of an object using only a quaternion, then we multiply that orientation by another quaternion to rotate it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;However writing a rotation directly in quaternion form isn't really intuitive, what we do instead is *convert an Euler angle to a quaternion then use it for rotating.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;If we have an Euler angle rotation in the order ZYX (Yaw -&amp;gt; Pitch -&amp;gt; Roll, we can chose any order but must stay consistent), we can convert it to a quaternion like this:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$
q = \begin{bmatrix}
\sin(x/2)\cos(y/2)\cos(z/2)-\cos(x/2)\sin(y/2)\sin(z/2) \\
\cos(x/2)\sin(y/2)\cos(z/2)+\sin(x/2)\cos(y/2)\sin(z/2) \\
\cos(x/2)\cos(y/2)\sin(z/2)-\sin(x/2)\sin(y/2)\cos(z/2) \\
\cos(x/2)\cos(y/2)\cos(z/2)+\sin(x/2)\sin(y/2)\sin(z/2) \\
\end{bmatrix}
$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;data&lt;/span&gt; &lt;span class="type-name"&gt;Euler&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;E&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 3&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; euler_to_quat ((&lt;span class="type-name"&gt;E&lt;/span&gt; v)&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Euler&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    [sx&lt;span class="symbol"&gt;,&lt;/span&gt; sy&lt;span class="symbol"&gt;,&lt;/span&gt; sz] &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; sin v&lt;span class="symbol"&gt;.&lt;/span&gt;i
    [cx&lt;span class="symbol"&gt;,&lt;/span&gt; cy&lt;span class="symbol"&gt;,&lt;/span&gt; cz] &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; cos v&lt;span class="symbol"&gt;.&lt;/span&gt;i
    &lt;span class="type-name"&gt;Q&lt;/span&gt; { 
        x &lt;span class="symbol"&gt;=&lt;/span&gt; sx&lt;span class="symbol"&gt;*&lt;/span&gt;cy&lt;span class="symbol"&gt;*&lt;/span&gt;cz &lt;span class="symbol"&gt;-&lt;/span&gt; cx&lt;span class="symbol"&gt;*&lt;/span&gt;sy&lt;span class="symbol"&gt;*&lt;/span&gt;sz&lt;span class="symbol"&gt;,&lt;/span&gt;
        y &lt;span class="symbol"&gt;=&lt;/span&gt; cx&lt;span class="symbol"&gt;*&lt;/span&gt;sy&lt;span class="symbol"&gt;*&lt;/span&gt;cz &lt;span class="symbol"&gt;+&lt;/span&gt; sx&lt;span class="symbol"&gt;*&lt;/span&gt;cy&lt;span class="symbol"&gt;*&lt;/span&gt;sz&lt;span class="symbol"&gt;,&lt;/span&gt;
        z &lt;span class="symbol"&gt;=&lt;/span&gt; cx&lt;span class="symbol"&gt;*&lt;/span&gt;cy&lt;span class="symbol"&gt;*&lt;/span&gt;sz &lt;span class="symbol"&gt;-&lt;/span&gt; sx&lt;span class="symbol"&gt;*&lt;/span&gt;sy&lt;span class="symbol"&gt;*&lt;/span&gt;cz&lt;span class="symbol"&gt;,&lt;/span&gt;
        w &lt;span class="symbol"&gt;=&lt;/span&gt; cx&lt;span class="symbol"&gt;*&lt;/span&gt;cy&lt;span class="symbol"&gt;*&lt;/span&gt;cz &lt;span class="symbol"&gt;+&lt;/span&gt; sx&lt;span class="symbol"&gt;*&lt;/span&gt;sy&lt;span class="symbol"&gt;*&lt;/span&gt;sz
    }   
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;


&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Drawing with Quaternions&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Libraries like three.js allow us to use quaternions directly for rotations.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This script implements a simple 3D box positioned based on a quaternion.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; show3D ((&lt;span class="type-name"&gt;Q&lt;/span&gt; {x&lt;span class="symbol"&gt;,&lt;/span&gt; y&lt;span class="symbol"&gt;,&lt;/span&gt; z&lt;span class="symbol"&gt;,&lt;/span&gt; w})&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;String&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    &amp;quot;&lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;iframe width&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;100%&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot; frameborder&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;0&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot; scrolling&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;no&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;  onload&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;this&lt;span class="symbol"&gt;.&lt;/span&gt;style&lt;span class="symbol"&gt;.&lt;/span&gt;height&lt;span class="symbol"&gt;=&lt;/span&gt;this&lt;span class="symbol"&gt;.&lt;/span&gt;contentWindow&lt;span class="symbol"&gt;.&lt;/span&gt;document&lt;span class="symbol"&gt;.&lt;/span&gt;body&lt;span class="symbol"&gt;.&lt;/span&gt;scrollHeight&lt;span class="symbol"&gt;+&lt;/span&gt;&amp;#39;px&amp;#39;&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;;
srcdoc&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;#39;&lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;html&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt; 
    &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;head&lt;span class="symbol"&gt;&amp;gt;&amp;lt;&lt;/span&gt;script src&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;https&lt;span class="symbol"&gt;://&lt;/span&gt;cdn&lt;span class="symbol"&gt;.&lt;/span&gt;jsdelivr&lt;span class="symbol"&gt;.&lt;/span&gt;net&lt;span class="symbol"&gt;/&lt;/span&gt;npm&lt;span class="symbol"&gt;/&lt;/span&gt;three&lt;span class="symbol"&gt;-&lt;/span&gt;js&lt;span class="symbol"&gt;@&lt;/span&gt;79&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;/&lt;/span&gt;three&lt;span class="symbol"&gt;.&lt;/span&gt;js&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;script&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class="symbol"&gt;&amp;lt;/&lt;/span&gt;head&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt; 
    &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;body&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt; 
           &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;script&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;const scene &lt;span class="symbol"&gt;=&lt;/span&gt; new &lt;span class="type-name"&gt;THREE&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;&lt;span class="type-name"&gt;Scene&lt;/span&gt;();
                   &lt;span class="symbol"&gt;//&lt;/span&gt; &lt;span class="type-name"&gt;Generic&lt;/span&gt; scene construction
                   const camera &lt;span class="symbol"&gt;=&lt;/span&gt; new &lt;span class="type-name"&gt;THREE&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;&lt;span class="type-name"&gt;PerspectiveCamera&lt;/span&gt;( 75&lt;span class="symbol"&gt;,&lt;/span&gt; window&lt;span class="symbol"&gt;.&lt;/span&gt;innerWidth &lt;span class="symbol"&gt;/&lt;/span&gt; window&lt;span class="symbol"&gt;.&lt;/span&gt;innerHeight&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;1&lt;span class="symbol"&gt;,&lt;/span&gt; 1000 );
                   camera&lt;span class="symbol"&gt;.&lt;/span&gt;position&lt;span class="symbol"&gt;.&lt;/span&gt;z &lt;span class="symbol"&gt;=&lt;/span&gt; 2;
                   const renderer &lt;span class="symbol"&gt;=&lt;/span&gt; new &lt;span class="type-name"&gt;THREE&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;&lt;span class="type-name"&gt;WebGLRenderer&lt;/span&gt;();
                   renderer&lt;span class="symbol"&gt;.&lt;/span&gt;setSize( window&lt;span class="symbol"&gt;.&lt;/span&gt;innerWidth&lt;span class="symbol"&gt;,&lt;/span&gt; window&lt;span class="symbol"&gt;.&lt;/span&gt;innerHeight );
                   document&lt;span class="symbol"&gt;.&lt;/span&gt;body&lt;span class="symbol"&gt;.&lt;/span&gt;appendChild( renderer&lt;span class="symbol"&gt;.&lt;/span&gt;domElement );

                   &lt;span class="symbol"&gt;//&lt;/span&gt; &lt;span class="type-name"&gt;Create&lt;/span&gt; a pretty box with lights&lt;span class="symbol"&gt;.&lt;/span&gt;
                   const geometry &lt;span class="symbol"&gt;=&lt;/span&gt; new &lt;span class="type-name"&gt;THREE&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;&lt;span class="type-name"&gt;BoxGeometry&lt;/span&gt;(1&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; 1&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; 1&lt;span class="symbol"&gt;.&lt;/span&gt;0);
                   red &lt;span class="symbol"&gt;=&lt;/span&gt; new &lt;span class="type-name"&gt;THREE&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;&lt;span class="type-name"&gt;Color&lt;/span&gt;(1&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;,&lt;/span&gt; 0);
                   green &lt;span class="symbol"&gt;=&lt;/span&gt; new &lt;span class="type-name"&gt;THREE&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;&lt;span class="type-name"&gt;Color&lt;/span&gt;(0&lt;span class="symbol"&gt;,&lt;/span&gt; 1&lt;span class="symbol"&gt;,&lt;/span&gt; 0);
                   blue &lt;span class="symbol"&gt;=&lt;/span&gt; new &lt;span class="type-name"&gt;THREE&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;&lt;span class="type-name"&gt;Color&lt;/span&gt;(0&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;,&lt;/span&gt; 1);
                   var colors &lt;span class="symbol"&gt;=&lt;/span&gt; [red&lt;span class="symbol"&gt;,&lt;/span&gt; green&lt;span class="symbol"&gt;,&lt;/span&gt; blue];

                   &lt;span class="keyword"&gt;for&lt;/span&gt; (var i &lt;span class="symbol"&gt;=&lt;/span&gt; 0; i &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt; 3; i&lt;span class="symbol"&gt;++&lt;/span&gt;) {
                       geometry&lt;span class="symbol"&gt;.&lt;/span&gt;faces[4 &lt;span class="symbol"&gt;*&lt;/span&gt; i]&lt;span class="symbol"&gt;.&lt;/span&gt;color &lt;span class="symbol"&gt;=&lt;/span&gt; colors[i];
                       geometry&lt;span class="symbol"&gt;.&lt;/span&gt;faces[4 &lt;span class="symbol"&gt;*&lt;/span&gt; i &lt;span class="symbol"&gt;+&lt;/span&gt; 1]&lt;span class="symbol"&gt;.&lt;/span&gt;color &lt;span class="symbol"&gt;=&lt;/span&gt; colors[i];
                       geometry&lt;span class="symbol"&gt;.&lt;/span&gt;faces[4 &lt;span class="symbol"&gt;*&lt;/span&gt; i &lt;span class="symbol"&gt;+&lt;/span&gt; 2]&lt;span class="symbol"&gt;.&lt;/span&gt;color &lt;span class="symbol"&gt;=&lt;/span&gt; colors[i];
                       geometry&lt;span class="symbol"&gt;.&lt;/span&gt;faces[4 &lt;span class="symbol"&gt;*&lt;/span&gt; i &lt;span class="symbol"&gt;+&lt;/span&gt; 3]&lt;span class="symbol"&gt;.&lt;/span&gt;color &lt;span class="symbol"&gt;=&lt;/span&gt; colors[i];
                   }
                   var material &lt;span class="symbol"&gt;=&lt;/span&gt; new &lt;span class="type-name"&gt;THREE&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;&lt;span class="type-name"&gt;MeshBasicMaterial&lt;/span&gt;( { color&lt;span class="symbol"&gt;:&lt;/span&gt; 0xffffff&lt;span class="symbol"&gt;,&lt;/span&gt; vertexColors&lt;span class="symbol"&gt;:&lt;/span&gt; true } );


                   &lt;span class="symbol"&gt;//&lt;/span&gt; &lt;span class="type-name"&gt;Add&lt;/span&gt; the cube to the scene
                   const cube &lt;span class="symbol"&gt;=&lt;/span&gt; new &lt;span class="type-name"&gt;THREE&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;&lt;span class="type-name"&gt;Mesh&lt;/span&gt;( geometry&lt;span class="symbol"&gt;,&lt;/span&gt; material );
                   scene&lt;span class="symbol"&gt;.&lt;/span&gt;add( cube );

                   &lt;span class="symbol"&gt;//&lt;/span&gt; &lt;span class="type-name"&gt;Rotate&lt;/span&gt; by our angles&lt;span class="symbol"&gt;.&lt;/span&gt;
                   cube&lt;span class="symbol"&gt;.&lt;/span&gt;quaternion&lt;span class="symbol"&gt;.&lt;/span&gt;copy(new &lt;span class="type-name"&gt;THREE&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;&lt;span class="type-name"&gt;Quaternion&lt;/span&gt;(&amp;quot;&lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
                   (show x) &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
                   (show y) &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
                   (show z) &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
                   (show w) &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot;));

                   
                   renderer&lt;span class="symbol"&gt;.&lt;/span&gt;render( scene&lt;span class="symbol"&gt;,&lt;/span&gt; camera );
           &lt;span class="symbol"&gt;&amp;lt;/&lt;/span&gt;script&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt; 
    &lt;span class="symbol"&gt;&amp;lt;/&lt;/span&gt;body&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="symbol"&gt;&amp;lt;/&lt;/span&gt;html&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;&amp;#39;&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="symbol"&gt;&amp;lt;/&lt;/span&gt;iframe&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;&amp;quot;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D one
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0, 0, 0, 1));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;rot &lt;span class="symbol"&gt;=&lt;/span&gt; euler_to_quat (&lt;span class="type-name"&gt;E&lt;/span&gt; [pi &lt;span class="symbol"&gt;/&lt;/span&gt; 16&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0]) 
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; one &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rot
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0.195090324, 0, 0, 0.980785251));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; one &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rot &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rot
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0.382683426, 0, 0, 0.923879445));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; one &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rot &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rot &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rot
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0.555570245, 0, 0, 0.831469476));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; one &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rot &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rot &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rot &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rot
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0.707106769, 0, 0, 0.70710659));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;All the way around!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;rot2 &lt;span class="symbol"&gt;=&lt;/span&gt; euler_to_quat (&lt;span class="type-name"&gt;E&lt;/span&gt; [pi &lt;span class="symbol"&gt;/&lt;/span&gt; 16&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; pi&lt;span class="symbol"&gt;/&lt;/span&gt;8&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0]) 
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; one &lt;span class="symbol"&gt;*&lt;/span&gt; rot2
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0.180239946, 0.375330299, -0.0746578425, 0.906127393));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Quaternion Conjugate&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;conjugate&lt;/em&gt; of a quaternion (q) is:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$q^{*} = a-b\textrm{i}-c\textrm{j}-d\textrm{k}$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; conj ((&lt;span class="type-name"&gt;Q&lt;/span&gt; {x&lt;span class="symbol"&gt;,&lt;/span&gt; y&lt;span class="symbol"&gt;,&lt;/span&gt; z&lt;span class="symbol"&gt;,&lt;/span&gt; w})&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Quaternion&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="type-name"&gt;Q&lt;/span&gt; {x&lt;span class="symbol"&gt;=-&lt;/span&gt;x&lt;span class="symbol"&gt;,&lt;/span&gt; y&lt;span class="symbol"&gt;=-&lt;/span&gt;y&lt;span class="symbol"&gt;,&lt;/span&gt; z&lt;span class="symbol"&gt;=-&lt;/span&gt;z&lt;span class="symbol"&gt;,&lt;/span&gt; w&lt;span class="symbol"&gt;=&lt;/span&gt;w}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Quaternion Inverse&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The &lt;em&gt;inverse&lt;/em&gt; of a quaternion (q), is the conjugate divided by the magnitude squared:
$$q^{-1} = \frac{q^{*}}{||q||^{2}}$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; inv (q&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Quaternion&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    m &lt;span class="symbol"&gt;=&lt;/span&gt; magnitude &lt;span class="symbol"&gt;$&lt;/span&gt; as_vec q
    1&lt;span class="symbol"&gt;.&lt;/span&gt;0 &lt;span class="symbol"&gt;/&lt;/span&gt; (m &lt;span class="symbol"&gt;*&lt;/span&gt; m) &lt;span class="symbol"&gt;.*&lt;/span&gt; conj q
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;For unit quaternions, the conjugate is equal to the inverse.
Multiplying a quaternion by its inverse results in the identity quaternion:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$q.q^{-1} = (0, 0, 0, 1)$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Let's try it out&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;q&amp;#39; &lt;span class="symbol"&gt;=&lt;/span&gt; from_vec &lt;span class="symbol"&gt;$&lt;/span&gt; normalize &lt;span class="symbol"&gt;$&lt;/span&gt; as_vec &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="type-name"&gt;Q&lt;/span&gt; { x&lt;span class="symbol"&gt;=&lt;/span&gt;1&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; y&lt;span class="symbol"&gt;=&lt;/span&gt;2&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; z&lt;span class="symbol"&gt;=&lt;/span&gt;0&lt;span class="symbol"&gt;.&lt;/span&gt;5&lt;span class="symbol"&gt;,&lt;/span&gt; w&lt;span class="symbol"&gt;=&lt;/span&gt;10&lt;span class="symbol"&gt;.&lt;/span&gt;0}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; one 
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0, 0, 0, 1));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; one &lt;span class="symbol"&gt;*&lt;/span&gt; q&amp;#39;
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0.0974740386, 0.194948077, 0.0487370193, 0.974740386));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; one &lt;span class="symbol"&gt;*&lt;/span&gt; (inv q&amp;#39;)
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(-0.0974740386, -0.194948077, -0.0487370193, 0.974740386));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; one &lt;span class="symbol"&gt;*&lt;/span&gt; q&amp;#39; &lt;span class="symbol"&gt;*&lt;/span&gt; (inv q&amp;#39;)
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0, 4.65661287e-10, 3.7252903e-09, 1));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;




&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Quaternion difference&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The difference of two quaternions (q_{1}) and (q_{2}) is another quaternion (q_{3}) that rotates from (q_{1}) to (q_{2}):&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$q_{3} = q_{1}^{-1}.q_{2}$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;difference &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt; a b &lt;span class="symbol"&gt;.&lt;/span&gt; (inv a) &lt;span class="symbol"&gt;*&lt;/span&gt; b
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;rot_right &lt;span class="symbol"&gt;=&lt;/span&gt; euler_to_quat (&lt;span class="type-name"&gt;E&lt;/span&gt; [0&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; pi&lt;span class="symbol"&gt;/&lt;/span&gt;8&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0])
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; rot_right
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0, 0.382683456, 0, 0.923879504));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;rot_right_down &lt;span class="symbol"&gt;=&lt;/span&gt; euler_to_quat (&lt;span class="type-name"&gt;E&lt;/span&gt; [pi&lt;span class="symbol"&gt;/&lt;/span&gt;16&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; pi&lt;span class="symbol"&gt;/&lt;/span&gt;8&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0]) 
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; rot_right_down
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0.180239946, 0.375330299, -0.0746578425, 0.906127393));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;rot_down &lt;span class="symbol"&gt;=&lt;/span&gt; difference rot_right_down rot_right
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; rot_down
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(-0.195090324, -2.98023224e-08, 7.4505806e-09, 0.98078537));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Quaternion Exp and Log&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The exponential and the logarithm of a quaternion won't be very useful by themselves, but we will use them to compute other functions later.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Given a quaternion (q = (x,y,z,w)) and its vector part (v = (x,y,z)), the exponential of that quaternion is also a quaternion, and it's given by this formula:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$\exp(q) = \exp(w)\begin{pmatrix}
\frac{v_{x}}{||v||}\sin(||v||)\\
\frac{v_{y}}{||v||}\sin(||v||)\\
\frac{v_{z}}{||v||}\sin(||v||)\\
\cos(||v||)
\end{pmatrix}$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; q_exp (q&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Quaternion&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    (&lt;span class="type-name"&gt;Q&lt;/span&gt; {x&lt;span class="symbol"&gt;,&lt;/span&gt;y&lt;span class="symbol"&gt;,&lt;/span&gt;z&lt;span class="symbol"&gt;,&lt;/span&gt;w}) &lt;span class="symbol"&gt;=&lt;/span&gt; q
    v &lt;span class="symbol"&gt;=&lt;/span&gt; [x&lt;span class="symbol"&gt;,&lt;/span&gt; y&lt;span class="symbol"&gt;,&lt;/span&gt; z]
    m &lt;span class="symbol"&gt;=&lt;/span&gt; magnitude v
    [x&amp;#39;&lt;span class="symbol"&gt;,&lt;/span&gt; y&amp;#39;&lt;span class="symbol"&gt;,&lt;/span&gt; z&amp;#39;] &lt;span class="symbol"&gt;=&lt;/span&gt; normalize v
    sin_v &lt;span class="symbol"&gt;=&lt;/span&gt; sin m
    exp_w &lt;span class="symbol"&gt;=&lt;/span&gt; exp w
    &lt;span class="type-name"&gt;Q&lt;/span&gt; {x &lt;span class="symbol"&gt;=&lt;/span&gt; x&amp;#39; &lt;span class="symbol"&gt;*&lt;/span&gt; sin_v &lt;span class="symbol"&gt;*&lt;/span&gt; exp_w&lt;span class="symbol"&gt;,&lt;/span&gt;
       y &lt;span class="symbol"&gt;=&lt;/span&gt; y&amp;#39; &lt;span class="symbol"&gt;*&lt;/span&gt; sin_v &lt;span class="symbol"&gt;*&lt;/span&gt; exp_w&lt;span class="symbol"&gt;,&lt;/span&gt;
       z &lt;span class="symbol"&gt;=&lt;/span&gt; z&amp;#39; &lt;span class="symbol"&gt;*&lt;/span&gt; sin_v &lt;span class="symbol"&gt;*&lt;/span&gt; exp_w&lt;span class="symbol"&gt;,&lt;/span&gt;
       w &lt;span class="symbol"&gt;=&lt;/span&gt; cos(m) &lt;span class="symbol"&gt;*&lt;/span&gt; exp_w
    }
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Tangent: to implement quaternion logs we need arccos. We don't have this yet in Dex
so this is an approximation (https://developer.download.nvidia.com/cg/acos.html)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;NVidia CG Toolkit 3.1. NVidia Corporation. https://developer.nvidia.com/cg-toolkit&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; acos (x&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; 
  negate &lt;span class="symbol"&gt;=&lt;/span&gt; select (x &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0) 1&lt;span class="symbol"&gt;.&lt;/span&gt;0 0&lt;span class="symbol"&gt;.&lt;/span&gt;0
  x &lt;span class="symbol"&gt;=&lt;/span&gt; abs x
  ret1 &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="symbol"&gt;-&lt;/span&gt;0&lt;span class="symbol"&gt;.&lt;/span&gt;0187293 &lt;span class="symbol"&gt;*&lt;/span&gt; x) &lt;span class="symbol"&gt;+&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0742610
  ret2 &lt;span class="symbol"&gt;=&lt;/span&gt; (ret1 &lt;span class="symbol"&gt;*&lt;/span&gt; x) &lt;span class="symbol"&gt;-&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;2121144
  ret3 &lt;span class="symbol"&gt;=&lt;/span&gt; (ret2 &lt;span class="symbol"&gt;*&lt;/span&gt; x) &lt;span class="symbol"&gt;+&lt;/span&gt; 1&lt;span class="symbol"&gt;.&lt;/span&gt;5707288
  ret4 &lt;span class="symbol"&gt;=&lt;/span&gt; (ret3 &lt;span class="symbol"&gt;*&lt;/span&gt; (sqrt (1&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;-&lt;/span&gt;x))) &lt;span class="symbol"&gt;-&lt;/span&gt; (2&lt;span class="symbol"&gt;.&lt;/span&gt;0 &lt;span class="symbol"&gt;*&lt;/span&gt; negate &lt;span class="symbol"&gt;*&lt;/span&gt; ret3)
  negate &lt;span class="symbol"&gt;*&lt;/span&gt; 3&lt;span class="symbol"&gt;.&lt;/span&gt;14159265358979 &lt;span class="symbol"&gt;+&lt;/span&gt; ret4
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;    
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The logarithm of a quaternion is also a quaternion and is given by this formula:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$\log(q) = \begin{pmatrix}
\frac{v_{x}}{||v||}\arccos(\frac{w}{||q||})\\
\frac{v_{y}}{||v||}\arccos(\frac{w}{||q||})\\
\frac{v_{z}}{||v||}\arccos(\frac{w}{||q||})\\
\log(||q||)
\end{pmatrix}$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;



&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; q_log (q&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Quaternion&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    (&lt;span class="type-name"&gt;Q&lt;/span&gt; {x&lt;span class="symbol"&gt;,&lt;/span&gt;y&lt;span class="symbol"&gt;,&lt;/span&gt;z&lt;span class="symbol"&gt;,&lt;/span&gt;w}) &lt;span class="symbol"&gt;=&lt;/span&gt; q
    v &lt;span class="symbol"&gt;=&lt;/span&gt; [x&lt;span class="symbol"&gt;,&lt;/span&gt; y&lt;span class="symbol"&gt;,&lt;/span&gt; z]
    m &lt;span class="symbol"&gt;=&lt;/span&gt; magnitude &lt;span class="symbol"&gt;$&lt;/span&gt; as_vec q
    [x&amp;#39;&lt;span class="symbol"&gt;,&lt;/span&gt; y&amp;#39;&lt;span class="symbol"&gt;,&lt;/span&gt; z&amp;#39;] &lt;span class="symbol"&gt;=&lt;/span&gt; normalize v
    a &lt;span class="symbol"&gt;=&lt;/span&gt; acos (w &lt;span class="symbol"&gt;/&lt;/span&gt; m)
    &lt;span class="type-name"&gt;Q&lt;/span&gt; {x &lt;span class="symbol"&gt;=&lt;/span&gt; x&amp;#39; &lt;span class="symbol"&gt;*&lt;/span&gt; a&lt;span class="symbol"&gt;,&lt;/span&gt;
       y &lt;span class="symbol"&gt;=&lt;/span&gt; y&amp;#39; &lt;span class="symbol"&gt;*&lt;/span&gt; a&lt;span class="symbol"&gt;,&lt;/span&gt;
       z &lt;span class="symbol"&gt;=&lt;/span&gt; z&amp;#39; &lt;span class="symbol"&gt;*&lt;/span&gt; a&lt;span class="symbol"&gt;,&lt;/span&gt;
       w &lt;span class="symbol"&gt;=&lt;/span&gt; log(m)
    }
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Quaternion exponentiation&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Raising a quaternion to a power results in either a fraction or a multiple of that quaternion. (q^{2}) represents twice the rotation of (q), and (q^{0.5}) represents half of that rotation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$q^{n} = \exp(n\log(q))$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; q_pow (q&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Quaternion&lt;/span&gt;) (n&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    q_exp &lt;span class="symbol"&gt;$&lt;/span&gt; n &lt;span class="symbol"&gt;.*&lt;/span&gt; q_log q
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;


&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D (q_pow rot_right 5&lt;span class="symbol"&gt;.&lt;/span&gt;0)
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0, 0.923860788, 0, -0.382728666));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D (q_pow rot_right 15&lt;span class="symbol"&gt;.&lt;/span&gt;0)
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(-0, -0.382547736, -0, 0.923935711));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Quaternion slerping&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Arguably one of the most important advantages of quaternions, &amp;quot;Slerp&amp;quot; stands for spherical linear interpolation. It's a function thats takes three parameters: a quaternion (q_{1}), a quaternion (q_{2}) and an interpolation parameter (t) that goes from (0) to (1). It gives us an intermediate rotation depending on the value of (t).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;$$\textrm{slerp}(q_{1}, q_{2}, t) = q_{1}(q_{1}^{-1}q_{2})^{t}$$&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; slerp (q1&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Quaternion&lt;/span&gt;) (q2&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Quaternion&lt;/span&gt;) (t&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Quaternion&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    q1 &lt;span class="symbol"&gt;*&lt;/span&gt; q_pow ((inv q1) &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; q2) (min 1&lt;span class="symbol"&gt;.&lt;/span&gt;0 (max 0&lt;span class="symbol"&gt;.&lt;/span&gt;0 t))
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D one
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0, 0, 0, 1));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;goal &lt;span class="symbol"&gt;=&lt;/span&gt; rot_right_down &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rot_right_down
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D goal
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0.326640666, 0.680194139, -0.135299027, 0.642133772));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Here's what it looks like each step of the way&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; one
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0, 0, 0, 1));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; slerp one goal 0&lt;span class="symbol"&gt;.&lt;/span&gt;25
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0.0923116133, 0.192229033, -0.0382367298, 0.976250172));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; slerp one goal 0&lt;span class="symbol"&gt;.&lt;/span&gt;5
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0.180238456, 0.375327259, -0.0746572316, 0.906128943));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; slerp one goal 0&lt;span class="symbol"&gt;.&lt;/span&gt;75
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0.259604067, 0.540597677, -0.107531548, 0.792966962));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; show3D &lt;span class="symbol"&gt;$&lt;/span&gt; slerp one goal 1&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/three-js@79.0.0/three.js"&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
           &amp;lt;script&amp;gt;const scene = new THREE.Scene();
                   // Generic scene construction
                   const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
                   camera.position.z = 2;
                   const renderer = new THREE.WebGLRenderer();
                   renderer.setSize( window.innerWidth, window.innerHeight );
                   document.body.appendChild( renderer.domElement );

                   // Create a pretty box with lights.
                   const geometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
                   red = new THREE.Color(1, 0, 0);
                   green = new THREE.Color(0, 1, 0);
                   blue = new THREE.Color(0, 0, 1);
                   var colors = [red, green, blue];

                   for (var i = 0; i &amp;lt; 3; i++) {
                       geometry.faces[4 * i].color = colors[i];
                       geometry.faces[4 * i + 1].color = colors[i];
                       geometry.faces[4 * i + 2].color = colors[i];
                       geometry.faces[4 * i + 3].color = colors[i];
                   }
                   var material = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: true } );


                   // Add the cube to the scene
                   const cube = new THREE.Mesh( geometry, material );
                   scene.add( cube );

                   // Rotate by our angles.
                   cube.quaternion.copy(new THREE.Quaternion(0.326638579, 0.680189848, -0.135298163, 0.642139494));

                   
                   renderer.render( scene, camera );
           &amp;lt;/script&amp;gt; 
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><category term="Dex"></category><category term="Graphics"></category><category term="Dex"></category></entry><entry><title>Dex: Typed Visualization</title><link href="https://blog.rush-nlp.com/dex-typed-visualization.html" rel="alternate"></link><published>2020-10-01T12:00:00-04:00</published><updated>2020-10-01T12:00:00-04:00</updated><author><name>Sasha Rush</name></author><id>tag:blog.rush-nlp.com,2020-10-01:/dex-typed-visualization.html</id><summary type="html">A typed Pandas-style visualization notebook.</summary><content type="html">&lt;div id="main-output"&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h1&gt;Declarative Graphing&lt;/h1&gt;
&lt;p&gt;This example shows how to use Dex to generate interactive
graphs using a declarative graph library known as Vega-Lite.
To do this we will first implement a small JSON serialization library
and then a Dex interface to produce graph outputs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;JSON Implementation&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; join (joiner&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;List&lt;/span&gt; a) (lists&lt;span class="command"&gt;:n&lt;/span&gt;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;(&lt;span class="type-name"&gt;List&lt;/span&gt; a)) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;List&lt;/span&gt; a &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="comment"&gt;-- Join together lists with an intermediary joiner
&lt;/span&gt;    concat &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt;
        &lt;span class="keyword"&gt;case&lt;/span&gt; ordinal i &lt;span class="symbol"&gt;==&lt;/span&gt; (size n &lt;span class="symbol"&gt;-&lt;/span&gt; 1) &lt;span class="keyword"&gt;of&lt;/span&gt;
             &lt;span class="type-name"&gt;True&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; lists&lt;span class="symbol"&gt;.&lt;/span&gt;i
             &lt;span class="type-name"&gt;False&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; lists&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; joiner
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;A serialized JSON Value&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="comment"&gt;-- TODO - once Dex supports recursive ADT JValue becomes Value.
&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;data&lt;/span&gt; &lt;span class="type-name"&gt;JValue&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;AsJValue&lt;/span&gt; &lt;span class="type-name"&gt;String&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Simple JSON Data Type&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;data&lt;/span&gt; &lt;span class="type-name"&gt;Value&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
     &lt;span class="type-name"&gt;AsObject&lt;/span&gt; (&lt;span class="type-name"&gt;List&lt;/span&gt; (&lt;span class="type-name"&gt;String&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;JValue&lt;/span&gt;))
     &lt;span class="type-name"&gt;AsArray&lt;/span&gt; (&lt;span class="type-name"&gt;List&lt;/span&gt; &lt;span class="type-name"&gt;JValue&lt;/span&gt;)
     &lt;span class="type-name"&gt;AsString&lt;/span&gt; &lt;span class="type-name"&gt;String&lt;/span&gt;
     &lt;span class="type-name"&gt;AsFloat&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;
     &lt;span class="type-name"&gt;AsInt&lt;/span&gt; &lt;span class="type-name"&gt;Int&lt;/span&gt;
     &lt;span class="type-name"&gt;AsNone&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;interface&lt;/span&gt; &lt;span class="type-name"&gt;ToJSON&lt;/span&gt; a
  toJSON &lt;span class="symbol"&gt;:&lt;/span&gt; a &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Value&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Show&lt;/span&gt; &lt;span class="type-name"&gt;JValue&lt;/span&gt;
  show &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt; (&lt;span class="type-name"&gt;AsJValue&lt;/span&gt; a)&lt;span class="symbol"&gt;.&lt;/span&gt; a
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Serialization Methods&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; toJValue (x&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Value&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;JValue&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="type-name"&gt;AsJValue&lt;/span&gt; &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;case&lt;/span&gt; x &lt;span class="keyword"&gt;of&lt;/span&gt;
         &lt;span class="type-name"&gt;AsString&lt;/span&gt; y &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;  &amp;quot;&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;&amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; y &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot;&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;&amp;quot;
         &lt;span class="type-name"&gt;AsFloat&lt;/span&gt; y &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; show y
         &lt;span class="type-name"&gt;AsInt&lt;/span&gt; y &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; show y
         &lt;span class="type-name"&gt;AsObject&lt;/span&gt; (&lt;span class="type-name"&gt;AsList&lt;/span&gt; _ y) &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;
              (&amp;quot;{&amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; (join &amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot; &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt;
                 (k&lt;span class="symbol"&gt;,&lt;/span&gt; v) &lt;span class="symbol"&gt;=&lt;/span&gt; y&lt;span class="symbol"&gt;.&lt;/span&gt;i
                 &amp;quot;&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;&amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; k &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot;&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;&amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot;&lt;span class="symbol"&gt;:&lt;/span&gt;&amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; (show v)) &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot;}&amp;quot;)
         &lt;span class="type-name"&gt;AsArray&lt;/span&gt; (&lt;span class="type-name"&gt;AsList&lt;/span&gt; _ y) &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; (&amp;quot;[&amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; (join &amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot; &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; show y&lt;span class="symbol"&gt;.&lt;/span&gt;i) &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot;]&amp;quot;)
         &lt;span class="type-name"&gt;AsNone&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;&amp;quot;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; serialize [&lt;span class="type-name"&gt;ToJSON&lt;/span&gt; a] (x&lt;span class="command"&gt;:a&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;JValue&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    toJValue &lt;span class="symbol"&gt;$&lt;/span&gt; toJSON x
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Show&lt;/span&gt; &lt;span class="type-name"&gt;Value&lt;/span&gt;
  show &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;x&lt;span class="symbol"&gt;.&lt;/span&gt; show &lt;span class="symbol"&gt;$&lt;/span&gt; toJValue x
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Type classes for JSON conversion&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;ToJSON&lt;/span&gt; &lt;span class="type-name"&gt;String&lt;/span&gt;
  toJSON &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;AsString&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;ToJSON&lt;/span&gt; &lt;span class="type-name"&gt;Int&lt;/span&gt;
  toJSON &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;AsInt&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;ToJSON&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;
  toJSON &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;AsFloat&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;ToJSON&lt;/span&gt; &lt;span class="type-name"&gt;Value&lt;/span&gt;
  toJSON &lt;span class="symbol"&gt;=&lt;/span&gt; id
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; [&lt;span class="type-name"&gt;ToJSON&lt;/span&gt; v] &lt;span class="type-name"&gt;ToJSON&lt;/span&gt; (n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; v)
  toJSON &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;x &lt;span class="symbol"&gt;.&lt;/span&gt;
    sizen &lt;span class="symbol"&gt;=&lt;/span&gt; (size n)
    tab &lt;span class="symbol"&gt;=&lt;/span&gt; castTable (&lt;span class="type-name"&gt;Fin&lt;/span&gt; sizen) &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; serialize x&lt;span class="symbol"&gt;.&lt;/span&gt;i
    &lt;span class="type-name"&gt;AsArray&lt;/span&gt; &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="type-name"&gt;AsList&lt;/span&gt; sizen tab
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; [&lt;span class="type-name"&gt;ToJSON&lt;/span&gt; v] &lt;span class="type-name"&gt;ToJSON&lt;/span&gt; (&lt;span class="type-name"&gt;List&lt;/span&gt; v)
  toJSON &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;(&lt;span class="type-name"&gt;AsList&lt;/span&gt; _ x) &lt;span class="symbol"&gt;.&lt;/span&gt; toJSON x
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; [&lt;span class="type-name"&gt;ToJSON&lt;/span&gt; v] &lt;span class="type-name"&gt;ToJSON&lt;/span&gt; (n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; (&lt;span class="type-name"&gt;String&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; v))

  toJSON &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;x &lt;span class="symbol"&gt;.&lt;/span&gt;
     sizen &lt;span class="symbol"&gt;=&lt;/span&gt; (size n)
     tab &lt;span class="symbol"&gt;=&lt;/span&gt; castTable (&lt;span class="type-name"&gt;Fin&lt;/span&gt; sizen) &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; (fst x&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;,&lt;/span&gt; serialize &lt;span class="symbol"&gt;$&lt;/span&gt; snd x&lt;span class="symbol"&gt;.&lt;/span&gt;i)
     &lt;span class="type-name"&gt;AsObject&lt;/span&gt; &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="type-name"&gt;AsList&lt;/span&gt; _ tab
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; [&lt;span class="type-name"&gt;ToJSON&lt;/span&gt; v] &lt;span class="type-name"&gt;ToJSON&lt;/span&gt; (&lt;span class="type-name"&gt;List&lt;/span&gt; (&lt;span class="type-name"&gt;String&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; v))
  toJSON &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;(&lt;span class="type-name"&gt;AsList&lt;/span&gt; _ x) &lt;span class="symbol"&gt;.&lt;/span&gt; toJSON x
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; wrapCol [&lt;span class="type-name"&gt;ToJSON&lt;/span&gt; d]  (iso&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Iso&lt;/span&gt; a (d &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; c)) (x&lt;span class="command"&gt;:n&lt;/span&gt;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;a) &lt;span class="symbol"&gt;:&lt;/span&gt; n&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Value&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="comment"&gt;-- Helper function. Returns JSON of a column of a record
&lt;/span&gt;    &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; toJSON &lt;span class="symbol"&gt;$&lt;/span&gt; getAt iso x&lt;span class="symbol"&gt;.&lt;/span&gt;i
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Declarative Graph Grammars&lt;/h2&gt;
&lt;p&gt;Graph grammars are a style of graphing that aims to separate the data representation
from the graph layout. The main idea is to represent the underlying data as a flat
sequence of aligned rows (colloquially a &lt;code&gt;dataframe&lt;/code&gt;) and separately describe the graph
layout based on a grammar.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Here we implement a subset of the Vega-Lite (https://vega.github.io/vega-lite/) specification for
graphing. Vega-Lite lets you make a large set of charts using a very small grammar.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We will have several pieces of metadata. A header string, encoding type, and the
channels that the data is displayed with.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Header&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;String&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;data&lt;/span&gt; &lt;span class="type-name"&gt;EncodingType&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
     &lt;span class="type-name"&gt;Quantitative&lt;/span&gt;
     &lt;span class="type-name"&gt;Nominal&lt;/span&gt;
     &lt;span class="type-name"&gt;Ordinal&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Show&lt;/span&gt; &lt;span class="type-name"&gt;EncodingType&lt;/span&gt;
   show &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="symbol"&gt;\&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;
       &lt;span class="keyword"&gt;case&lt;/span&gt; x &lt;span class="keyword"&gt;of&lt;/span&gt;
         &lt;span class="type-name"&gt;Quantitative&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;quantitative&amp;quot;
         &lt;span class="type-name"&gt;Nominal&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;nominal&amp;quot;
         &lt;span class="type-name"&gt;Ordinal&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;ordinal&amp;quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;data&lt;/span&gt; &lt;span class="type-name"&gt;Channel&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
     &lt;span class="type-name"&gt;Y&lt;/span&gt;
     &lt;span class="type-name"&gt;X&lt;/span&gt;
     &lt;span class="type-name"&gt;Color&lt;/span&gt;
     &lt;span class="type-name"&gt;Tooltip&lt;/span&gt;
     &lt;span class="type-name"&gt;HREF&lt;/span&gt;
     &lt;span class="type-name"&gt;Row&lt;/span&gt;
     &lt;span class="type-name"&gt;Col&lt;/span&gt;
     &lt;span class="type-name"&gt;Size&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Show&lt;/span&gt; &lt;span class="type-name"&gt;Channel&lt;/span&gt;
         show &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="symbol"&gt;\&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;
              &lt;span class="keyword"&gt;case&lt;/span&gt; x &lt;span class="keyword"&gt;of&lt;/span&gt;
                   &lt;span class="type-name"&gt;Y&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;y&amp;quot;
                   &lt;span class="type-name"&gt;X&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;x&amp;quot;
                   &lt;span class="type-name"&gt;Color&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;color&amp;quot;
                   &lt;span class="type-name"&gt;Tooltip&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;tooltip&amp;quot;
                   &lt;span class="type-name"&gt;HREF&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;href&amp;quot;
                   &lt;span class="type-name"&gt;Size&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;size&amp;quot;
                   &lt;span class="type-name"&gt;Row&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;row&amp;quot;
                   &lt;span class="type-name"&gt;Col&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;col&amp;quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The final aspect of Vega-Lite is the Mark.
The mark tells it what kind of graph to draw, and the channels
allow us to assign different columns to different roles.
We implement these as simple data types, ideally these would be
derived from the spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;data&lt;/span&gt; &lt;span class="type-name"&gt;Mark&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
     &lt;span class="type-name"&gt;Area&lt;/span&gt;
     &lt;span class="type-name"&gt;Bar&lt;/span&gt;
     &lt;span class="type-name"&gt;Circle&lt;/span&gt;
     &lt;span class="type-name"&gt;Line&lt;/span&gt;
     &lt;span class="type-name"&gt;Point&lt;/span&gt;
     &lt;span class="type-name"&gt;Rect&lt;/span&gt;
     &lt;span class="type-name"&gt;Rule&lt;/span&gt;
     &lt;span class="type-name"&gt;Square&lt;/span&gt;
     &lt;span class="type-name"&gt;Text&lt;/span&gt;
     &lt;span class="type-name"&gt;Tick&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Show&lt;/span&gt; &lt;span class="type-name"&gt;Mark&lt;/span&gt;
         show &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="symbol"&gt;\&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;
              &lt;span class="keyword"&gt;case&lt;/span&gt; x &lt;span class="keyword"&gt;of&lt;/span&gt;
                   &lt;span class="type-name"&gt;Area&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;area&amp;quot;
                   &lt;span class="type-name"&gt;Bar&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;bar&amp;quot;
                   &lt;span class="type-name"&gt;Circle&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;circle&amp;quot;
                   &lt;span class="type-name"&gt;Line&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;line&amp;quot;
                   &lt;span class="type-name"&gt;Point&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;point&amp;quot;
                   &lt;span class="type-name"&gt;Rect&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;rect&amp;quot;
                   &lt;span class="type-name"&gt;Rule&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;rule&amp;quot;
                   &lt;span class="type-name"&gt;Square&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;square&amp;quot;
                   &lt;span class="type-name"&gt;Tick&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;tick&amp;quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Most things in VL can take in extra visual options.
To avoid specifying these, we will take in as
JSON.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;data&lt;/span&gt; &lt;span class="type-name"&gt;Opts&lt;/span&gt; a &lt;span class="symbol"&gt;=&lt;/span&gt;
     &lt;span class="type-name"&gt;WithOpts&lt;/span&gt; a &lt;span class="type-name"&gt;Value&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; pure (x&lt;span class="command"&gt;:a&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Opts&lt;/span&gt; a &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="type-name"&gt;WithOpts&lt;/span&gt; x &lt;span class="type-name"&gt;AsNone&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; pureLs (x&lt;span class="command"&gt;:a&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;List&lt;/span&gt; (&lt;span class="type-name"&gt;Opts&lt;/span&gt; a) &lt;span class="symbol"&gt;=&lt;/span&gt;
   &lt;span class="type-name"&gt;AsList&lt;/span&gt; 1 [&lt;span class="type-name"&gt;WithOpts&lt;/span&gt; x &lt;span class="type-name"&gt;AsNone&lt;/span&gt;]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; mergeOpts [&lt;span class="type-name"&gt;ToJSON&lt;/span&gt; a&lt;span class="symbol"&gt;,&lt;/span&gt; &lt;span class="type-name"&gt;ToJSON&lt;/span&gt; b] (x &lt;span class="symbol"&gt;:&lt;/span&gt; a) (y &lt;span class="symbol"&gt;:&lt;/span&gt; b) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Value&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
     &lt;span class="keyword"&gt;case&lt;/span&gt; toJSON x &lt;span class="keyword"&gt;of&lt;/span&gt;
         (&lt;span class="type-name"&gt;AsObject&lt;/span&gt; x&amp;#39;) &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="keyword"&gt;case&lt;/span&gt; toJSON y &lt;span class="keyword"&gt;of&lt;/span&gt;
                  (&lt;span class="type-name"&gt;AsObject&lt;/span&gt; y&amp;#39;) &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;AsObject&lt;/span&gt; &lt;span class="symbol"&gt;$&lt;/span&gt; x&amp;#39; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; y&amp;#39;
                  (&lt;span class="type-name"&gt;AsNone&lt;/span&gt;) &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;AsObject&lt;/span&gt; x&amp;#39;
         (&lt;span class="type-name"&gt;AsNone&lt;/span&gt;) &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; toJSON y
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;


&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;data&lt;/span&gt; &lt;span class="type-name"&gt;VLChart&lt;/span&gt; row col v &lt;span class="symbol"&gt;=&lt;/span&gt;
     &lt;span class="type-name"&gt;AsVLDescriptor&lt;/span&gt; (&lt;span class="type-name"&gt;Opts&lt;/span&gt; &lt;span class="type-name"&gt;Mark&lt;/span&gt;) v (col &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; ({title&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Header&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt;
                              encType&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;EncodingType&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt;
                              encodings&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;List&lt;/span&gt; (&lt;span class="type-name"&gt;Opts&lt;/span&gt; &lt;span class="type-name"&gt;Channel&lt;/span&gt;) &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt;
                              rows&lt;span class="symbol"&gt;:&lt;/span&gt; row &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Value&lt;/span&gt;
                              }))
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; [&lt;span class="type-name"&gt;ToJSON&lt;/span&gt; v] &lt;span class="type-name"&gt;ToJSON&lt;/span&gt; (&lt;span class="type-name"&gt;VLChart&lt;/span&gt; r c v)
   toJSON &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;
    (&lt;span class="type-name"&gt;AsVLDescriptor&lt;/span&gt; mark opts df) &lt;span class="symbol"&gt;=&lt;/span&gt; x
    &lt;span class="comment"&gt;-- Make the mark
&lt;/span&gt;    (&lt;span class="type-name"&gt;WithOpts&lt;/span&gt; mtype options) &lt;span class="symbol"&gt;=&lt;/span&gt; mark
    jmark &lt;span class="symbol"&gt;=&lt;/span&gt; (&amp;quot;mark&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; mergeOpts options [(&amp;quot;type&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; show mtype)])

    &lt;span class="comment"&gt;-- Make the data
&lt;/span&gt;    jdf &lt;span class="symbol"&gt;=&lt;/span&gt; toJSON &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; row &lt;span class="symbol"&gt;:&lt;/span&gt; r&lt;span class="symbol"&gt;.&lt;/span&gt; toJSON &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; col &lt;span class="symbol"&gt;:&lt;/span&gt; c&lt;span class="symbol"&gt;.&lt;/span&gt;
                   (&amp;quot;col&amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; (show &lt;span class="symbol"&gt;$&lt;/span&gt; ordinal col)&lt;span class="symbol"&gt;,&lt;/span&gt;
                    toJSON (getAt &lt;span class="iso-sugar"&gt;#rows&lt;/span&gt; df&lt;span class="symbol"&gt;.&lt;/span&gt;col)&lt;span class="symbol"&gt;.&lt;/span&gt;row)
    jdata &lt;span class="symbol"&gt;=&lt;/span&gt; (&amp;quot;&lt;span class="keyword"&gt;data&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; toJSON [(&amp;quot;values&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; jdf)])

    &lt;span class="comment"&gt;-- Make the encodings
&lt;/span&gt;    jencodings &lt;span class="symbol"&gt;=&lt;/span&gt; toJSON &lt;span class="symbol"&gt;$&lt;/span&gt; concat &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; col &lt;span class="symbol"&gt;:&lt;/span&gt; c&lt;span class="symbol"&gt;.&lt;/span&gt;
        (&lt;span class="type-name"&gt;AsList&lt;/span&gt; v encopts) &lt;span class="symbol"&gt;=&lt;/span&gt; getAt &lt;span class="iso-sugar"&gt;#encodings&lt;/span&gt; df&lt;span class="symbol"&gt;.&lt;/span&gt;col
        &lt;span class="type-name"&gt;AsList&lt;/span&gt; v &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; f&lt;span class="symbol"&gt;.&lt;/span&gt;
           (&lt;span class="type-name"&gt;WithOpts&lt;/span&gt; channel encoptions) &lt;span class="symbol"&gt;=&lt;/span&gt; encopts&lt;span class="symbol"&gt;.&lt;/span&gt;f
           (show channel&lt;span class="symbol"&gt;,&lt;/span&gt;
            mergeOpts encoptions
            [
              (&amp;quot;field&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;col&amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; (show &lt;span class="symbol"&gt;$&lt;/span&gt; ordinal col))&lt;span class="symbol"&gt;,&lt;/span&gt;
              (&amp;quot;type&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt;  show &lt;span class="symbol"&gt;$&lt;/span&gt; getAt &lt;span class="iso-sugar"&gt;#encType&lt;/span&gt; df&lt;span class="symbol"&gt;.&lt;/span&gt;col)&lt;span class="symbol"&gt;,&lt;/span&gt;
              (&amp;quot;title&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; getAt &lt;span class="iso-sugar"&gt;#title&lt;/span&gt; df&lt;span class="symbol"&gt;.&lt;/span&gt;col)
              ])
    jencode &lt;span class="symbol"&gt;=&lt;/span&gt; (&amp;quot;encoding&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; jencodings)
    mergeOpts opts [jdata&lt;span class="symbol"&gt;,&lt;/span&gt; jmark&lt;span class="symbol"&gt;,&lt;/span&gt; jencode]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; showVega (x&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Value&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;String&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    &amp;quot;&lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;iframe width&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;100%&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot; frameborder&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;0&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot; scrolling&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;no&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;
             onload&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;this&lt;span class="symbol"&gt;.&lt;/span&gt;style&lt;span class="symbol"&gt;.&lt;/span&gt;height&lt;span class="symbol"&gt;=&lt;/span&gt;this&lt;span class="symbol"&gt;.&lt;/span&gt;contentWindow&lt;span class="symbol"&gt;.&lt;/span&gt;document&lt;span class="symbol"&gt;.&lt;/span&gt;body&lt;span class="symbol"&gt;.&lt;/span&gt;scrollHeight&lt;span class="symbol"&gt;+&lt;/span&gt;&amp;#39;px&amp;#39;&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;;
             srcdoc&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;#39;&lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;html&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;head&lt;span class="symbol"&gt;&amp;gt;&amp;lt;&lt;/span&gt;script src&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;https&lt;span class="symbol"&gt;://&lt;/span&gt;cdn&lt;span class="symbol"&gt;.&lt;/span&gt;jsdelivr&lt;span class="symbol"&gt;.&lt;/span&gt;net&lt;span class="symbol"&gt;/&lt;/span&gt;npm&lt;span class="symbol"&gt;/&lt;/span&gt;vega&lt;span class="symbol"&gt;@&lt;/span&gt;5&lt;span class="symbol"&gt;.&lt;/span&gt;17&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;script&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;script src&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;https&lt;span class="symbol"&gt;://&lt;/span&gt;cdn&lt;span class="symbol"&gt;.&lt;/span&gt;jsdelivr&lt;span class="symbol"&gt;.&lt;/span&gt;net&lt;span class="symbol"&gt;/&lt;/span&gt;npm&lt;span class="symbol"&gt;/&lt;/span&gt;vega&lt;span class="symbol"&gt;-&lt;/span&gt;lite&lt;span class="symbol"&gt;@&lt;/span&gt;4&lt;span class="symbol"&gt;.&lt;/span&gt;17&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;script&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;script src&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;https&lt;span class="symbol"&gt;://&lt;/span&gt;cdn&lt;span class="symbol"&gt;.&lt;/span&gt;jsdelivr&lt;span class="symbol"&gt;.&lt;/span&gt;net&lt;span class="symbol"&gt;/&lt;/span&gt;npm&lt;span class="symbol"&gt;/&lt;/span&gt;vega&lt;span class="symbol"&gt;-&lt;/span&gt;embed&lt;span class="symbol"&gt;@&lt;/span&gt;6&lt;span class="symbol"&gt;.&lt;/span&gt;12&lt;span class="symbol"&gt;.&lt;/span&gt;2&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;script&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="symbol"&gt;&amp;lt;/&lt;/span&gt;head&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;body&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;div id&lt;span class="symbol"&gt;=\&lt;/span&gt;&amp;quot;vis&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;div&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt;script&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;vegaEmbed(&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;&lt;span class="iso-sugar"&gt;#vis&lt;/span&gt;&lt;span class="symbol"&gt;\&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt;&amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; (show x) &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot;);&lt;span class="symbol"&gt;&amp;lt;/&lt;/span&gt;script&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="symbol"&gt;&amp;lt;/&lt;/span&gt;body&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="symbol"&gt;&amp;lt;/&lt;/span&gt;html&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;&amp;#39;&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="symbol"&gt;&amp;lt;/&lt;/span&gt;iframe&lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt;&amp;quot;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Example: Bar Chart&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Start with a well type and useful Dex record&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;df1 &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; {a &lt;span class="symbol"&gt;=&lt;/span&gt; [&amp;quot;&lt;span class="type-name"&gt;A&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;B&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;C&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;D&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;E&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;F&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;G&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;H&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;I&lt;/span&gt;&amp;quot;]&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;,&lt;/span&gt;
              b &lt;span class="symbol"&gt;=&lt;/span&gt; [28&lt;span class="symbol"&gt;,&lt;/span&gt; 55&lt;span class="symbol"&gt;,&lt;/span&gt; 43&lt;span class="symbol"&gt;,&lt;/span&gt; 91&lt;span class="symbol"&gt;,&lt;/span&gt; 81&lt;span class="symbol"&gt;,&lt;/span&gt; 53&lt;span class="symbol"&gt;,&lt;/span&gt; 19&lt;span class="symbol"&gt;,&lt;/span&gt; 87&lt;span class="symbol"&gt;,&lt;/span&gt; 52]&lt;span class="symbol"&gt;.&lt;/span&gt;i}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;chart1 &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="type-name"&gt;AsVLDescriptor&lt;/span&gt; (pure &lt;span class="type-name"&gt;Bar&lt;/span&gt;) [(&amp;quot;title&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;Bar&lt;/span&gt; &lt;span class="type-name"&gt;Graph&lt;/span&gt;&amp;quot;)]
    [{title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;a axis&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;pureLs &lt;span class="type-name"&gt;X&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt;
      encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Nominal&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt;wrapCol &lt;span class="iso-sugar"&gt;#a&lt;/span&gt; df1}&lt;span class="symbol"&gt;,&lt;/span&gt;
     {title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;b axis&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;pureLs &lt;span class="type-name"&gt;Y&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt;
     encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Quantitative&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt;wrapCol &lt;span class="iso-sugar"&gt;#b&lt;/span&gt; df1}]
)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; showVega &lt;span class="symbol"&gt;$&lt;/span&gt; toJSON chart1
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/vega@5.17.0"&amp;gt;&amp;lt;/script&amp;gt;
          &amp;lt;script src="https://cdn.jsdelivr.net/npm/vega-lite@4.17.0"&amp;gt;&amp;lt;/script&amp;gt;
          &amp;lt;script src="https://cdn.jsdelivr.net/npm/vega-embed@6.12.2"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
           &amp;lt;div id="vis"&amp;gt;&amp;lt;/div&amp;gt;
           &amp;lt;script&amp;gt;vegaEmbed("#vis",{"title":"Bar Graph", "data":{"values":[{"col0":"A", "col1":28}, {"col0":"B", "col1":55}, {"col0":"C", "col1":43}, {"col0":"D", "col1":91}, {"col0":"E", "col1":81}, {"col0":"F", "col1":53}, {"col0":"G", "col1":19}, {"col0":"H", "col1":87}, {"col0":"I", "col1":52}]}, "mark":{"type":"bar"}, "encoding":{"x":{"field":"col0", "type":"nominal", "title":"a axis"}, "y":{"field":"col1", "type":"quantitative", "title":"b axis"}}});&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Example: Scatter&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This example constructs a scatter plot with several different variables.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;First we will construct a Nominal variable for a class.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;data&lt;/span&gt; &lt;span class="type-name"&gt;Class&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
     &lt;span class="type-name"&gt;A&lt;/span&gt;
     &lt;span class="type-name"&gt;B&lt;/span&gt;
     &lt;span class="type-name"&gt;C&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Show&lt;/span&gt; &lt;span class="type-name"&gt;Class&lt;/span&gt;
    show &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;x &lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;case&lt;/span&gt; x &lt;span class="keyword"&gt;of&lt;/span&gt;
               &lt;span class="type-name"&gt;A&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;Apples&lt;/span&gt;&amp;quot;
               &lt;span class="type-name"&gt;B&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;Bananas&lt;/span&gt;&amp;quot;
               &lt;span class="type-name"&gt;C&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;Cucumbers&lt;/span&gt;&amp;quot;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Arbitrary&lt;/span&gt; &lt;span class="type-name"&gt;Class&lt;/span&gt;
    arb &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;key&lt;span class="symbol"&gt;.&lt;/span&gt; [&lt;span class="type-name"&gt;A&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; &lt;span class="type-name"&gt;B&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; &lt;span class="type-name"&gt;C&lt;/span&gt;]&lt;span class="symbol"&gt;.&lt;/span&gt;(arb key)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;ToJSON&lt;/span&gt; &lt;span class="type-name"&gt;Class&lt;/span&gt;
    toJSON &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;x&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="type-name"&gt;AsString&lt;/span&gt; &lt;span class="symbol"&gt;$&lt;/span&gt; show x
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Then we will generate some random data.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;key &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Key&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; newKey 1
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;df2 &lt;span class="symbol"&gt;:&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; 100) &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; {x1&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; x2&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; weight&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; label&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Class&lt;/span&gt;}  &lt;span class="symbol"&gt;=&lt;/span&gt;  &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 100)&lt;span class="symbol"&gt;.&lt;/span&gt;
              [k1&lt;span class="symbol"&gt;,&lt;/span&gt; k2&lt;span class="symbol"&gt;,&lt;/span&gt; k3&lt;span class="symbol"&gt;,&lt;/span&gt; k4] &lt;span class="symbol"&gt;=&lt;/span&gt; splitKey &lt;span class="symbol"&gt;$&lt;/span&gt; ixkey key i
              {x1&lt;span class="symbol"&gt;=&lt;/span&gt;(arb k1)&lt;span class="symbol"&gt;,&lt;/span&gt;
               x2&lt;span class="symbol"&gt;=&lt;/span&gt;arb k2&lt;span class="symbol"&gt;,&lt;/span&gt;
               weight&lt;span class="symbol"&gt;=&lt;/span&gt;arb k3&lt;span class="symbol"&gt;,&lt;/span&gt;
               label&lt;span class="symbol"&gt;=&lt;/span&gt;arb k4}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The descriptor has a mapping between the variable names and their encoding type.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We use a different mark &lt;code&gt;Point&lt;/code&gt; and pass in multiple Channels for some variables.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;chart2 &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="type-name"&gt;AsVLDescriptor&lt;/span&gt; (pure &lt;span class="type-name"&gt;Point&lt;/span&gt;) [(&amp;quot;title&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;Scatter&lt;/span&gt;&amp;quot;)]
            [{title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;&lt;span class="type-name"&gt;X1&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;pureLs &lt;span class="type-name"&gt;X&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Quantitative&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt;wrapCol &lt;span class="iso-sugar"&gt;#x1&lt;/span&gt; df2}&lt;span class="symbol"&gt;,&lt;/span&gt;
             {title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;&lt;span class="type-name"&gt;X2&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;pureLs &lt;span class="type-name"&gt;Y&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Quantitative&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt;wrapCol &lt;span class="iso-sugar"&gt;#x2&lt;/span&gt; df2}&lt;span class="symbol"&gt;,&lt;/span&gt;
             {title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;&lt;span class="type-name"&gt;Weight&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;pureLs &lt;span class="type-name"&gt;Size&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Quantitative&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt;wrapCol &lt;span class="iso-sugar"&gt;#weight&lt;/span&gt; df2}&lt;span class="symbol"&gt;,&lt;/span&gt;
             {title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;&lt;span class="type-name"&gt;Label&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;toList [pure &lt;span class="type-name"&gt;Color&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; pure &lt;span class="type-name"&gt;Tooltip&lt;/span&gt;]&lt;span class="symbol"&gt;,&lt;/span&gt; encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Nominal&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt;wrapCol &lt;span class="iso-sugar"&gt;#label&lt;/span&gt; df2}])
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; showVega &lt;span class="symbol"&gt;$&lt;/span&gt; toJSON chart2
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/vega@5.17.0"&amp;gt;&amp;lt;/script&amp;gt;
          &amp;lt;script src="https://cdn.jsdelivr.net/npm/vega-lite@4.17.0"&amp;gt;&amp;lt;/script&amp;gt;
          &amp;lt;script src="https://cdn.jsdelivr.net/npm/vega-embed@6.12.2"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
           &amp;lt;div id="vis"&amp;gt;&amp;lt;/div&amp;gt;
           &amp;lt;script&amp;gt;vegaEmbed("#vis",{"title":"Scatter", "data":{"values":[{"col0":0.00111498893, "col1":0.139302969, "col2":0.378523082, "col3":"Cucumbers"}, {"col0":1.51853418, "col1":0.757679403, "col2":0.408158153, "col3":"Bananas"}, {"col0":0.176117927, "col1":1.11011362, "col2":-1.05090833, "col3":"Apples"}, {"col0":-1.82915032, "col1":0.853383601, "col2":1.41573584, "col3":"Bananas"}, {"col0":-0.289659768, "col1":-0.29858616, "col2":-1.80150533, "col3":"Cucumbers"}, {"col0":0.723925114, "col1":1.59666228, "col2":0.465925902, "col3":"Apples"}, {"col0":0.0298347417, "col1":-2.01448369, "col2":1.23918688, "col3":"Apples"}, {"col0":1.6102854, "col1":-0.423012078, "col2":2.69782138, "col3":"Bananas"}, {"col0":-0.263672054, "col1":1.20939744, "col2":-1.5712949, "col3":"Cucumbers"}, {"col0":0.421367496, "col1":0.47790575, "col2":0.769254982, "col3":"Apples"}, {"col0":-0.541137695, "col1":-0.388154805, "col2":-0.485970527, "col3":"Apples"}, {"col0":1.53182864, "col1":1.00702322, "col2":-1.02013886, "col3":"Cucumbers"}, {"col0":0.136132106, "col1":-1.44790339, "col2":1.48262691, "col3":"Apples"}, {"col0":1.71201015, "col1":1.19220126, "col2":1.18872368, "col3":"Bananas"}, {"col0":0.47177738, "col1":-0.522429347, "col2":-0.303254753, "col3":"Cucumbers"}, {"col0":0.367600292, "col1":-0.435061812, "col2":-0.343509465, "col3":"Apples"}, {"col0":-0.115037754, "col1":0.980583847, "col2":1.65721548, "col3":"Apples"}, {"col0":0.252852529, "col1":-1.40584326, "col2":2.8169589, "col3":"Apples"}, {"col0":-0.295276076, "col1":0.93771559, "col2":-0.63963449, "col3":"Apples"}, {"col0":0.911606908, "col1":2.15036464, "col2":-2.427284, "col3":"Cucumbers"}, {"col0":0.566098094, "col1":0.347379893, "col2":0.185839802, "col3":"Bananas"}, {"col0":-0.781061411, "col1":2.46080184, "col2":1.02488959, "col3":"Cucumbers"}, {"col0":2.0277617, "col1":-0.411489069, "col2":-0.671722174, "col3":"Apples"}, {"col0":-0.337535143, "col1":0.812460721, "col2":1.36038625, "col3":"Cucumbers"}, {"col0":0.957657278, "col1":0.00331091019, "col2":0.0125574674, "col3":"Bananas"}, {"col0":-0.898884892, "col1":-0.684651136, "col2":-0.198668525, "col3":"Cucumbers"}, {"col0":-0.557679713, "col1":0.935072362, "col2":1.00839591, "col3":"Bananas"}, {"col0":-0.599741638, "col1":-1.10240376, "col2":0.425546348, "col3":"Bananas"}, {"col0":1.66872704, "col1":-0.647065341, "col2":0.758707464, "col3":"Apples"}, {"col0":2.14058828, "col1":-0.461150318, "col2":-1.65378308, "col3":"Apples"}, {"col0":1.35778558, "col1":-1.08452845, "col2":0.19398424, "col3":"Bananas"}, {"col0":0.789465904, "col1":-0.718942344, "col2":-0.868534386, "col3":"Apples"}, {"col0":-0.621035337, "col1":-0.0959458575, "col2":-0.759767115, "col3":"Cucumbers"}, {"col0":-0.3129296, "col1":1.21895373, "col2":0.18624486, "col3":"Apples"}, {"col0":-1.69057643, "col1":1.92979825, "col2":1.08836269, "col3":"Apples"}, {"col0":1.28825927, "col1":1.62917387, "col2":0.776902258, "col3":"Apples"}, {"col0":-0.500706434, "col1":-0.532741129, "col2":-1.02626836, "col3":"Cucumbers"}, {"col0":-0.85857904, "col1":-0.942546964, "col2":-1.00501585, "col3":"Apples"}, {"col0":-0.885294139, "col1":-1.14640594, "col2":0.167181149, "col3":"Apples"}, {"col0":0.737017453, "col1":-0.553220689, "col2":-0.14349395, "col3":"Apples"}, {"col0":-1.34679472, "col1":0.767850041, "col2":1.13844788, "col3":"Apples"}, {"col0":0.224363327, "col1":-0.100951776, "col2":-1.64641023, "col3":"Bananas"}, {"col0":-0.503104448, "col1":0.0291211363, "col2":-2.30107999, "col3":"Cucumbers"}, {"col0":1.02562332, "col1":-0.825592875, "col2":-0.00529770087, "col3":"Cucumbers"}, {"col0":-1.50894487, "col1":0.727649271, "col2":0.494943082, "col3":"Apples"}, {"col0":-0.434433132, "col1":-1.3271879, "col2":-2.15182757, "col3":"Apples"}, {"col0":1.22005033, "col1":0.755801558, "col2":-1.67349708, "col3":"Cucumbers"}, {"col0":-2.09718585, "col1":1.32814336, "col2":0.216017336, "col3":"Apples"}, {"col0":-0.15126133, "col1":0.633645236, "col2":0.239083931, "col3":"Cucumbers"}, {"col0":-0.485832274, "col1":0.383301795, "col2":1.17413139, "col3":"Apples"}, {"col0":-0.796930075, "col1":1.27380145, "col2":0.351050228, "col3":"Bananas"}, {"col0":-1.08893776, "col1":-1.59018612, "col2":1.8484422, "col3":"Apples"}, {"col0":-0.780906439, "col1":0.70861429, "col2":0.134393513, "col3":"Apples"}, {"col0":-0.667463779, "col1":0.546014845, "col2":-0.404862434, "col3":"Apples"}, {"col0":-0.0693809763, "col1":-1.53984475, "col2":-1.4372021, "col3":"Bananas"}, {"col0":0.853852451, "col1":0.906464159, "col2":0.724542856, "col3":"Bananas"}, {"col0":-2.37631392, "col1":0.679097295, "col2":-1.26143706, "col3":"Bananas"}, {"col0":-0.240285143, "col1":-2.04659224, "col2":-0.397884548, "col3":"Apples"}, {"col0":-1.12077224, "col1":-0.345927984, "col2":1.80471718, "col3":"Cucumbers"}, {"col0":0.586421192, "col1":2.0021193, "col2":-1.14690447, "col3":"Apples"}, {"col0":-0.252741218, "col1":0.714034438, "col2":-0.719253004, "col3":"Cucumbers"}, {"col0":0.381879866, "col1":1.13080704, "col2":-1.33315599, "col3":"Bananas"}, {"col0":-1.37985444, "col1":1.74358571, "col2":0.235032901, "col3":"Apples"}, {"col0":0.452850521, "col1":0.0138735129, "col2":0.320342481, "col3":"Cucumbers"}, {"col0":-0.402791262, "col1":0.646920204, "col2":-1.78016138, "col3":"Bananas"}, {"col0":-0.0162458271, "col1":-0.364296943, "col2":-1.16839075, "col3":"Apples"}, {"col0":-0.380248904, "col1":0.632296264, "col2":1.55236626, "col3":"Apples"}, {"col0":-0.102362141, "col1":-0.160158783, "col2":-1.10648787, "col3":"Apples"}, {"col0":0.125620872, "col1":1.12499404, "col2":2.25818324, "col3":"Cucumbers"}, {"col0":0.194875121, "col1":0.671409428, "col2":-0.643754542, "col3":"Cucumbers"}, {"col0":0.536372423, "col1":-1.34087443, "col2":0.734999716, "col3":"Apples"}, {"col0":-0.0306982826, "col1":-1.10632646, "col2":-0.292435288, "col3":"Bananas"}, {"col0":-1.91014099, "col1":-0.304243654, "col2":-1.29927361, "col3":"Apples"}, {"col0":-0.716346443, "col1":-1.32878506, "col2":0.547039628, "col3":"Cucumbers"}, {"col0":-0.726060092, "col1":-0.476059616, "col2":0.155834511, "col3":"Apples"}, {"col0":-0.91305846, "col1":-0.347747713, "col2":1.08865392, "col3":"Bananas"}, {"col0":2.29452968, "col1":-0.238462731, "col2":0.529262602, "col3":"Bananas"}, {"col0":1.547755, "col1":0.268394828, "col2":-1.59741223, "col3":"Apples"}, {"col0":0.157684073, "col1":-1.2534349, "col2":-0.47327745, "col3":"Cucumbers"}, {"col0":0.436121881, "col1":-0.512197733, "col2":-0.912388563, "col3":"Bananas"}, {"col0":-1.44654846, "col1":0.918573618, "col2":1.0456562, "col3":"Bananas"}, {"col0":-0.386709183, "col1":-0.0893614963, "col2":-1.06756592, "col3":"Cucumbers"}, {"col0":0.0165107567, "col1":-0.899044573, "col2":-3.52653098, "col3":"Apples"}, {"col0":1.0873673, "col1":1.02736187, "col2":0.272972882, "col3":"Cucumbers"}, {"col0":-2.05794072, "col1":1.08719671, "col2":0.367435545, "col3":"Apples"}, {"col0":-0.0127187073, "col1":-1.0068841, "col2":-0.732713819, "col3":"Cucumbers"}, {"col0":-0.948605478, "col1":0.260427445, "col2":0.417626262, "col3":"Cucumbers"}, {"col0":2.17199135, "col1":-0.545526385, "col2":-0.317496777, "col3":"Cucumbers"}, {"col0":0.437788397, "col1":-0.908377349, "col2":1.0243448, "col3":"Apples"}, {"col0":0.430841327, "col1":-1.61108315, "col2":0.125080556, "col3":"Bananas"}, {"col0":-0.596515119, "col1":0.284536004, "col2":-0.30401212, "col3":"Cucumbers"}, {"col0":-0.737476289, "col1":1.06883323, "col2":0.173585966, "col3":"Cucumbers"}, {"col0":-0.554035962, "col1":-1.88356662, "col2":-0.929151833, "col3":"Cucumbers"}, {"col0":0.106113918, "col1":0.972496092, "col2":0.346727163, "col3":"Cucumbers"}, {"col0":-2.06690168, "col1":1.38962615, "col2":-0.254312873, "col3":"Cucumbers"}, {"col0":-0.25164023, "col1":0.0762551427, "col2":0.365030527, "col3":"Bananas"}, {"col0":1.53482509, "col1":-0.70823133, "col2":-0.53576088, "col3":"Bananas"}, {"col0":0.394558907, "col1":-1.11762011, "col2":-1.26012146, "col3":"Bananas"}, {"col0":0.921376169, "col1":0.692061961, "col2":-0.278840929, "col3":"Cucumbers"}, {"col0":1.41662645, "col1":-1.95174909, "col2":0.187304944, "col3":"Apples"}]}, "mark":{"type":"point"}, "encoding":{"x":{"field":"col0", "type":"quantitative", "title":"X1"}, "y":{"field":"col1", "type":"quantitative", "title":"X2"}, "size":{"field":"col2", "type":"quantitative", "title":"Weight"}, "color":{"field":"col3", "type":"nominal", "title":"Label"}, "tooltip":{"field":"col3", "type":"nominal", "title":"Label"}}});&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Example: Faceted Area plot&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This example show three different random walks. In particular in demonstrates how
VL can auto-facet the chart based on Nominal variables.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;y1 &lt;span class="symbol"&gt;:&lt;/span&gt;  (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 3) &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 10) &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; arb &lt;span class="symbol"&gt;$&lt;/span&gt; newKey 0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;df3 &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; cumSum &lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;.&lt;/span&gt; select (y1&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j &lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0) (&lt;span class="symbol"&gt;-&lt;/span&gt;1&lt;span class="symbol"&gt;.&lt;/span&gt;0) 1&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; df3
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; (Fin 10) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;chart3 &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="type-name"&gt;AsVLDescriptor&lt;/span&gt; (pure &lt;span class="type-name"&gt;Area&lt;/span&gt;) [(&amp;quot;title&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;Area&lt;/span&gt;&amp;quot;)&lt;span class="symbol"&gt;,&lt;/span&gt; (&amp;quot;height&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;75&amp;quot;)]
            [{title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;density&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;pureLs &lt;span class="type-name"&gt;Y&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Quantitative&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt; (i&lt;span class="symbol"&gt;,&lt;/span&gt;j)&lt;span class="symbol"&gt;.&lt;/span&gt; toJSON df3&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j}&lt;span class="symbol"&gt;,&lt;/span&gt;
             {title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;&lt;span class="type-name"&gt;Runs&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;pureLs &lt;span class="type-name"&gt;Row&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Nominal&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; (i&lt;span class="symbol"&gt;,&lt;/span&gt;_)&lt;span class="symbol"&gt;.&lt;/span&gt; toJSON &lt;span class="symbol"&gt;$&lt;/span&gt; [&amp;quot;&lt;span class="type-name"&gt;Run&lt;/span&gt; 1&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;Run&lt;/span&gt; 2&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="type-name"&gt;Run&lt;/span&gt; 3&amp;quot;]&lt;span class="symbol"&gt;.&lt;/span&gt;i}&lt;span class="symbol"&gt;,&lt;/span&gt;
             {title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;&lt;span class="type-name"&gt;Round&lt;/span&gt;&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;pureLs &lt;span class="type-name"&gt;X&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Ordinal&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt; (_&lt;span class="symbol"&gt;,&lt;/span&gt;j)&lt;span class="symbol"&gt;.&lt;/span&gt; toJSON &lt;span class="symbol"&gt;$&lt;/span&gt; ordinal j}]
)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; showVega &lt;span class="symbol"&gt;$&lt;/span&gt; toJSON chart3
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/vega@5.17.0"&amp;gt;&amp;lt;/script&amp;gt;
          &amp;lt;script src="https://cdn.jsdelivr.net/npm/vega-lite@4.17.0"&amp;gt;&amp;lt;/script&amp;gt;
          &amp;lt;script src="https://cdn.jsdelivr.net/npm/vega-embed@6.12.2"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
           &amp;lt;div id="vis"&amp;gt;&amp;lt;/div&amp;gt;
           &amp;lt;script&amp;gt;vegaEmbed("#vis",{"title":"Area", "height":"75", "data":{"values":[{"col0":-1, "col1":"Run 1", "col2":0}, {"col0":-2, "col1":"Run 1", "col2":1}, {"col0":-1, "col1":"Run 1", "col2":2}, {"col0":0, "col1":"Run 1", "col2":3}, {"col0":1, "col1":"Run 1", "col2":4}, {"col0":2, "col1":"Run 1", "col2":5}, {"col0":1, "col1":"Run 1", "col2":6}, {"col0":2, "col1":"Run 1", "col2":7}, {"col0":1, "col1":"Run 1", "col2":8}, {"col0":0, "col1":"Run 1", "col2":9}, {"col0":-1, "col1":"Run 2", "col2":0}, {"col0":-2, "col1":"Run 2", "col2":1}, {"col0":-1, "col1":"Run 2", "col2":2}, {"col0":-2, "col1":"Run 2", "col2":3}, {"col0":-1, "col1":"Run 2", "col2":4}, {"col0":0, "col1":"Run 2", "col2":5}, {"col0":1, "col1":"Run 2", "col2":6}, {"col0":2, "col1":"Run 2", "col2":7}, {"col0":3, "col1":"Run 2", "col2":8}, {"col0":4, "col1":"Run 2", "col2":9}, {"col0":1, "col1":"Run 3", "col2":0}, {"col0":2, "col1":"Run 3", "col2":1}, {"col0":1, "col1":"Run 3", "col2":2}, {"col0":0, "col1":"Run 3", "col2":3}, {"col0":1, "col1":"Run 3", "col2":4}, {"col0":2, "col1":"Run 3", "col2":5}, {"col0":3, "col1":"Run 3", "col2":6}, {"col0":2, "col1":"Run 3", "col2":7}, {"col0":3, "col1":"Run 3", "col2":8}, {"col0":2, "col1":"Run 3", "col2":9}]}, "mark":{"type":"area"}, "encoding":{"y":{"field":"col0", "type":"quantitative", "title":"density"}, "row":{"field":"col1", "type":"nominal", "title":"Runs"}, "x":{"field":"col2", "type":"ordinal", "title":"Round"}}});&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Example: Heatmap&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;words &lt;span class="symbol"&gt;=&lt;/span&gt; [&amp;quot;the&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;dog&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;walked&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;to&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;the&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;store&amp;quot;]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;z &lt;span class="symbol"&gt;:&lt;/span&gt;  (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 6) &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 6) &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; arb &lt;span class="symbol"&gt;$&lt;/span&gt; newKey 0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; showChart4 [&lt;span class="type-name"&gt;ToJSON&lt;/span&gt; o] (opts&lt;span class="command"&gt;:o&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Value&lt;/span&gt;  &lt;span class="symbol"&gt;=&lt;/span&gt; toJSON (&lt;span class="type-name"&gt;AsVLDescriptor&lt;/span&gt; (pure &lt;span class="type-name"&gt;Rect&lt;/span&gt;) opts
            [{title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;match&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;pureLs &lt;span class="type-name"&gt;Color&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Quantitative&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt; (i&lt;span class="symbol"&gt;,&lt;/span&gt;j)&lt;span class="symbol"&gt;.&lt;/span&gt; toJSON z&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j}&lt;span class="symbol"&gt;,&lt;/span&gt;
            {title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;words&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;pureLs &lt;span class="type-name"&gt;Tooltip&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Nominal&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt; (i&lt;span class="symbol"&gt;,&lt;/span&gt;j)&lt;span class="symbol"&gt;.&lt;/span&gt; toJSON (words&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &amp;quot; &lt;span class="symbol"&gt;-&lt;/span&gt; &amp;quot; &lt;span class="symbol"&gt;&amp;lt;&amp;gt;&lt;/span&gt; words&lt;span class="symbol"&gt;.&lt;/span&gt;j)}&lt;span class="symbol"&gt;,&lt;/span&gt;
            {title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;row&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;pureLs &lt;span class="type-name"&gt;X&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Ordinal&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt; (i&lt;span class="symbol"&gt;,&lt;/span&gt;_)&lt;span class="symbol"&gt;.&lt;/span&gt; toJSON (ordinal i)}&lt;span class="symbol"&gt;,&lt;/span&gt;
            {title&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;quot;col&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; encodings&lt;span class="symbol"&gt;=&lt;/span&gt;pureLs &lt;span class="type-name"&gt;Y&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; encType&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="type-name"&gt;Ordinal&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; rows&lt;span class="symbol"&gt;=&lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt; (_&lt;span class="symbol"&gt;,&lt;/span&gt;j)&lt;span class="symbol"&gt;.&lt;/span&gt; toJSON (ordinal j)}]
        )
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Default heat map&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; showVega &lt;span class="symbol"&gt;$&lt;/span&gt; showChart4 &lt;span class="type-name"&gt;AsNone&lt;/span&gt;
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/vega@5.17.0"&amp;gt;&amp;lt;/script&amp;gt;
          &amp;lt;script src="https://cdn.jsdelivr.net/npm/vega-lite@4.17.0"&amp;gt;&amp;lt;/script&amp;gt;
          &amp;lt;script src="https://cdn.jsdelivr.net/npm/vega-embed@6.12.2"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
           &amp;lt;div id="vis"&amp;gt;&amp;lt;/div&amp;gt;
           &amp;lt;script&amp;gt;vegaEmbed("#vis",{"data":{"values":[{"col0":1.33158469, "col1":"the - the", "col2":0, "col3":0}, {"col0":0.712532997, "col1":"the - dog", "col2":0, "col3":1}, {"col0":-0.273933589, "col1":"the - walked", "col2":0, "col3":2}, {"col0":-1.84602892, "col1":"the - to", "col2":0, "col3":3}, {"col0":-1.02319884, "col1":"the - the", "col2":0, "col3":4}, {"col0":-0.127477944, "col1":"the - store", "col2":0, "col3":5}, {"col0":1.21127701, "col1":"dog - the", "col2":1, "col3":0}, {"col0":0.232849702, "col1":"dog - dog", "col2":1, "col3":1}, {"col0":-0.741910636, "col1":"dog - walked", "col2":1, "col3":2}, {"col0":0.883350849, "col1":"dog - to", "col2":1, "col3":3}, {"col0":-1.44288516, "col1":"dog - the", "col2":1, "col3":4}, {"col0":-0.0748549849, "col1":"dog - store", "col2":1, "col3":5}, {"col0":-0.195076555, "col1":"walked - the", "col2":2, "col3":0}, {"col0":-0.787112653, "col1":"walked - dog", "col2":2, "col3":1}, {"col0":0.625113308, "col1":"walked - walked", "col2":2, "col3":2}, {"col0":0.60825187, "col1":"walked - to", "col2":2, "col3":3}, {"col0":-1.09104478, "col1":"walked - the", "col2":2, "col3":4}, {"col0":-0.870851219, "col1":"walked - store", "col2":2, "col3":5}, {"col0":0.245456219, "col1":"to - the", "col2":3, "col3":0}, {"col0":-0.156876549, "col1":"to - dog", "col2":3, "col3":1}, {"col0":-0.823616683, "col1":"to - walked", "col2":3, "col3":2}, {"col0":0.732750118, "col1":"to - to", "col2":3, "col3":3}, {"col0":0.617756605, "col1":"to - the", "col2":3, "col3":4}, {"col0":0.855774045, "col1":"to - store", "col2":3, "col3":5}, {"col0":0.426452518, "col1":"the - the", "col2":4, "col3":0}, {"col0":0.99648428, "col1":"the - dog", "col2":4, "col3":1}, {"col0":0.712362528, "col1":"the - walked", "col2":4, "col3":2}, {"col0":0.891714513, "col1":"the - to", "col2":4, "col3":3}, {"col0":-0.444938958, "col1":"the - the", "col2":4, "col3":4}, {"col0":-0.853898823, "col1":"the - store", "col2":4, "col3":5}, {"col0":-1.13921142, "col1":"store - the", "col2":5, "col3":0}, {"col0":0.791242182, "col1":"store - dog", "col2":5, "col3":1}, {"col0":1.14246678, "col1":"store - walked", "col2":5, "col3":2}, {"col0":-1.06166565, "col1":"store - to", "col2":5, "col3":3}, {"col0":-0.375341982, "col1":"store - the", "col2":5, "col3":4}, {"col0":0.440465569, "col1":"store - store", "col2":5, "col3":5}]}, "mark":{"type":"rect"}, "encoding":{"color":{"field":"col0", "type":"quantitative", "title":"match"}, "tooltip":{"field":"col1", "type":"nominal", "title":"words"}, "x":{"field":"col2", "type":"ordinal", "title":"row"}, "y":{"field":"col3", "type":"ordinal", "title":"col"}}});&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Customization through JSON options.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; showVega &lt;span class="symbol"&gt;$&lt;/span&gt; showChart4 &lt;span class="symbol"&gt;$&lt;/span&gt; mergeOpts [(&amp;quot;title&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt;  &amp;quot;&lt;span class="type-name"&gt;HeatMap&lt;/span&gt;&amp;quot;)&lt;span class="symbol"&gt;,&lt;/span&gt; (&amp;quot;height&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;200&amp;quot;)&lt;span class="symbol"&gt;,&lt;/span&gt; (&amp;quot;width&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt;  &amp;quot;200&amp;quot;)] [(&amp;quot;config&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; toJSON [
          (&amp;quot;axis&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; [(&amp;quot;grid&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt; &amp;quot;1&amp;quot;)&lt;span class="symbol"&gt;,&lt;/span&gt; (&amp;quot;tickBand&amp;quot;&lt;span class="symbol"&gt;,&lt;/span&gt;  &amp;quot;extent&amp;quot;)])
          ])]
&lt;/div&gt;&lt;iframe width="100%" frameborder="0" scrolling="no" onload="this.style.height=this.contentWindow.document.body.scrollHeight+'px'" ; srcdoc='&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/vega@5.17.0"&amp;gt;&amp;lt;/script&amp;gt;
          &amp;lt;script src="https://cdn.jsdelivr.net/npm/vega-lite@4.17.0"&amp;gt;&amp;lt;/script&amp;gt;
          &amp;lt;script src="https://cdn.jsdelivr.net/npm/vega-embed@6.12.2"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
           &amp;lt;div id="vis"&amp;gt;&amp;lt;/div&amp;gt;
           &amp;lt;script&amp;gt;vegaEmbed("#vis",{"title":"HeatMap", "height":"200", "width":"200", "config":{"axis":{"grid":"1", "tickBand":"extent"}}, "data":{"values":[{"col0":1.33158469, "col1":"the - the", "col2":0, "col3":0}, {"col0":0.712532997, "col1":"the - dog", "col2":0, "col3":1}, {"col0":-0.273933589, "col1":"the - walked", "col2":0, "col3":2}, {"col0":-1.84602892, "col1":"the - to", "col2":0, "col3":3}, {"col0":-1.02319884, "col1":"the - the", "col2":0, "col3":4}, {"col0":-0.127477944, "col1":"the - store", "col2":0, "col3":5}, {"col0":1.21127701, "col1":"dog - the", "col2":1, "col3":0}, {"col0":0.232849702, "col1":"dog - dog", "col2":1, "col3":1}, {"col0":-0.741910636, "col1":"dog - walked", "col2":1, "col3":2}, {"col0":0.883350849, "col1":"dog - to", "col2":1, "col3":3}, {"col0":-1.44288516, "col1":"dog - the", "col2":1, "col3":4}, {"col0":-0.0748549849, "col1":"dog - store", "col2":1, "col3":5}, {"col0":-0.195076555, "col1":"walked - the", "col2":2, "col3":0}, {"col0":-0.787112653, "col1":"walked - dog", "col2":2, "col3":1}, {"col0":0.625113308, "col1":"walked - walked", "col2":2, "col3":2}, {"col0":0.60825187, "col1":"walked - to", "col2":2, "col3":3}, {"col0":-1.09104478, "col1":"walked - the", "col2":2, "col3":4}, {"col0":-0.870851219, "col1":"walked - store", "col2":2, "col3":5}, {"col0":0.245456219, "col1":"to - the", "col2":3, "col3":0}, {"col0":-0.156876549, "col1":"to - dog", "col2":3, "col3":1}, {"col0":-0.823616683, "col1":"to - walked", "col2":3, "col3":2}, {"col0":0.732750118, "col1":"to - to", "col2":3, "col3":3}, {"col0":0.617756605, "col1":"to - the", "col2":3, "col3":4}, {"col0":0.855774045, "col1":"to - store", "col2":3, "col3":5}, {"col0":0.426452518, "col1":"the - the", "col2":4, "col3":0}, {"col0":0.99648428, "col1":"the - dog", "col2":4, "col3":1}, {"col0":0.712362528, "col1":"the - walked", "col2":4, "col3":2}, {"col0":0.891714513, "col1":"the - to", "col2":4, "col3":3}, {"col0":-0.444938958, "col1":"the - the", "col2":4, "col3":4}, {"col0":-0.853898823, "col1":"the - store", "col2":4, "col3":5}, {"col0":-1.13921142, "col1":"store - the", "col2":5, "col3":0}, {"col0":0.791242182, "col1":"store - dog", "col2":5, "col3":1}, {"col0":1.14246678, "col1":"store - walked", "col2":5, "col3":2}, {"col0":-1.06166565, "col1":"store - to", "col2":5, "col3":3}, {"col0":-0.375341982, "col1":"store - the", "col2":5, "col3":4}, {"col0":0.440465569, "col1":"store - store", "col2":5, "col3":5}]}, "mark":{"type":"rect"}, "encoding":{"color":{"field":"col0", "type":"quantitative", "title":"match"}, "tooltip":{"field":"col1", "type":"nominal", "title":"words"}, "x":{"field":"col2", "type":"ordinal", "title":"row"}, "y":{"field":"col3", "type":"ordinal", "title":"col"}}});&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;'&gt;
    &lt;/iframe&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;(end)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><category term="Dex"></category><category term="Graphics"></category><category term="Dex"></category></entry><entry><title>Dex: NN Layers</title><link href="https://blog.rush-nlp.com/dex-nn-layers.html" rel="alternate"></link><published>2020-06-01T12:00:00-04:00</published><updated>2020-06-01T12:00:00-04:00</updated><author><name>Sasha Rush</name></author><id>tag:blog.rush-nlp.com,2020-06-01:/dex-nn-layers.html</id><summary type="html">Literate blog on typed NN layers rotation with a Dex implementation.</summary><content type="html">&lt;div id="main-output"&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h1&gt;Neural Networks&lt;/h1&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt; plot
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;NN Prelude&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; relu (input &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
  select (input &lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0) input 0&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; [&lt;span class="type-name"&gt;Add&lt;/span&gt; a&lt;span class="symbol"&gt;,&lt;/span&gt; &lt;span class="type-name"&gt;Add&lt;/span&gt; b] &lt;span class="type-name"&gt;Add&lt;/span&gt; (a &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; b)
  add &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;(a&lt;span class="symbol"&gt;,&lt;/span&gt; b) (c&lt;span class="symbol"&gt;,&lt;/span&gt; d)&lt;span class="symbol"&gt;.&lt;/span&gt; ( (a &lt;span class="symbol"&gt;+&lt;/span&gt; c)&lt;span class="symbol"&gt;,&lt;/span&gt; (b &lt;span class="symbol"&gt;+&lt;/span&gt; d))
  sub &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;(a&lt;span class="symbol"&gt;,&lt;/span&gt; b) (c&lt;span class="symbol"&gt;,&lt;/span&gt; d)&lt;span class="symbol"&gt;.&lt;/span&gt; ( (a &lt;span class="symbol"&gt;-&lt;/span&gt; c)&lt;span class="symbol"&gt;,&lt;/span&gt; (b &lt;span class="symbol"&gt;-&lt;/span&gt; d))
  zero &lt;span class="symbol"&gt;=&lt;/span&gt; (zero&lt;span class="symbol"&gt;,&lt;/span&gt; zero)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; [&lt;span class="type-name"&gt;VSpace&lt;/span&gt; a&lt;span class="symbol"&gt;,&lt;/span&gt; &lt;span class="type-name"&gt;VSpace&lt;/span&gt; b] &lt;span class="type-name"&gt;VSpace&lt;/span&gt; (a &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; b)
  scaleVec &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt; s (a&lt;span class="symbol"&gt;,&lt;/span&gt; b) &lt;span class="symbol"&gt;.&lt;/span&gt; (scaleVec s a&lt;span class="symbol"&gt;,&lt;/span&gt; scaleVec s b)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;data&lt;/span&gt; &lt;span class="type-name"&gt;Layer&lt;/span&gt; inp&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt; out&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt; params&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
  &lt;span class="type-name"&gt;AsLayer&lt;/span&gt; {forward&lt;span class="symbol"&gt;:&lt;/span&gt;(params &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; inp &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; out) &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; init&lt;span class="symbol"&gt;:&lt;/span&gt;(&lt;span class="type-name"&gt;Key&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; params)}
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;  
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; forward (l&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Layer&lt;/span&gt; i o p) (p &lt;span class="symbol"&gt;:&lt;/span&gt; p) (x &lt;span class="symbol"&gt;:&lt;/span&gt; i)&lt;span class="symbol"&gt;:&lt;/span&gt; o &lt;span class="symbol"&gt;=&lt;/span&gt;
  (&lt;span class="type-name"&gt;AsLayer&lt;/span&gt; l&amp;#39; ) &lt;span class="symbol"&gt;=&lt;/span&gt; l
  (getAt &lt;span class="iso-sugar"&gt;#forward&lt;/span&gt; l&amp;#39;) p x
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; init (l&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Layer&lt;/span&gt; i o p) (k&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Key&lt;/span&gt;)  &lt;span class="symbol"&gt;:&lt;/span&gt; p  &lt;span class="symbol"&gt;=&lt;/span&gt;
  (&lt;span class="type-name"&gt;AsLayer&lt;/span&gt; l&amp;#39;) &lt;span class="symbol"&gt;=&lt;/span&gt; l
  (getAt &lt;span class="iso-sugar"&gt;#init&lt;/span&gt; l&amp;#39;) k
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Layers&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Dense layer&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="type-name"&gt;DenseParams&lt;/span&gt; (a&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt;) (b&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Type&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
   ((a&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;b&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; (b&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;))
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; dense (a&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt;) (b&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Layer&lt;/span&gt; (a&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;) (b&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;) (&lt;span class="type-name"&gt;DenseParams&lt;/span&gt; a b) &lt;span class="symbol"&gt;=&lt;/span&gt;
  &lt;span class="type-name"&gt;AsLayer&lt;/span&gt; {
    forward &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="symbol"&gt;\&lt;/span&gt; ((weight&lt;span class="symbol"&gt;,&lt;/span&gt; bias)) x &lt;span class="symbol"&gt;.&lt;/span&gt;
               &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;.&lt;/span&gt; (bias&lt;span class="symbol"&gt;.&lt;/span&gt;j &lt;span class="symbol"&gt;+&lt;/span&gt; sum &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; weight&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j &lt;span class="symbol"&gt;*&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i))&lt;span class="symbol"&gt;,&lt;/span&gt;
    init &lt;span class="symbol"&gt;=&lt;/span&gt; arb
   }
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;  
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;CNN layer&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="type-name"&gt;CNNParams&lt;/span&gt; (inc&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt;) (outc&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt;) (kw&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Int&lt;/span&gt;) (kh&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Int&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Type&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
  ((outc&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;inc&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Fin&lt;/span&gt; kh&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Fin&lt;/span&gt; kw&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt;
   (outc&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;))
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; conv2d (x&lt;span class="command"&gt;:inc&lt;/span&gt;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; h)&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; w)&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;)
           (kernel&lt;span class="command"&gt;:outc&lt;/span&gt;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;inc&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; kh)&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; kw)&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt;
     outc&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; h)&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; w)&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
     &lt;span class="keyword"&gt;for&lt;/span&gt; o i j&lt;span class="symbol"&gt;.&lt;/span&gt;
         (i&amp;#39;&lt;span class="symbol"&gt;,&lt;/span&gt; j&amp;#39;) &lt;span class="symbol"&gt;=&lt;/span&gt; (ordinal i&lt;span class="symbol"&gt;,&lt;/span&gt; ordinal j)
         &lt;span class="keyword"&gt;case&lt;/span&gt; (i&amp;#39; &lt;span class="symbol"&gt;+&lt;/span&gt; kh) &lt;span class="symbol"&gt;&amp;lt;=&lt;/span&gt; h &lt;span class="symbol"&gt;&amp;amp;&amp;amp;&lt;/span&gt; (j&amp;#39; &lt;span class="symbol"&gt;+&lt;/span&gt; kw) &lt;span class="symbol"&gt;&amp;lt;=&lt;/span&gt; w &lt;span class="keyword"&gt;of&lt;/span&gt;
          &lt;span class="type-name"&gt;True&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;
              sum &lt;span class="keyword"&gt;for&lt;/span&gt; (ki&lt;span class="symbol"&gt;,&lt;/span&gt; kj&lt;span class="symbol"&gt;,&lt;/span&gt; inp)&lt;span class="symbol"&gt;.&lt;/span&gt;
                  (di&lt;span class="symbol"&gt;,&lt;/span&gt; dj) &lt;span class="symbol"&gt;=&lt;/span&gt; (fromOrdinal (&lt;span class="type-name"&gt;Fin&lt;/span&gt; h) (i&amp;#39; &lt;span class="symbol"&gt;+&lt;/span&gt; (ordinal ki))&lt;span class="symbol"&gt;,&lt;/span&gt;
                              fromOrdinal (&lt;span class="type-name"&gt;Fin&lt;/span&gt; w) (j&amp;#39; &lt;span class="symbol"&gt;+&lt;/span&gt; (ordinal kj)))
                  x&lt;span class="symbol"&gt;.&lt;/span&gt;inp&lt;span class="symbol"&gt;.&lt;/span&gt;di&lt;span class="symbol"&gt;.&lt;/span&gt;dj &lt;span class="symbol"&gt;*&lt;/span&gt; kernel&lt;span class="symbol"&gt;.&lt;/span&gt;o&lt;span class="symbol"&gt;.&lt;/span&gt;inp&lt;span class="symbol"&gt;.&lt;/span&gt;ki&lt;span class="symbol"&gt;.&lt;/span&gt;kj
          &lt;span class="type-name"&gt;False&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; zero
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; cnn (h&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Int&lt;/span&gt;) &lt;span class="symbol"&gt;?-&amp;gt;&lt;/span&gt; (w&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Int&lt;/span&gt;) &lt;span class="symbol"&gt;?-&amp;gt;&lt;/span&gt; (inc&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt;) (outc&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Type&lt;/span&gt;) (kw&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Int&lt;/span&gt;) (kh&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Int&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt;
    &lt;span class="type-name"&gt;Layer&lt;/span&gt; (inc&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; h)&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; w)&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;)
          (outc&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; h)&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; w)&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;)
          (&lt;span class="type-name"&gt;CNNParams&lt;/span&gt; inc outc kw kh) &lt;span class="symbol"&gt;=&lt;/span&gt;
  &lt;span class="type-name"&gt;AsLayer&lt;/span&gt; {
    forward &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="symbol"&gt;\&lt;/span&gt; (weight&lt;span class="symbol"&gt;,&lt;/span&gt; bias) x&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; o i j &lt;span class="symbol"&gt;.&lt;/span&gt; (conv2d x weight)&lt;span class="symbol"&gt;.&lt;/span&gt;o&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j &lt;span class="symbol"&gt;+&lt;/span&gt; bias&lt;span class="symbol"&gt;.&lt;/span&gt;o)&lt;span class="symbol"&gt;,&lt;/span&gt;
    init &lt;span class="symbol"&gt;=&lt;/span&gt; arb
  }
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Pooling&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; split (x&lt;span class="symbol"&gt;:&lt;/span&gt; m&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;v) &lt;span class="symbol"&gt;:&lt;/span&gt; n&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;o&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;v &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; i j&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;((ordinal (i&lt;span class="symbol"&gt;,&lt;/span&gt;j))&lt;span class="symbol"&gt;@&lt;/span&gt;m)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;            
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; imtile (x&lt;span class="symbol"&gt;:&lt;/span&gt; a&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;b&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;v) &lt;span class="symbol"&gt;:&lt;/span&gt; n&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;o&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;p&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;q&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;v &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; kw kh w h&lt;span class="symbol"&gt;.&lt;/span&gt; (split (split x)&lt;span class="symbol"&gt;.&lt;/span&gt;w&lt;span class="symbol"&gt;.&lt;/span&gt;kw)&lt;span class="symbol"&gt;.&lt;/span&gt;h&lt;span class="symbol"&gt;.&lt;/span&gt;kh
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; meanpool (kh&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Type&lt;/span&gt;) (kw&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Type&lt;/span&gt;) (x &lt;span class="symbol"&gt;:&lt;/span&gt; m&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;n&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; ( h&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;w&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;=&lt;/span&gt;
    out &lt;span class="symbol"&gt;:&lt;/span&gt; (kh &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; kw &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; h &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; w &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;=&lt;/span&gt; imtile x
    mean &lt;span class="keyword"&gt;for&lt;/span&gt; (i&lt;span class="symbol"&gt;,&lt;/span&gt;j)&lt;span class="symbol"&gt;.&lt;/span&gt; out&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Simple point classifier&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;[k1&lt;span class="symbol"&gt;,&lt;/span&gt; k2] &lt;span class="symbol"&gt;=&lt;/span&gt; splitKey &lt;span class="symbol"&gt;$&lt;/span&gt; newKey 1
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;x1 &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 100 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; arb k1
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;x2 &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 100 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; arb k2
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;y &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;case&lt;/span&gt; ((x1&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0) &lt;span class="symbol"&gt;&amp;amp;&amp;amp;&lt;/span&gt; (x2&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0)) &lt;span class="symbol"&gt;||&lt;/span&gt; ((x1&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0) &lt;span class="symbol"&gt;&amp;amp;&amp;amp;&lt;/span&gt; (x2&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0)) &lt;span class="keyword"&gt;of&lt;/span&gt;
  &lt;span class="type-name"&gt;True&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; 1
  &lt;span class="type-name"&gt;False&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; 0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;xs &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; [x1&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;,&lt;/span&gt; x2&lt;span class="symbol"&gt;.&lt;/span&gt;i]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; showPlot &lt;span class="symbol"&gt;$&lt;/span&gt; xycPlot x1 x2 &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="type-name"&gt;IToF&lt;/span&gt; y&lt;span class="symbol"&gt;.&lt;/span&gt;i
&lt;/div&gt;&lt;svg width="400" height="400" viewbox="0 -400 400 400"&gt;&lt;g stroke="#000000" fill="none" stroke-width="1"&gt;&lt;rect width="400" height="400" x="0" y="-400" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="190.642883" cy="-344.465698" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="200.686646" cy="-286.648438" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="218.073654" cy="-260.088348" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="292.200592" cy="-187.60527" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="290.534149" cy="-261.630035" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="170.356674" cy="-308.79303" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="110.012009" cy="-283.651154" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="379.137634" cy="-370.289001" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="287.332672" cy="-247.09317" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="75.3382187" cy="-203.34523" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="117.229736" cy="-216.785904" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="254.352112" cy="-345.457581" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="290.56842" cy="-264.389923" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="83.1534653" cy="-269.574951" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="50.0492973" cy="-226.895782" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="193.283249" cy="-176.559982" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="167.749908" cy="-221.503067" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="156.234055" cy="-321.893585" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="196.897568" cy="-241.021088" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="161.004471" cy="-204.944427" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="264.950592" cy="-300.535309" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="152.992554" cy="-168.332748" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="293.03363" cy="-264.159454" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="112.900757" cy="-178.256317" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="302.123901" cy="-278.891541" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="196.276169" cy="-108.131172" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="215.965454" cy="-130.606049" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="131.203781" cy="-212.262985" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="134.363297" cy="-247.403214" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="251.670197" cy="-300.32843" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="248.928574" cy="-226.19429" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="191.238586" cy="-196.28894" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="136.821915" cy="-252.113525" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="121.68895" cy="-117.488907" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="95.1206894" cy="-256.036865" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="146.5271" cy="-169.756088" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="217.50827" cy="-81.7547302" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="251.695389" cy="-286.453247" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="193.476135" cy="-191.262543" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="214.467926" cy="-295.046265" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="72.5784225" cy="-217.095047" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="175.724335" cy="-230.482819" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="240.008759" cy="-217.43985" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="70.4053802" cy="-283.589905" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="231.693604" cy="-241.212387" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="191.531967" cy="-364.89621" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="221.692795" cy="-250.79155" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="283.674652" cy="-158.994431" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="69.5954742" cy="-395.455109" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="119.116035" cy="-203.253586" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="321.13028" cy="-183.59285" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="154.198807" cy="-222.035675" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="195.112762" cy="-218.927048" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="191.802414" cy="-332.492035" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="130.560318" cy="-304.708557" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="170.071274" cy="-342.367279" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="226.448532" cy="-135.648941" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="80.3796616" cy="-269.490265" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="151.573105" cy="-346.860535" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="215.856171" cy="-120.51059" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="341.378937" cy="-211.228348" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="171.925522" cy="-218.252258" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="131.091019" cy="-133.181702" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="207.208115" cy="-329.426544" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="265.883759" cy="-190.990021" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="191.762405" cy="-265.708557" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="261.239258" cy="-260.770233" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="124.933205" cy="-191.667908" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="253.613312" cy="-196.445404" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="129.446548" cy="-371.544464" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="0" cy="-346.802917" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="400" cy="-295.01355" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="60.9471436" cy="-126.524231" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="335.720123" cy="-232.330231" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="295.114441" cy="-164.695053" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="137.047104" cy="-139.862534" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="274.603333" cy="-400" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="242.546967" cy="-272.945496" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="196.883102" cy="-306.591644" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="211.811157" cy="-315.417542" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="145.371872" cy="-209.70845" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="123.515785" cy="-196.058868" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="150.393326" cy="-92.0050049" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="186.322815" cy="-224.221329" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="172.19252" cy="-157.653458" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="217.43396" cy="-319.670929" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="158.578323" cy="-399.398834" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="156.554489" cy="-291.483704" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="339.345856" cy="-256.39624" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="69.880188" cy="-261.572845" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="257.177582" cy="-115.062927" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="208.740158" cy="-311.090912" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="89.0264587" cy="-234.253784" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="137.087021" cy="-264.311707" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="101.444267" cy="-289.101257" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="56.3898506" cy="-188.393127" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#FF7F00" fill="#FF7F00" stroke-width="1"&gt;&lt;circle cx="180.531845" cy="-0" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="245.470978" cy="-224.039917" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="168.369415" cy="-282.763092" r="1" /&gt;&lt;/g&gt;&lt;g stroke="#007FFF" fill="#007FFF" stroke-width="1"&gt;&lt;circle cx="349.309143" cy="-203.639465" r="1" /&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;simple &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;h1&lt;span class="symbol"&gt;.&lt;/span&gt;
  ndense1 &lt;span class="symbol"&gt;=&lt;/span&gt; dense (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 2) h1
  ndense2 &lt;span class="symbol"&gt;=&lt;/span&gt; dense h1 (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 2)
  &lt;span class="type-name"&gt;AsLayer&lt;/span&gt; {
    forward &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="symbol"&gt;\&lt;/span&gt; (dense1&lt;span class="symbol"&gt;,&lt;/span&gt; dense2) x&lt;span class="symbol"&gt;.&lt;/span&gt;
         x1&amp;#39; &lt;span class="symbol"&gt;=&lt;/span&gt; forward ndense1 dense1 x
         x1 &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; relu x1&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt;i
         logsoftmax &lt;span class="symbol"&gt;$&lt;/span&gt; forward ndense2 dense2 x1)&lt;span class="symbol"&gt;,&lt;/span&gt;
    init &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="symbol"&gt;\&lt;/span&gt;key&lt;span class="symbol"&gt;.&lt;/span&gt;
         [k1&lt;span class="symbol"&gt;,&lt;/span&gt; k2] &lt;span class="symbol"&gt;=&lt;/span&gt; splitKey key
         (init ndense1 k1&lt;span class="symbol"&gt;,&lt;/span&gt; init ndense2 k2))
  }
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; simple
&lt;/div&gt;&lt;div class="result-block"&gt;((h1:Type)
 -&amp;gt; Layer
      ((Fin 2) =&amp;gt; Float32)
      ((Fin 2) =&amp;gt; Float32)
      ( (((Fin 2) =&amp;gt; h1 =&amp;gt; Float32) &amp;amp; (h1 =&amp;gt; Float32))
      &amp;amp; ((h1 =&amp;gt; (Fin 2) =&amp;gt; Float32) &amp;amp; ((Fin 2) =&amp;gt; Float32))))&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Train a multiclass classifier with minibatch SGD
' &lt;code&gt;minibatch * minibatches = batch&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; trainClass [&lt;span class="type-name"&gt;VSpace&lt;/span&gt; p] (model&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Layer&lt;/span&gt; a (b&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float&lt;/span&gt;) p)
                           (x&lt;span class="symbol"&gt;:&lt;/span&gt; batch&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;a)
                           (y&lt;span class="symbol"&gt;:&lt;/span&gt; batch&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;b)
                           (epochs &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Type&lt;/span&gt;)
                           (minibatch &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Type&lt;/span&gt;)
                           (minibatches &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Type&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt;
    (epochs &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; p &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; epochs &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; ) &lt;span class="symbol"&gt;=&lt;/span&gt;
  xs &lt;span class="symbol"&gt;:&lt;/span&gt; minibatches &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; minibatch &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; a &lt;span class="symbol"&gt;=&lt;/span&gt; split x
  ys &lt;span class="symbol"&gt;:&lt;/span&gt; minibatches &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; minibatch &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; b &lt;span class="symbol"&gt;=&lt;/span&gt; split y
  unzip &lt;span class="symbol"&gt;$&lt;/span&gt; withState (init model &lt;span class="symbol"&gt;$&lt;/span&gt; newKey 0) &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;params &lt;span class="symbol"&gt;.&lt;/span&gt;
     &lt;span class="keyword"&gt;for&lt;/span&gt; _ &lt;span class="symbol"&gt;:&lt;/span&gt; epochs&lt;span class="symbol"&gt;.&lt;/span&gt;
       loss &lt;span class="symbol"&gt;=&lt;/span&gt; sum &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; b &lt;span class="symbol"&gt;:&lt;/span&gt; minibatches&lt;span class="symbol"&gt;.&lt;/span&gt; 
              (loss&lt;span class="symbol"&gt;,&lt;/span&gt; gradfn) &lt;span class="symbol"&gt;=&lt;/span&gt;  vjp (&lt;span class="symbol"&gt;\&lt;/span&gt; params&lt;span class="symbol"&gt;.&lt;/span&gt;
                            &lt;span class="symbol"&gt;-&lt;/span&gt;sum &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;.&lt;/span&gt;
                                       result &lt;span class="symbol"&gt;=&lt;/span&gt; forward model params xs&lt;span class="symbol"&gt;.&lt;/span&gt;b&lt;span class="symbol"&gt;.&lt;/span&gt;j
                                       result&lt;span class="symbol"&gt;.&lt;/span&gt;(ys&lt;span class="symbol"&gt;.&lt;/span&gt;b&lt;span class="symbol"&gt;.&lt;/span&gt;j)) (get params)
              gparams &lt;span class="symbol"&gt;=&lt;/span&gt; gradfn 1&lt;span class="symbol"&gt;.&lt;/span&gt;0
              params &lt;span class="symbol"&gt;:=&lt;/span&gt; (get params) &lt;span class="symbol"&gt;-&lt;/span&gt; scaleVec (0&lt;span class="symbol"&gt;.&lt;/span&gt;05 &lt;span class="symbol"&gt;/&lt;/span&gt; (&lt;span class="type-name"&gt;IToF&lt;/span&gt; 100)) gparams
              loss
       (get params&lt;span class="symbol"&gt;,&lt;/span&gt; loss)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="comment"&gt;-- todo : Do I have to give minibatches as a param?
&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;simple_model &lt;span class="symbol"&gt;=&lt;/span&gt; simple (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 10)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;(all_params&lt;span class="symbol"&gt;,&lt;/span&gt;losses) &lt;span class="symbol"&gt;=&lt;/span&gt; trainClass simple_model xs (&lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; (y&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;@&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 2))) (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 500) (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 100) (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 1)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;span &lt;span class="symbol"&gt;=&lt;/span&gt; linspace (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 10) (&lt;span class="symbol"&gt;-&lt;/span&gt;1&lt;span class="symbol"&gt;.&lt;/span&gt;0) (1&lt;span class="symbol"&gt;.&lt;/span&gt;0)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;tests &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; h &lt;span class="symbol"&gt;:&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 50)&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i &lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;.&lt;/span&gt;
        r &lt;span class="symbol"&gt;=&lt;/span&gt; forward simple_model all_params&lt;span class="symbol"&gt;.&lt;/span&gt;((ordinal h &lt;span class="symbol"&gt;*&lt;/span&gt; 10)&lt;span class="symbol"&gt;@&lt;/span&gt;_) [span&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;,&lt;/span&gt; span&lt;span class="symbol"&gt;.&lt;/span&gt;j]
        [exp r&lt;span class="symbol"&gt;.&lt;/span&gt;(1&lt;span class="symbol"&gt;@&lt;/span&gt;_)&lt;span class="symbol"&gt;,&lt;/span&gt; exp r&lt;span class="symbol"&gt;.&lt;/span&gt;(0&lt;span class="symbol"&gt;@&lt;/span&gt;_)&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;        
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; imseqshow tests
&lt;/div&gt;&lt;img class="plot-img" src="data:image/png;base64, "&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;LeNet for image classification&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;H&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; 28
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;W&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; 28
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Image&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 1 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; &lt;span class="type-name"&gt;H&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; &lt;span class="type-name"&gt;W&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt; 
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Class&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 10
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;lenet &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;h1 h2 h3 &lt;span class="symbol"&gt;.&lt;/span&gt;
  ncnn1 &lt;span class="symbol"&gt;=&lt;/span&gt; cnn (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 1) h1 3 3
  ncnn2 &lt;span class="symbol"&gt;=&lt;/span&gt; cnn h1 h2 3 3
  &lt;span class="type-name"&gt;Pooled&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; (h2 &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 7 &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 7)
  ndense1 &lt;span class="symbol"&gt;=&lt;/span&gt; dense &lt;span class="type-name"&gt;Pooled&lt;/span&gt; h3
  ndense2 &lt;span class="symbol"&gt;=&lt;/span&gt; dense h3 &lt;span class="type-name"&gt;Class&lt;/span&gt;
  &lt;span class="type-name"&gt;AsLayer&lt;/span&gt; {
    forward &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="symbol"&gt;\&lt;/span&gt; (cnn1&lt;span class="symbol"&gt;,&lt;/span&gt; cnn2&lt;span class="symbol"&gt;,&lt;/span&gt; dense1&lt;span class="symbol"&gt;,&lt;/span&gt; dense2) inp&lt;span class="symbol"&gt;.&lt;/span&gt;
         x&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Image&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; inp
         x1&amp;#39; &lt;span class="symbol"&gt;=&lt;/span&gt; forward ncnn1 cnn1 x
         x1 &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i j k&lt;span class="symbol"&gt;.&lt;/span&gt; relu x1&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j&lt;span class="symbol"&gt;.&lt;/span&gt;k
         x2&amp;#39; &lt;span class="symbol"&gt;=&lt;/span&gt; forward ncnn2 cnn2 x1
         x2 &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i j k&lt;span class="symbol"&gt;.&lt;/span&gt; relu x2&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j&lt;span class="symbol"&gt;.&lt;/span&gt;k
         x3 &lt;span class="symbol"&gt;:&lt;/span&gt; (h2 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 7 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 7 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;) &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; c&lt;span class="symbol"&gt;.&lt;/span&gt; meanpool (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 4) (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 4) x2&lt;span class="symbol"&gt;.&lt;/span&gt;c
         x4&amp;#39; &lt;span class="symbol"&gt;=&lt;/span&gt; forward ndense1 dense1 &lt;span class="keyword"&gt;for&lt;/span&gt; (i&lt;span class="symbol"&gt;,&lt;/span&gt;j&lt;span class="symbol"&gt;,&lt;/span&gt;k)&lt;span class="symbol"&gt;.&lt;/span&gt; x3&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j&lt;span class="symbol"&gt;.&lt;/span&gt;k     
         x4 &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; relu x4&amp;#39;&lt;span class="symbol"&gt;.&lt;/span&gt;i
         logsoftmax &lt;span class="symbol"&gt;$&lt;/span&gt; forward ndense2 dense2 x4)&lt;span class="symbol"&gt;,&lt;/span&gt;
    init &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="symbol"&gt;\&lt;/span&gt;key&lt;span class="symbol"&gt;.&lt;/span&gt;
         [k1&lt;span class="symbol"&gt;,&lt;/span&gt; k2&lt;span class="symbol"&gt;,&lt;/span&gt; k3&lt;span class="symbol"&gt;,&lt;/span&gt; k4] &lt;span class="symbol"&gt;=&lt;/span&gt; splitKey key
         (init ncnn1 k1&lt;span class="symbol"&gt;,&lt;/span&gt; init ncnn2 k2&lt;span class="symbol"&gt;,&lt;/span&gt;
         init ndense1 k3&lt;span class="symbol"&gt;,&lt;/span&gt; init ndense2 k4))
  }
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; lenet
&lt;/div&gt;&lt;div class="result-block"&gt;((h1:Type)
 -&amp;gt; (h2:Type)
 -&amp;gt; (h3:Type)
 -&amp;gt; Layer
      ((Fin 1) =&amp;gt; (Fin 28) =&amp;gt; (Fin 28) =&amp;gt; Float32)
      ((Fin 10) =&amp;gt; Float32)
      ( ((h1 =&amp;gt; (Fin 1) =&amp;gt; (Fin 3) =&amp;gt; (Fin 3) =&amp;gt; Float32) &amp;amp; (h1 =&amp;gt; Float32))
      &amp;amp; ( ((h2 =&amp;gt; h1 =&amp;gt; (Fin 3) =&amp;gt; (Fin 3) =&amp;gt; Float32) &amp;amp; (h2 =&amp;gt; Float32))
        &amp;amp; ( (((h2 &amp;amp; (Fin 7 &amp;amp; Fin 7)) =&amp;gt; h3 =&amp;gt; Float32) &amp;amp; (h3 =&amp;gt; Float32))
          &amp;amp; ((h3 =&amp;gt; (Fin 10) =&amp;gt; Float32) &amp;amp; ((Fin 10) =&amp;gt; Float32))))))&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Data Loading&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;



&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Batch&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 5000
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Full&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; ((size &lt;span class="type-name"&gt;Batch&lt;/span&gt;) &lt;span class="symbol"&gt;*&lt;/span&gt; &lt;span class="type-name"&gt;H&lt;/span&gt; &lt;span class="symbol"&gt;*&lt;/span&gt; &lt;span class="type-name"&gt;W&lt;/span&gt;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; pixel (x&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Char&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
     r &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;W8ToI&lt;/span&gt; x
     &lt;span class="type-name"&gt;IToF&lt;/span&gt; &lt;span class="keyword"&gt;case&lt;/span&gt; r &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt; 0 &lt;span class="keyword"&gt;of&lt;/span&gt;
             &lt;span class="type-name"&gt;True&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; (abs r) &lt;span class="symbol"&gt;+&lt;/span&gt; 128
             &lt;span class="type-name"&gt;False&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; r
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; getIm &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Batch&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Image&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; 
    (&lt;span class="type-name"&gt;AsList&lt;/span&gt; _ im) &lt;span class="symbol"&gt;=&lt;/span&gt; unsafeIO &lt;span class="keyword"&gt;do&lt;/span&gt; readFile &amp;quot;examples&lt;span class="symbol"&gt;/&lt;/span&gt;mnist&lt;span class="symbol"&gt;.&lt;/span&gt;bin&amp;quot;
    raw &lt;span class="symbol"&gt;=&lt;/span&gt; unsafeCastTable &lt;span class="type-name"&gt;Full&lt;/span&gt; im
    &lt;span class="keyword"&gt;for&lt;/span&gt; b&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Batch&lt;/span&gt;  c&lt;span class="symbol"&gt;:&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 1) i&lt;span class="symbol"&gt;:&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; &lt;span class="type-name"&gt;W&lt;/span&gt;) j&lt;span class="symbol"&gt;:&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; &lt;span class="type-name"&gt;H&lt;/span&gt;)&lt;span class="symbol"&gt;.&lt;/span&gt;
        pixel raw&lt;span class="symbol"&gt;.&lt;/span&gt;((ordinal (b&lt;span class="symbol"&gt;,&lt;/span&gt; i&lt;span class="symbol"&gt;,&lt;/span&gt; j)) &lt;span class="symbol"&gt;@&lt;/span&gt; &lt;span class="type-name"&gt;Full&lt;/span&gt;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; getLabel &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Batch&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Class&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    (&lt;span class="type-name"&gt;AsList&lt;/span&gt; _ im2) &lt;span class="symbol"&gt;=&lt;/span&gt; unsafeIO &lt;span class="keyword"&gt;do&lt;/span&gt; readFile &amp;quot;examples&lt;span class="symbol"&gt;/&lt;/span&gt;labels&lt;span class="symbol"&gt;.&lt;/span&gt;bin&amp;quot;
    r &lt;span class="symbol"&gt;=&lt;/span&gt; unsafeCastTable &lt;span class="type-name"&gt;Batch&lt;/span&gt; im2
    &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; (&lt;span class="type-name"&gt;W8ToI&lt;/span&gt; r&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;@&lt;/span&gt; &lt;span class="type-name"&gt;Class&lt;/span&gt;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Training loop&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Get binary files from:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;code&gt;wget https://github.com/srush/learns-dex/raw/main/mnist.bin&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;code&gt;wget https://github.com/srush/learns-dex/raw/main/labels.bin&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Comment out these lines&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;ims &lt;span class="symbol"&gt;=&lt;/span&gt; getIm
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;labels &lt;span class="symbol"&gt;=&lt;/span&gt; getLabel
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;small_ims &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 10)&lt;span class="symbol"&gt;.&lt;/span&gt; ims&lt;span class="symbol"&gt;.&lt;/span&gt;((ordinal i)&lt;span class="symbol"&gt;@&lt;/span&gt;_)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;small_labels &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 10)&lt;span class="symbol"&gt;.&lt;/span&gt; labels&lt;span class="symbol"&gt;.&lt;/span&gt;((ordinal i)&lt;span class="symbol"&gt;@&lt;/span&gt;_)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:p&lt;/span&gt; small_labels
&lt;/div&gt;&lt;div class="result-block"&gt;[ (5@Fin 10)
, (0@Fin 10)
, (4@Fin 10)
, (1@Fin 10)
, (9@Fin 10)
, (2@Fin 10)
, (1@Fin 10)
, (3@Fin 10)
, (1@Fin 10)
, (4@Fin 10) ]&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Epochs&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 5)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Minibatches&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 1)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Minibatch&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 10)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; ims&lt;span class="symbol"&gt;.&lt;/span&gt;(2&lt;span class="symbol"&gt;@&lt;/span&gt;_)
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 1) =&amp;gt; (Fin 28) =&amp;gt; (Fin 28) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;model &lt;span class="symbol"&gt;=&lt;/span&gt; lenet (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 1) (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 1) (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 20) 
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;init_param &lt;span class="symbol"&gt;=&lt;/span&gt; (init model  &lt;span class="symbol"&gt;$&lt;/span&gt; newKey 0)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:p&lt;/span&gt; forward model init_param (ims&lt;span class="symbol"&gt;.&lt;/span&gt;(2&lt;span class="symbol"&gt;@&lt;/span&gt;&lt;span class="type-name"&gt;Batch&lt;/span&gt;))
&lt;/div&gt;&lt;div class="result-block"&gt;[ -6193.269
, -2458.7317
, -1936.6416
, -3916.4082
, -4915.504
, 0.
, -2748.0789
, -3704.304
, -3521.0889
, -1654.1918 ]&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Sanity check&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; (grad ((&lt;span class="symbol"&gt;\&lt;/span&gt;x param&lt;span class="symbol"&gt;.&lt;/span&gt; sum (forward model param x)) (ims&lt;span class="symbol"&gt;.&lt;/span&gt;(2&lt;span class="symbol"&gt;@&lt;/span&gt;_)))) init_param
&lt;/div&gt;&lt;div class="result-block"&gt;( (((Fin 1) =&amp;gt; (Fin 1) =&amp;gt; (Fin 3) =&amp;gt; (Fin 3) =&amp;gt; Float32) &amp;amp; ((Fin 1) =&amp;gt; Float32))
&amp;amp; ( ( ((Fin 1) =&amp;gt; (Fin 1) =&amp;gt; (Fin 3) =&amp;gt; (Fin 3) =&amp;gt; Float32)
    &amp;amp; ((Fin 1) =&amp;gt; Float32))
  &amp;amp; ( ( ((Fin 1 &amp;amp; (Fin 7 &amp;amp; Fin 7)) =&amp;gt; (Fin 20) =&amp;gt; Float32)
      &amp;amp; ((Fin 20) =&amp;gt; Float32))
    &amp;amp; (((Fin 20) =&amp;gt; (Fin 10) =&amp;gt; Float32) &amp;amp; ((Fin 10) =&amp;gt; Float32)))))&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;(all_params&amp;#39;&lt;span class="symbol"&gt;,&lt;/span&gt; losses&amp;#39;) &lt;span class="symbol"&gt;=&lt;/span&gt; trainClass model small_ims small_labels &lt;span class="type-name"&gt;Epochs&lt;/span&gt; &lt;span class="type-name"&gt;Minibatch&lt;/span&gt; &lt;span class="type-name"&gt;Minibatches&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:p&lt;/span&gt; losses&amp;#39;
&lt;/div&gt;&lt;div class="result-block"&gt;[18824.857, 100.18297, 84.9009, 81.476204, 79.5075]&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;


&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><category term="Dex"></category><category term="ML"></category><category term="Dex"></category></entry><entry><title>Dex: Tutorial</title><link href="https://blog.rush-nlp.com/dex-tutorial.html" rel="alternate"></link><published>2020-06-01T12:00:00-04:00</published><updated>2020-06-01T12:00:00-04:00</updated><author><name>Sasha Rush</name></author><id>tag:blog.rush-nlp.com,2020-06-01:/dex-tutorial.html</id><summary type="html">Literate blog serving as a tutorial for most of the series of Dex posts .</summary><content type="html">&lt;div id="main-output"&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h1&gt;Introduction to Dex&lt;/h1&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Dex is a functional, statically typed language for array
processing. There are many tools for array processing, from
high-level libraries like NumPy and MATLAB to low-level languages
like CUDA. Dex is a new approach for high-level array processing
that aims for the clarity of high-level libraries while allowing for
more granular expressivity. In particular, Dex does not force you to
rewrite all operations in terms of batched tensor interactions, but
allows for a range of interactions. Put more simply, when learning
MATLAB students are told repeatedly to &amp;quot;avoid for loops&amp;quot;. &lt;em&gt;Dex gives
for loops back&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Table comprehensions&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Let us begin with the most useful component of Dex, the &lt;code&gt;for&lt;/code&gt;
builder. The best analogy for this construct is list comprehensions
in Python. For instance, in Python, we might write a list
comprehension like:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;code&gt;x = [[1.0 for j in range(width)] for i in range(height)]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;In Dex, this construct would be written as:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Height&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 3
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Width&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 8
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;x &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Height&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Width&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; 1&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Once we have a variable, we can print it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;x
&lt;/div&gt;&lt;div class="result-block"&gt;[ [1., 1., 1., 1., 1., 1., 1., 1.]
, [1., 1., 1., 1., 1., 1., 1., 1.]
, [1., 1., 1., 1., 1., 1., 1., 1.] ]&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;More interestingly, we can also see its type with &lt;code&gt;:t&lt;/code&gt;. This type tells us
that &lt;code&gt;x&lt;/code&gt; is a two-dimensional table, whose first dimension has type &lt;code&gt;Height&lt;/code&gt; and
second dimension has type &lt;code&gt;Width&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; x
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; (Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Here &lt;code&gt;Fin&lt;/code&gt; stands for &lt;code&gt;finite&lt;/code&gt; represents the type of range from 0
to the value given minus one. The &lt;code&gt;:&lt;/code&gt; tells us the type of the
enumeration variable.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We can also display it as html. To do this we include the plot library.
Right now our table is not so interesting :)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt; plot
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; matshow x
&lt;/div&gt;&lt;img class="plot-img" src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAgAAAADCAIAAAAhqtkfAAAAAXNSR0IArs4c6QAAABRJREFUCJljrK+vZ8AGmLCK4pMAAG3RAYMAgeWyAAAAAElFTkSuQmCC"&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Once we have an table, we can use it in new comprehensions. For example,
let's try to add &lt;code&gt;5&lt;/code&gt; to each table element. In Python, one might write this as:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;code&gt;x5 = [[x[i][j] + 5.0 for j in range(width)] for i in range(height)]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Dex can do something similar. The main superficial difference is the
table indexing syntax, which uses &lt;code&gt;table.i&lt;/code&gt; instead of square brackets for
subscripting.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Height&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Width&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j &lt;span class="symbol"&gt;+&lt;/span&gt; 5&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; (Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;However, we can make this expression nicer. Because &lt;code&gt;x&lt;/code&gt; has a known table type
and &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; index into that type, Dex can infer the range of the loop.
That means that we can safely remove the explicit &lt;code&gt;Fin&lt;/code&gt; type annotations and
get the same result.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j &lt;span class="symbol"&gt;+&lt;/span&gt; 5&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; (Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Dex also lets you reduce this expression to include multiple variables
in the same &lt;code&gt;for&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i j&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j &lt;span class="symbol"&gt;+&lt;/span&gt; 5&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; (Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Standard functions can be  applied as well. Here we take the
&lt;code&gt;mean&lt;/code&gt; over each column:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; mean x&lt;span class="symbol"&gt;.&lt;/span&gt;i
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This style of using &lt;code&gt;for&lt;/code&gt; to construct type-inferred tables is central to what
makes Dex powerful. Tables do not only need to have &lt;code&gt;Fin&lt;/code&gt; types.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Let's consider another example. This one produces a list of ones
in Python.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;code&gt;y = [1.0 for j in range(width) for i in range(height)]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The analogous table construct in Dex is written in the following form. It
produces a one-dimensional table of &lt;code&gt;Height x Width&lt;/code&gt; elements. Here &lt;code&gt;&amp;amp;&lt;/code&gt;
indicates a tuple constructor.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;y &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt;  (i&lt;span class="symbol"&gt;,&lt;/span&gt; j) &lt;span class="symbol"&gt;:&lt;/span&gt; (&lt;span class="type-name"&gt;Height&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;Width&lt;/span&gt;) &lt;span class="symbol"&gt;.&lt;/span&gt; 1&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;As before, we can implement &amp;quot;adding 5&amp;quot; to this table using a &lt;code&gt;for&lt;/code&gt; constructor,
enumerating over each of its elements:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;y5 &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; y&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;+&lt;/span&gt; 5&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;And we can apply table functions to the table:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;mean y
&lt;/div&gt;&lt;div class="result-block"&gt;1.&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;But things start to get interesting when we consider the type of the
table.  Unlike the Python example, which produces a flat list (or
other examples like NumPy arrays), the Dex table maintains the index
type of its construction. In particular, the type of the table
remembers the original ranges.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; y
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3 &amp;amp; Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Typed indexing&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The use of typed indices lets you do really neat things, but
lets consider how it works. Critically, one cannot
simply index an table with an integer.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;r &lt;span class="symbol"&gt;=&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;2
&lt;/div&gt;&lt;div class="err-block"&gt;Type error:
Expected: (Fin 3)
  Actual: Int32

r = x.2
      ^
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Instead, it is necessary to cast the integer into the index type of the
current shape. This type annotation is done with the &lt;code&gt;@&lt;/code&gt; operator.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; x
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; (Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;row &lt;span class="symbol"&gt;=&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;(2 &lt;span class="symbol"&gt;@&lt;/span&gt; &lt;span class="type-name"&gt;Height&lt;/span&gt;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; row
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; row&lt;span class="symbol"&gt;.&lt;/span&gt;(5 &lt;span class="symbol"&gt;@&lt;/span&gt; &lt;span class="type-name"&gt;Width&lt;/span&gt;)
&lt;/div&gt;&lt;div class="result-block"&gt;Float32&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;If you are feeling lazy and sure of yourself, you can also let Dex infer
the type for you. This is also how &lt;code&gt;for&lt;/code&gt; works in the examples above that
did not provide and explicit type annotation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; row&lt;span class="symbol"&gt;.&lt;/span&gt;(5 &lt;span class="symbol"&gt;@&lt;/span&gt; _)
&lt;/div&gt;&lt;div class="result-block"&gt;Float32&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;If it helps, you can think of table indexing as function application: &lt;code&gt;a.i&lt;/code&gt; applies
table &lt;code&gt;a&lt;/code&gt; with index &lt;code&gt;i&lt;/code&gt; just like how &lt;code&gt;f x&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; with
argument &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Another consequence is that you cannot use indices as integers. It
is necessary to explicitly annotate index types with &lt;code&gt;ordinal&lt;/code&gt;.
This is because finite sets i.e. &lt;code&gt;Fin&lt;/code&gt; are not closed under addition.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Height&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Width&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; i &lt;span class="symbol"&gt;+&lt;/span&gt; j
&lt;/div&gt;&lt;div class="err-block"&gt;Type error:
Expected: (Fin 3)
  Actual: (Fin 8)

:t for i:Height. for j:Width. i + j
                                  ^
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Height&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Width&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; (ordinal i) &lt;span class="symbol"&gt;+&lt;/span&gt; (ordinal j)
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; (Fin 8) =&amp;gt; Int32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;If we want to convert these values to floats, we do it manually with the &lt;code&gt;IToF&lt;/code&gt;
function. We can use this to make an image gradient.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;gradient &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Height&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Width&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="type-name"&gt;IToF&lt;/span&gt; ((ordinal i) &lt;span class="symbol"&gt;+&lt;/span&gt; (ordinal j))
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; matshow gradient
&lt;/div&gt;&lt;img class="plot-img" src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAgAAAADCAIAAAAhqtkfAAAAAXNSR0IArs4c6QAAACNJREFUCJljZGBgkJGRkZGRkZWVRWYwYhWVkZFhwioqKysLABMOB6YI4m+9AAAAAElFTkSuQmCC"&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;As we have seen, indices are not limited to only integers. Many different Dex
types are valid index types. For example, we declared table &lt;code&gt;y&lt;/code&gt; as having a
pair of integers as its index type (&lt;code&gt;a &amp;amp; b&lt;/code&gt; means tuple type), so indexing
into &lt;code&gt;y&lt;/code&gt; requires creating a tuple value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; y
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3 &amp;amp; Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; y&lt;span class="symbol"&gt;.&lt;/span&gt;(2 &lt;span class="symbol"&gt;@&lt;/span&gt; &lt;span class="type-name"&gt;Height&lt;/span&gt;&lt;span class="symbol"&gt;,&lt;/span&gt; 5 &lt;span class="symbol"&gt;@&lt;/span&gt; &lt;span class="type-name"&gt;Width&lt;/span&gt;)
&lt;/div&gt;&lt;div class="result-block"&gt;Float32&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Tuple indices also provide an ordinal value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;for&lt;/span&gt; pair&lt;span class="symbol"&gt;:&lt;/span&gt;(&lt;span class="type-name"&gt;Fin&lt;/span&gt; 2 &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 3)&lt;span class="symbol"&gt;.&lt;/span&gt; ordinal pair
&lt;/div&gt;&lt;div class="result-block"&gt;[0, 1, 2, 3, 4, 5]@(Fin 2 &amp;amp; Fin 3)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Many algorithms in Dex come down to being able to pack and unpack these
indices. For example, we have seen that it is easy to sum over one dimension
of a 2D table.  However, if we have a 1D table indexed by a pair, we can
easily turn it into a 2D table using two &lt;code&gt;for&lt;/code&gt; constructors.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;.&lt;/span&gt; y&lt;span class="symbol"&gt;.&lt;/span&gt;(i&lt;span class="symbol"&gt;,&lt;/span&gt; j)
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; (Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Again, we rely on type inference in order to avoid explicitly spelling the
ranges.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Defining functions over tables&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;One use case of packing and unpacking table indices is that it allows us to
change the order of the axes. This is useful for applying functions on tables.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;For instance, we saw the &lt;code&gt;mean&lt;/code&gt; function above which sums over the first axis
of an table. We can apply &lt;code&gt;mean&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt; to produce the mean average over 24
elements:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; y
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3 &amp;amp; Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; mean y
&lt;/div&gt;&lt;div class="result-block"&gt;Float32&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The &lt;code&gt;mean&lt;/code&gt; function works independently of the index type of the table.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Let's see how we can define our own table functions. Defining a function in
Dex uses the following syntax.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; add5 (x&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Float32&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    x &lt;span class="symbol"&gt;+&lt;/span&gt; 5&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;add5 1&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;div class="result-block"&gt;6.&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; add5 y&lt;span class="symbol"&gt;.&lt;/span&gt;i
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3 &amp;amp; Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Functions also have types. Note that that function types in Dex
use the &lt;code&gt;-&amp;gt;&lt;/code&gt; symbol whereas tables use &lt;code&gt;=&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; add5
&lt;/div&gt;&lt;div class="result-block"&gt;(Float32 -&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We can also write functions with type variables over their inputs. For
instance, we may want to be able to write a function that applies &amp;quot;adds 5&amp;quot;
to tables with &lt;em&gt;any&lt;/em&gt; index type. This is possible by declaring an &lt;code&gt;n =&amp;gt; Int32&lt;/code&gt;
table argument type: this declares the type variable &lt;code&gt;n&lt;/code&gt; as the index type of
the table argument.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; tableAdd5&amp;#39; (x &lt;span class="symbol"&gt;:&lt;/span&gt; n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;+&lt;/span&gt; 5&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; tableAdd5&amp;#39; y
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3 &amp;amp; Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;But function types can help you out even more. For instance, since index types
are statically known, type checking can ensure that table arguments have valid
dimensions. This is &amp;quot;shape safety&amp;quot;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Imagine we have &lt;code&gt;transpose&lt;/code&gt; function. We can encode the shape change in the type.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; transFloat (x &lt;span class="symbol"&gt;:&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;j&lt;span class="symbol"&gt;.&lt;/span&gt;i
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We can even make it more generic by abstracting over the value type.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; trans (x &lt;span class="symbol"&gt;:&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; v) &lt;span class="symbol"&gt;:&lt;/span&gt; n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; v &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;j&lt;span class="symbol"&gt;.&lt;/span&gt;i
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We can also use this to check for shape errors:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; x
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; (Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; tableAdd&amp;#39; (x &lt;span class="symbol"&gt;:&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt;) (y &lt;span class="symbol"&gt;:&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; m &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j &lt;span class="symbol"&gt;+&lt;/span&gt; y&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; tableAdd&amp;#39; x x
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; (Fin 8) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; tableAdd&amp;#39; x (trans x)
&lt;/div&gt;&lt;div class="err-block"&gt;Type error:
Expected: ((Fin 3) =&amp;gt; (Fin 8) =&amp;gt; Float32)
  Actual: ((Fin 8) =&amp;gt; (Fin 3) =&amp;gt; Float32)

:t tableAdd&amp;#39; x (trans x)
                ^^^^^^^
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The type system checked for us that the input tables indeed have the same shape.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Case Study: Fashion MNist&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;To run this section, move the following binary files to examples:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;code&gt;wget http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz; gunzip t10k-images-idx3-ubyte.gz&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;code&gt;wget http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz; gunzip t10k-labels-idx1-ubyte.gz&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;To make some of these concepts for tangible let us consider a real example
using Fashion MNist clothing. For this example we will first read in a batch of images
each with a fixed size.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Batch&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 5000
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;IHeight&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 28
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;IWidth&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 28
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Channels&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 3
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Class&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 10
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Image&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; (&lt;span class="type-name"&gt;IHeight&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;IWidth&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float&lt;/span&gt;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Full&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; ((size &lt;span class="type-name"&gt;Batch&lt;/span&gt;) &lt;span class="symbol"&gt;*&lt;/span&gt; (size &lt;span class="type-name"&gt;IHeight&lt;/span&gt;) &lt;span class="symbol"&gt;*&lt;/span&gt; (size &lt;span class="type-name"&gt;IWidth&lt;/span&gt;))
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;To do this we will use Dex's IO to load some images from a file.
This section uses features outside the scope of the tutorial, so you can
ignore it for now.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; pixel (x&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Char&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
     r &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;W8ToI&lt;/span&gt; x
     &lt;span class="type-name"&gt;IToF&lt;/span&gt; &lt;span class="keyword"&gt;case&lt;/span&gt; r &lt;span class="symbol"&gt;&amp;lt;&lt;/span&gt; 0 &lt;span class="keyword"&gt;of&lt;/span&gt;
             &lt;span class="type-name"&gt;True&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; (abs r) &lt;span class="symbol"&gt;+&lt;/span&gt; 128
             &lt;span class="type-name"&gt;False&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; r
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; getIm &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Batch&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Image&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="comment"&gt;-- File is unsigned bytes offset with 16 starting bytes
&lt;/span&gt;    (&lt;span class="type-name"&gt;AsList&lt;/span&gt; _ im) &lt;span class="symbol"&gt;=&lt;/span&gt; unsafeIO &lt;span class="keyword"&gt;do&lt;/span&gt; readFile &amp;quot;examples&lt;span class="symbol"&gt;/&lt;/span&gt;t10k&lt;span class="symbol"&gt;-&lt;/span&gt;images&lt;span class="symbol"&gt;-&lt;/span&gt;idx3&lt;span class="symbol"&gt;-&lt;/span&gt;ubyte&amp;quot;
    raw &lt;span class="symbol"&gt;=&lt;/span&gt; unsafeCastTable &lt;span class="type-name"&gt;Full&lt;/span&gt; (&lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Full&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; im&lt;span class="symbol"&gt;.&lt;/span&gt;((ordinal i &lt;span class="symbol"&gt;+&lt;/span&gt; 16) &lt;span class="symbol"&gt;@&lt;/span&gt; _))
    &lt;span class="keyword"&gt;for&lt;/span&gt; b&lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Batch&lt;/span&gt; i j&lt;span class="symbol"&gt;.&lt;/span&gt;
        pixel raw&lt;span class="symbol"&gt;.&lt;/span&gt;((ordinal (b&lt;span class="symbol"&gt;,&lt;/span&gt; i&lt;span class="symbol"&gt;,&lt;/span&gt; j)) &lt;span class="symbol"&gt;@&lt;/span&gt; &lt;span class="type-name"&gt;Full&lt;/span&gt;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; getLabel &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Batch&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Class&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="comment"&gt;-- File is unsigned bytes offset with 8 starting bytes
&lt;/span&gt;    (&lt;span class="type-name"&gt;AsList&lt;/span&gt; _ lab) &lt;span class="symbol"&gt;=&lt;/span&gt; unsafeIO &lt;span class="keyword"&gt;do&lt;/span&gt; readFile &amp;quot;examples&lt;span class="symbol"&gt;/&lt;/span&gt;t10k&lt;span class="symbol"&gt;-&lt;/span&gt;labels&lt;span class="symbol"&gt;-&lt;/span&gt;idx1&lt;span class="symbol"&gt;-&lt;/span&gt;ubyte&amp;quot;
    r &lt;span class="symbol"&gt;=&lt;/span&gt; unsafeCastTable &lt;span class="type-name"&gt;Batch&lt;/span&gt; (&lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Batch&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; lab&lt;span class="symbol"&gt;.&lt;/span&gt;((ordinal i &lt;span class="symbol"&gt;+&lt;/span&gt; 8) &lt;span class="symbol"&gt;@&lt;/span&gt; _))
    &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; (&lt;span class="type-name"&gt;W8ToI&lt;/span&gt; r&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;@&lt;/span&gt; &lt;span class="type-name"&gt;Class&lt;/span&gt;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;all_ims &lt;span class="symbol"&gt;=&lt;/span&gt; getIm
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;all_labels &lt;span class="symbol"&gt;=&lt;/span&gt; getLabel
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;ims &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i &lt;span class="symbol"&gt;:&lt;/span&gt; (&lt;span class="type-name"&gt;Fin&lt;/span&gt; 100)&lt;span class="symbol"&gt;.&lt;/span&gt; all_ims&lt;span class="symbol"&gt;.&lt;/span&gt;(ordinal i&lt;span class="symbol"&gt;@&lt;/span&gt;_)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;im &lt;span class="symbol"&gt;=&lt;/span&gt; ims&lt;span class="symbol"&gt;.&lt;/span&gt;(0 &lt;span class="symbol"&gt;@&lt;/span&gt; _)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; matshow im
&lt;/div&gt;&lt;img class="plot-img" src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAAXNSR0IArs4c6QAAAyJJREFUSIntkrtLK00Yxt+ZvWY3m2Rzw40IQdTECFooCIKFiNjHQos0wUYbhViIVUALUUzhHyD+AfZWYmsV0ErSmYD3RcMme81eTjEf+vHxnYOnO3B8qmGemd/M+74PwLe+9YcIY/yxZlkWAIaGhv6xvk5BCAFAJpNZWloSBMH3/Q/LcRwAKBaLvw0NggAAZmdnT05OVldX/22lUqlSqdTpdL5OAwCgKAoApqamfN/f3t5WVfX6+rrVajUaDcuy7u/vb29vP6DoK0SEUBAEgiCoqspxHMb47u6u3W7LsmxZlq7rAwMDvu9zHCfL8q+gBAQAGGPSvkqlEgSBZVm1Wq3ZbEajUc/zTNP0fb+vr0/TtCAIRkdHDcP4aU//Q1xZWdnd3X16eup2u+12O5FIpNNphmFc1+31egDg+76u68PDw/C/g0IIkQ6SowBQLpdPT093dnYSiUQsFjNNMxKJdDodjLEgCAzDBEFAsrG4uPhZPtkiHvkjkaIoxWIxFAq9vb2Fw2GWZff29lRVTafTqqqSV13XTSQSjuOYpvny8jI5OUmTAj9AZJFMJrPZbC6XUxTFcRxN02Kx2NHRUa/XM00TY9xsNnu9XiwWYxiGEEKhkOd5kiQVCgWKUNLpdKFQGBkZGRsbm5iYmJubOzs7q9frBCEIgiiKl5eXMzMzPM/zPG+apqIolmVZlhWJRHRdf3x8BICHh4erqysaAObn5zOZjOu6qVSKoijP81zX3draCofDh4eHQRDYtl2r1TDG3W7X8zxRFMPh8MHBQblcJvXJsowxNk3Ttm3XddHCwsLx8XE+n19fX3ccB2PsOA5FUQghmqZZlvV9X5IkhND+/r6qqrZt67r+/PwMAI7jkEmKomgYBs/zDMOUSiUUjUY3NjaWl5ff398BgKZpSZLi8Xg8Hq9WqyzLIoQ2NzcbjYZhGJqmIYRubm7Gx8ez2ezFxYVt22TINE339/dHIpFqtfoZflEUp6enc7lcpVJ5fX3VNE3XdZIHjHE8Hs/n82tra+fn57Ztkyv1er3VaiWTSUmSJEmiaZrjuMHBwZ9l/1t/g34AafOCPGCaPucAAAAASUVORK5CYII="&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; matshow ims&lt;span class="symbol"&gt;.&lt;/span&gt;(1 &lt;span class="symbol"&gt;@&lt;/span&gt; _)
&lt;/div&gt;&lt;img class="plot-img" src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAAXNSR0IArs4c6QAABLtJREFUSImNlbtPG08Qx2dvb+98F1tWwIAVLAPhXVlERFEQUhBUUaRUSYFooUFIIEEb3hQI/gKKFKkIBSUSHUkKQEIpoEEhD5BsySFg87Bvfa+9FJPcj5CD/Kbam7v93Dy+swtwq4XD4e7u7quetra2xsbG23eRQK+qqiMjI48ePcrn8z9+/NB1PZfL4atQKKRpGqX0yZMnY2Nj6+vr/wtqGMbS0tLl5aWmaZqmMcY455ZlCSEURdF1XQhhmibn3HXdx48f9/T0/AM6MDBQXV0dj8cppYQQz/Ns26aUAgAhhBDiOA6uZVmmlKbT6adPn7a3t1+FyNegbW1tpVJJkiTXdbPZLADcvXtXkiRZlovFYqlUKisrE0JQSk3T9Dyvqqrq/fv35eXlp6enPkS6Bj0/PwcAIUQ2mx0cHFxdXb24uMCIHMdJJpOGYQgh0um0oijRaNS2bc75/fv3r0KuQ03TxKwBoKGhYXd313VdznlXV9fo6Ghvb288Hv/+/fvi4uK3b9++fPmCEXR2dt4IZYwBgCRJpmkCwMbGBvpzuVxXV5fruqOjo3NzcxsbG8lkcmVlBYmU0qGhoRtreu/ePYRyzgEgk8mgf29vDwCam5s555TS3d3deDxeKBT8jQcHBzdCKyoqcGHbNmMsk8kQQgDg3bt3ADA+Pv7169fy8vI3b968fPkylUrt7e0JIWRZxpYGQ6urqwEAC6rrejab9TxvcnKyqanp48ePyWQSAJaXl1taWubn5wcHBymlZWVliqL4OQXUFCNFPTmOEw6HLcsqFovz8/OvX79eW1t7+/bt/v5+Z2fn5eXlixcvAMB1XUKIbdtXOX+I/9WrV5TSysrK4+NjVVWj0ejx8TEARKPRUChULBYBIBwOn5yc+CNw584dxlg+n5+enhZCBEQ6PDyMC0VRenp6DMNIJBI1NTU4mpFIJBKJOI5TVVUVi8Xq6upSqVShUJAkCQBqa2uD0z87OwOAQqGQSCQWFhYKhYJlWZxz27aFEI7jOI6Dk4qzv7Oz4++NxWLB0FwuRwgxDKOioiKfzwMAY4z8tl/1IgTraFnW9vY2ejRNw3iDI1VVFQvX2toKALIsoxh8qOd5+I+zszN85XmeEOLGSDEEAGhubp6amkIWlt/7bfiZqqpCCGyj67qe5/kavw51HAdPudnZ2XQ6jR6f6EeKggeAdDqdSCRwpsPhcDA0FAohVAixv7/PGPNVgiaE8DxPkiT8rKGhIR6P27Yty7Ku68FQWZZd18X+nJ6e6rqOj36Lfu2RJPR/+PChtrYWqzwxMREMpZSWSiUAGBsbsyxLVVXUkJ+4XwSEHh4eLi8v/z1Uf0AVRcFt+Xyec04IQaFgvpRSvELwwI1Go5ubmzMzM5gEHmwBUMaYpmkA0N/fr2ka5xwFb9s2LvBMsCzLcZyLi4tUKoW3E6XUsqz/yngVahgGpZQxxhiLxWIHBwf19fV+r3xV4pWVy+UqKytPTk4QenR0FAzt6OjY3NwMhUKfPn3q6+uDf9nk5GRdXV0kEimVSg8fPgxO//nz54ZhmKZ5TUm3GGPMNM1isTg9PR0MzWQyDx48aG9vx1Pu6nX/t2EPP3/+/OzZs+7u7q2tLZ/zE58Yi37PtUYWAAAAAElFTkSuQmCC"&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This show the mean pixel value aggregation over all images.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; matshow (sum ims)
&lt;/div&gt;&lt;img class="plot-img" src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAAXNSR0IArs4c6QAABTJJREFUSIltVsmq20oUVA9qSa2hbVki5sYJCYGsAlnm/38iZBFIIFwuF64tW1K3eu63OInfwNNCeJDPqVNVp9oo+78LY5zned/3nz59+vDhgzGGUqqUGscRY/zr16+np6evX7/O8xxCSCn95+f0P++rqkII7fd7IcT79++/fPkihCCEMMa2beOchxAeHh5+/PjRNM23b9+maVJKxRhDCPci5P4KIZTnOef84eFhGIY3b96cTqePHz/2fU8IaZqGc16WZVEUdV1zzq21zrndbue9997/E9nfRSmldV33ff/27dtxHIUQnz9/bts2hBBjLMsyhGCMsdZaaxlj3nulVFVVKSWllHMupYQxjjESwIgQwhgzxt69e3c8Hjnn+/1+GAZKqZQyxphSgme894yxGGNVVcuyxBidczFGpRS0TynRLMuAaUJI13VCCMZYVVV1XccYpZSMMcaYlBLU67rOew89mqbBGCOEYoyXyyWlpLX+LRTGmBBSVRWllDEGDAoh8jwvyzLPc5Aoz/OUEufcGIMQEkI8PT1RSgF713XOOWttCIECmyklUKmu66Io2rYFgAihsixTSowxSimlFOyBEDLGtG1rjOm6brfbHY9HjPG2bVmWYVAJQHHOOedN04QQnHMYY5gDFAApOOfDMLRtC1SmlKqqatu2aZqiKPI8xxhTEApjHELgnMcYCSHAcgihaZosy2ACjDGUA/MppSilQoh1Xfu+d84ty9I0jbWWwiwAFu4Y43sVSinGeBxHQsg0TQghzrnWuq5rEJMQQinN83ye59PpdLlclmWhUIhSGkJACGmttdZFUWCMy7I8HA77/T7P8xij9/7169cAHEDVdU0pJYQQQna73fV6res6yzJ61xQkgh6g0uFwOB6PIQRw6zAMQEiMERQ7Ho/LsqzrqrUGnxhjYoy/ixJCYoyMMZAenN+2bVVVRVEACdZaeAwYs9Yuy2KMSSnBdmGMISiw977+c43j+OrVKyFEVVXOOYQQIQRmZ4w558BqkEyEEM45zAROggkYY7gsy2EYwGin02kcx7IswQOcc2gADhdCOOdgF8Dk4DzvfVEUXddhjIuiIIRQEBEhVBRFWZbwoq5rIUTTNF3XgXVCCMuycM5hQcFSzrl1XY0xhBDnHDiXwi7dTY4QAvrurJ/P56qqYHfh3rYtAIcdAYqyLINvMcZ1XWMwf13XwE5KyRhzu93O5zN0UkpBZBhjpJQQo+C8dV23bYMQ8d6DhlmW0Xmer9drjBGg5XkO/WOM27bBPYRgrYXEAht47621CKF1XTnn27bBxICGwMgAar/fa61DCBBLkLAxxnVdL5fLuq6QPvM8SylfXl6mafr586eUUmv9+Pj4/fv38/kspaSQsqDm5XLp+94Ywxjb7XYppcPhAKkKSMuyvF6v27Z576dput1u4HaIDjBDjPF3URgHUpYQAokZY7zdbiAF1EopdV23bZsxBmJfaw35vSyLlBIoppBp1tpt2+4bghCSUiqluq4D80O2CyEgNJVS8PD5fIbEs9ZCPoQQcAgB5EspWWsh8RBCt9ttmqbL5ZJlmdZ6nmegyDkHJ6DWelmWZVlA6mmatNb/OqO01mAUWEdAnVKSUj4/P1tr13WVUgJqay2c9fM8oz/X/aBNKf0+ouFAp5Q2TXO73WARCSFFUQBqa+3z87NzrqoqpZSU8nw+L8vy8vICha7XK3zuvUf3/zllWQohdrsduGocx5TS8XiEftM0LcvCGBuGIcb4+PiolLperwghsN00TWCSlNJfgvsam3jVDWAAAAAASUVORK5CYII="&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This example overplots three different pairs of clothing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;imscolor &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; c&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Channels&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; ims&lt;span class="symbol"&gt;.&lt;/span&gt;((ordinal c)&lt;span class="symbol"&gt;@&lt;/span&gt;_)&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; imscolor
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 28) =&amp;gt; (Fin 28) =&amp;gt; (Fin 3) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; imshow (imscolor &lt;span class="symbol"&gt;/&lt;/span&gt; 255&lt;span class="symbol"&gt;.&lt;/span&gt;0)
&lt;/div&gt;&lt;img class="plot-img" src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAAXNSR0IArs4c6QAABOhJREFUSImF1VuMXXUVx/HP/7/3OXM9M+2ZmU4v0wsVLcbiBExpbGrQFK0mxsQGghpfikQBiRCsiSjS0KhYhBh9IPFFoy9cYvBBIyaAYFGIaIqlEbBoaU0bh16m07mcmTNnX3yYHtvCVNfT3itZ3/37rf9/rc0lI0Btm20vU/Jvvkbp6nHvmeLApQsXKt8ZndwZbS6cedrJP+pmHH00dGa6uiUN1/7Zrl/77SLVySK5WeooTRNG9fZqrZZ0SlM9A/qGxJrWuFf7rH7BPfzs/yr9IqtYTkKgvE9rUJJSCB1CkGV0CG9KvyJZ6hif4AMXMdK3Q69ijkjO2DAsrYhBWpjJzaXqUREkfZonlAyzj0FOnWfEt0PPgoIxbtvoCSYrkpZjUZZYU2iUityxDtVT+mkxy/qLGO+ANhdcg8tHHajKO82WPtx012mfYXnwVunBpjd7/LOtYOv/gFbbuSZ47ktEGsZT104rrrTrpO9kngvWNJLHV4cFYqLjdnj34tCV7dw8OP4aFaKD08GKuOHjHm2umiiuf7boGc/ysXr5X3tvwI7268UHNdR+aFHh+FkxJfr9NDuKeznsQwP5j3+efOsGPxqdd5CC1LIx25laHLoK7YZ2M3ZC0W13sEGy/9ZstU06Hnls/O4rBnbv9YXbGvXEbN3aqtPHTTLCw4vYH2rncjJ6G1pRI4t7ZT95tudJ+x7/YPl69f6t+dSU8vofFJS5vwWVlqVkiytdASEqCzFT9iu/K9HK+1PDzVte9U3r5pb/4aGT5dw3DP/ybB7EXE9UZTLRzPUw8zal4Y62+6pim7IhGQn52pbud322sKdmrDYynRUTw2Fg0LLLVEZl01oRinVm2hfgImg5AXFaOiJ8n2n5fGq2eVNr408Ld2cGsq1LQjqbFX1NU7PiX3RToSQMwvYLoZFIGBeDoiEbUp6BlZXi9lAOhMu+HAQ6HXggzFfzVgga8zOtP0noCJIuPVGNGxd6mpBTLLAnlB3MGeq17r02GFmRNuZbcdI9S4IHaclmSzHkR4PWxMySUoVYKgpdg3JqvI+Yg2Gu4SO5TwY3sHODl+6z1vB8KGKR9/t6b+neUquc76aeJ5UOa4ru8oQG3bnp0uEhM4wxsHD617GSjKFMksjJvm3XzXpteiB7rdTRLA88VIrBNHmpp2j2pvZq7jzGCKctJfaapUlG+jF+yBXcylSnmJgnKYTXTVXu/GoxWqjU7A/cz6lCKyRjMX8r8VHF4csVyxnTU9Xo1kkvJ0hf4hFu5PNIpbka9Yr6abu7X6jmm4P0Dsv+zu+CSYLagVi+P7dOfPp5zTeElwnS3VZ9Tx810gn2sIdeNic2zLmLI7u88gvXdBwts74Qm/vKubr1V5aHbyn9JlTmZHIk+4/416MGU7Wg1pLSwaELJ2qaZ6qeKT2MM8xSJTbJxSbrhcMCYYXyiLKu/+jVL7YVBWbP3/eLZ79CF7iZrmCW7NOyea1S9pRsYSf0mCcrTZ4xyiaQtLflItAGCRUqDAaT1HdaklmS6n9CjT5qmXowEJRNy9q/poSj5zEXL5QtvEgnh/hcpOBJdtC84PMbOUgXK+xmPTXm2pIXUfopGjQXJixvZ9dwmkNsYSE/xySD5zrWZIY9LhFX8SueoqdtIxBvEo+K288tiHid+FfxH5It54y/wvNsO4/5D1BB2p1bkz8xAAAAAElFTkSuQmCC"&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This one shows all the images on one channel over the base plot.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;imscolor2 &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; b&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; c&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Channels&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;
          &lt;span class="keyword"&gt;case&lt;/span&gt; ordinal c &lt;span class="symbol"&gt;==&lt;/span&gt; 0 &lt;span class="keyword"&gt;of&lt;/span&gt;
             &lt;span class="type-name"&gt;True&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; (sum ims)&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j &lt;span class="symbol"&gt;/&lt;/span&gt; (&lt;span class="type-name"&gt;IToF&lt;/span&gt; (size &lt;span class="type-name"&gt;Batch&lt;/span&gt;))
             &lt;span class="type-name"&gt;False&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; ims&lt;span class="symbol"&gt;.&lt;/span&gt;b&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; imseqshow (imscolor2 &lt;span class="symbol"&gt;/&lt;/span&gt; 255&lt;span class="symbol"&gt;.&lt;/span&gt;0)
&lt;/div&gt;&lt;img class="plot-img" src="data:image/png;base64, "&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;This example utilizes the type system to help manipulate the shape
of an image. Sum pooling downsamples the image as the max of each
pixel in a tile grid pattern. See if you can figure out the other
types.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; split (x&lt;span class="symbol"&gt;:&lt;/span&gt; m&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;v) &lt;span class="symbol"&gt;:&lt;/span&gt; n&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;o&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;v &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; i j&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;(ordinal (i&lt;span class="symbol"&gt;,&lt;/span&gt;j)&lt;span class="symbol"&gt;@&lt;/span&gt;_)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; imtile (x&lt;span class="symbol"&gt;:&lt;/span&gt; a&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;b&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;v) &lt;span class="symbol"&gt;:&lt;/span&gt; n&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;o&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;p&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;q&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;v &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; kh kw h w&lt;span class="symbol"&gt;.&lt;/span&gt; (split (split x)&lt;span class="symbol"&gt;.&lt;/span&gt;h&lt;span class="symbol"&gt;.&lt;/span&gt;kh)&lt;span class="symbol"&gt;.&lt;/span&gt;w&lt;span class="symbol"&gt;.&lt;/span&gt;kw
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;im1 &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 2 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 2 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 14 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 14 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; imtile ims&lt;span class="symbol"&gt;.&lt;/span&gt;(0&lt;span class="symbol"&gt;@&lt;/span&gt;_)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; matshow (sum (sum im1))
&lt;/div&gt;&lt;img class="plot-img" src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAIAAACQKrqGAAAAAXNSR0IArs4c6QAAAPJJREFUKJHNkKGKhUAARUcdBIOKqA9MwhS7gj8gTLCI3eIniNXi7/kFjm2Cg4NMMOhgGV9Y2LQv7YY94ZZ7OeEC8O/RNM2yLACA/mnR930cxwAACGFZlh81dV1v28YY45wfx3Ge5w9WTdNer1dRFNM0ua6r67pS6jxP13X1r/o7EULDMFBKEUKWZZmmaRgGhBBjDAEAvu97nheGYVVVQgjGWNd1URQJISCEpmkqpbIsg03TpGlKKVVK7fuOMV7X9b7v4zjmefZ937ZtKeV1XYaUMgzDJEnatg2CgFKa5zkhZBxHQojjOJzz53mWZfmL53/FG2SgY6Kqf9iNAAAAAElFTkSuQmCC"&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;im2 &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 4 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 4 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 7 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 7 &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; imtile ims&lt;span class="symbol"&gt;.&lt;/span&gt;(0&lt;span class="symbol"&gt;@&lt;/span&gt;_)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; matshow (sum (sum im2))
&lt;/div&gt;&lt;img class="plot-img" src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAIAAABLMMCEAAAAAXNSR0IArs4c6QAAAGBJREFUCJljYCASMDExMcM5YmJi06dP19PTExcXhwpxcXGVlJS8efPm////M2bMYHFxcREQEHBwcNDX1+fm5v7x44eGhgajurq6ra3tjx8/uLm5T548qaOj8/PnT+wWAgAJVBux2PROKQAAAABJRU5ErkJggg=="&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Writing Loops&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Dex is a functional language - but when writing mathematical algorithms,
it is often convenient to temporarily put aside immutability and write
imperative code using mutation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;For example, let's say we want to actually implement the &lt;code&gt;mean&lt;/code&gt; function
ourselves by accumulating summed values in-place. In Python, implementing this
is not directly possible solely via list comprehensions, so we would write a
loop.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;code&gt;acc = 0.0&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;code&gt;for i in range(len(x)):&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;pre&gt;&lt;code&gt;  `acc = acc + x[i]`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;code&gt;return acc / len(x)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;In Dex, values are immutable, so we cannot directly perform mutation. But Dex
includes algebraic effects, which are a purely-functional way to modeling
side-effects like mutation. We can write code that looks like mutation using
the &lt;code&gt;State&lt;/code&gt; effect, which provides getter and setter functionality (via &lt;code&gt;get&lt;/code&gt;
and &lt;code&gt;:=&lt;/code&gt; assignment). Here's what it looks like:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; tableMean (x &lt;span class="symbol"&gt;:&lt;/span&gt; n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    &lt;span class="comment"&gt;-- acc = 0
&lt;/span&gt;    withState 0&lt;span class="symbol"&gt;.&lt;/span&gt;0 &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;acc&lt;span class="symbol"&gt;.&lt;/span&gt;
         &lt;span class="comment"&gt;-- for i in range(len(x))
&lt;/span&gt;         &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt;
             &lt;span class="comment"&gt;-- acc = acc + x[i]
&lt;/span&gt;             acc &lt;span class="symbol"&gt;:=&lt;/span&gt; (get acc) &lt;span class="symbol"&gt;+&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i
         &lt;span class="comment"&gt;-- return acc / len(x)
&lt;/span&gt;         (get acc) &lt;span class="symbol"&gt;/&lt;/span&gt; (&lt;span class="type-name"&gt;IToF&lt;/span&gt; (size n))
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;

&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;tableMean [0&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; 1&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;5]
&lt;/div&gt;&lt;div class="result-block"&gt;0.5&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;So, even though Dex is a functional language, it is possible to write loops
that look similar to ones that truly perform mutation. However, there is one
line which is quite new and a bit scary. Let us look into that line in a bit
more detail.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;First: &lt;code&gt;$&lt;/code&gt;. This symbol is used in Dex just like it is used in Haskell, but
if you haven't seen it before, it seems a bit strange. The symbol &lt;code&gt;$&lt;/code&gt; is the function
application operator: it basically replaces of expression-grouping parentheses
&lt;code&gt;(f x)&lt;/code&gt; when it is inconvenient to write them. For example, the following two
expressions are identical:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; tableMean (y &lt;span class="symbol"&gt;+&lt;/span&gt; y)
&lt;/div&gt;&lt;div class="result-block"&gt;Float32&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; tableMean &lt;span class="symbol"&gt;$&lt;/span&gt; y &lt;span class="symbol"&gt;+&lt;/span&gt; y
&lt;/div&gt;&lt;div class="result-block"&gt;Float32&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Next: &lt;code&gt;\&lt;/code&gt;. This symbol is the lambda sigil in Dex. It is analogous to the
&lt;code&gt;lambda&lt;/code&gt; keyword in Python, and starts the definition of a function value
(i.e. closure). In &lt;code&gt;tableMean&lt;/code&gt; above: the lambda takes an argument named &lt;code&gt;acc&lt;/code&gt;
and returns the body, which is the expression following the &lt;code&gt;.&lt;/code&gt; (a &lt;code&gt;for&lt;/code&gt;
constructor in this case).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt; x &lt;span class="symbol"&gt;+&lt;/span&gt; 10
&lt;/div&gt;&lt;div class="result-block"&gt;(Int32 -&amp;gt; Int32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;(&lt;span class="symbol"&gt;\&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt; x &lt;span class="symbol"&gt;+&lt;/span&gt; 10) 20
&lt;/div&gt;&lt;div class="result-block"&gt;30&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;That leaves: &lt;code&gt;withState&lt;/code&gt;. This function uses the &lt;code&gt;State&lt;/code&gt; effect, enabling us
to introduce imperative variables into the computation.
&lt;code&gt;withState&lt;/code&gt; takes an initial value &lt;code&gt;init&lt;/code&gt; and a body function taking a
&amp;quot;mutable value&amp;quot; reference (&lt;code&gt;acc&lt;/code&gt; here), and returns the body function's result.
Here's a simple example:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;withState 10 &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt; state&lt;span class="symbol"&gt;.&lt;/span&gt;
     state &lt;span class="symbol"&gt;:=&lt;/span&gt; 30
     state &lt;span class="symbol"&gt;:=&lt;/span&gt; 10
     get state
&lt;/div&gt;&lt;div class="result-block"&gt;10&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The element returned is the body function's result (&lt;code&gt;10&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Finally: this is a good point to talk a bit about some other operators in Dex.
In the examples above, we see two types of equal sign operators: &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;:=&lt;/code&gt;.
The first is the &lt;code&gt;let&lt;/code&gt; operator that creates an immutable assignment (a
&amp;quot;let-binding&amp;quot;). This one is built into the language and can be used anywhere.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Height&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;
        &lt;span class="comment"&gt;-- Bind a temporary variable `temp`, as an example.
&lt;/span&gt;        temp &lt;span class="symbol"&gt;=&lt;/span&gt; (ordinal i) &lt;span class="symbol"&gt;+&lt;/span&gt; 10
        &lt;span class="keyword"&gt;for&lt;/span&gt; j&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Width&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt;
            temp
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; (Fin 8) =&amp;gt; Int32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The other is &lt;code&gt;:=&lt;/code&gt;, which is an assignment operator that can only be used
when a &lt;code&gt;State&lt;/code&gt; effect is available (e.g. inside of a body function passed to
&lt;code&gt;withState&lt;/code&gt;). &lt;code&gt;ref := x&lt;/code&gt; assigns the value &lt;code&gt;x&lt;/code&gt; to the mutable reference &lt;code&gt;ref&lt;/code&gt;.
Reading the value in &lt;code&gt;ref&lt;/code&gt; is possible via the &lt;code&gt;get&lt;/code&gt; function. or via using
the final result returned by &lt;code&gt;withState&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Interfaces&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Our &lt;code&gt;tableMean&lt;/code&gt; function is pretty neat. It lets us work with tables with any
index type and computes the sum. However, &lt;code&gt;tableMean&lt;/code&gt; explicitly takes only
integer tables (of type &lt;code&gt;n =&amp;gt; Float32&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; tableMean
&lt;/div&gt;&lt;div class="result-block"&gt;((n:Type) ?-&amp;gt; (n =&amp;gt; Float32) -&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;If we try to apply &lt;code&gt;tableMean&lt;/code&gt; to other types for get errors. For example,
&lt;code&gt;tableMean&lt;/code&gt; does not work when applied to a table of &lt;em&gt;pairs&lt;/em&gt; of floats.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; (&lt;span class="keyword"&gt;for&lt;/span&gt; (i&lt;span class="symbol"&gt;,&lt;/span&gt; j)&lt;span class="symbol"&gt;.&lt;/span&gt; (x&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j&lt;span class="symbol"&gt;,&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j))
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3 &amp;amp; Fin 8) =&amp;gt; (Float32 &amp;amp; Float32))&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;tableMean (&lt;span class="keyword"&gt;for&lt;/span&gt; (i&lt;span class="symbol"&gt;,&lt;/span&gt; j)&lt;span class="symbol"&gt;.&lt;/span&gt; (x&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j&lt;span class="symbol"&gt;,&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j))
&lt;/div&gt;&lt;div class="err-block"&gt;Type error:
Expected: Float32
  Actual: (Float32 &amp;amp; Float32)

tableMean (for (i, j). (x.i.j, x.i.j))
                        ^^^^^^^^^^^^
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Intuitively, supporting this seems possible. We just need to be able to
add and divide pair types. Let's look closer at the exact types of the
addition and division operators.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; (&lt;span class="symbol"&gt;+&lt;/span&gt;)
&lt;/div&gt;&lt;div class="result-block"&gt;((a:Type) ?-&amp;gt; (Add a) ?=&amp;gt; a -&amp;gt; a -&amp;gt; a)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; (&lt;span class="symbol"&gt;/&lt;/span&gt;)
&lt;/div&gt;&lt;div class="result-block"&gt;((a:Type) ?-&amp;gt; (VSpace a) ?=&amp;gt; a -&amp;gt; Float32 -&amp;gt; a)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;These function types are a bit complex.
&lt;code&gt;(+)&lt;/code&gt; maps &lt;code&gt;a -&amp;gt; a -&amp;gt; a&lt;/code&gt; with a constraint that &lt;code&gt;a&lt;/code&gt; implements the &lt;code&gt;Add'&lt;/code&gt;
interface. Whereas &lt;code&gt;(/)&lt;/code&gt; maps &lt;code&gt;a -&amp;gt; Float32 -&amp;gt; a&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; implements the
&lt;code&gt;VSpace'&lt;/code&gt; interface.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;If we look in the Prelude, we can see that these interfaces are defined as
(This will throw error because it mirrors the prelude, but we are just repeating it here.):&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;pre&gt;&lt;code&gt;interface Add a
 add : a -&amp;gt; a -&amp;gt; a
 sub : a -&amp;gt; a -&amp;gt; a
 zero : a

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;pre&gt;&lt;code&gt;interface [Add a] VSpace a
 scaleVec : Float -&amp;gt; a -&amp;gt; a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;&lt;em&gt;Interfaces&lt;/em&gt; define &lt;em&gt;requirements&lt;/em&gt;: the functions needed for a type to
implement the interface (via an &lt;em&gt;instance&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Here is an &lt;code&gt;Add&lt;/code&gt; instance for the float pair type.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;Add&lt;/span&gt; (&lt;span class="type-name"&gt;Float32&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt;)
  add &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;(x1&lt;span class="symbol"&gt;,&lt;/span&gt;x2) (y1&lt;span class="symbol"&gt;,&lt;/span&gt; y2)&lt;span class="symbol"&gt;.&lt;/span&gt; (x1 &lt;span class="symbol"&gt;+&lt;/span&gt; y1&lt;span class="symbol"&gt;,&lt;/span&gt; x2 &lt;span class="symbol"&gt;+&lt;/span&gt; y2)
  sub &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;(x1&lt;span class="symbol"&gt;,&lt;/span&gt;x2) (y1&lt;span class="symbol"&gt;,&lt;/span&gt; y2)&lt;span class="symbol"&gt;.&lt;/span&gt; (x1 &lt;span class="symbol"&gt;-&lt;/span&gt; y1&lt;span class="symbol"&gt;,&lt;/span&gt; x2 &lt;span class="symbol"&gt;-&lt;/span&gt; y2)
  zero &lt;span class="symbol"&gt;=&lt;/span&gt; (0&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;And here is a &lt;code&gt;VSpace&lt;/code&gt; instance for the float pair type:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; &lt;span class="type-name"&gt;VSpace&lt;/span&gt; (&lt;span class="type-name"&gt;Float32&lt;/span&gt; &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt;)
  scaleVec &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;s (x&lt;span class="symbol"&gt;,&lt;/span&gt; y)&lt;span class="symbol"&gt;.&lt;/span&gt; (x &lt;span class="symbol"&gt;*&lt;/span&gt; s&lt;span class="symbol"&gt;,&lt;/span&gt; y &lt;span class="symbol"&gt;*&lt;/span&gt; s)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Once we have these two instance definitions, we can revisit our table sum
function using them:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; tableMean&amp;#39; [&lt;span class="type-name"&gt;VSpace&lt;/span&gt; v] (x &lt;span class="symbol"&gt;:&lt;/span&gt; n &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; v) &lt;span class="symbol"&gt;:&lt;/span&gt; v &lt;span class="symbol"&gt;=&lt;/span&gt;
   withState zero &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;acc&lt;span class="symbol"&gt;:&lt;/span&gt; (&lt;span class="type-name"&gt;Ref&lt;/span&gt; _ v)&lt;span class="symbol"&gt;.&lt;/span&gt;
        &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt;
            acc &lt;span class="symbol"&gt;:=&lt;/span&gt; add (get acc) x&lt;span class="symbol"&gt;.&lt;/span&gt;i       &lt;span class="comment"&gt;-- `Add` requirement
&lt;/span&gt;        (get acc) &lt;span class="symbol"&gt;/&lt;/span&gt; (&lt;span class="type-name"&gt;IToF&lt;/span&gt; (size n))  &lt;span class="comment"&gt;-- `VSpace` requirement
&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;tableMean&amp;#39; [0&lt;span class="symbol"&gt;.&lt;/span&gt;1&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;5&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;9]
&lt;/div&gt;&lt;div class="result-block"&gt;0.5&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;tableMean&amp;#39; [(1&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;5)&lt;span class="symbol"&gt;,&lt;/span&gt; (0&lt;span class="symbol"&gt;.&lt;/span&gt;5&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;8)]
&lt;/div&gt;&lt;div class="result-block"&gt;(0.75, 0.65)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;The instance values are hardcoded for the float pair type. To be more general,
we can and should instead define &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;VSpace&lt;/code&gt; instances for generic
' tuple types.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; [&lt;span class="type-name"&gt;Add&lt;/span&gt; v&lt;span class="symbol"&gt;,&lt;/span&gt; &lt;span class="type-name"&gt;Add&lt;/span&gt; w] &lt;span class="type-name"&gt;Add&lt;/span&gt; (v &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; w)
  add &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;(x1&lt;span class="symbol"&gt;,&lt;/span&gt;x2) (y1&lt;span class="symbol"&gt;,&lt;/span&gt; y2)&lt;span class="symbol"&gt;.&lt;/span&gt; (x1 &lt;span class="symbol"&gt;+&lt;/span&gt; y1&lt;span class="symbol"&gt;,&lt;/span&gt; x2 &lt;span class="symbol"&gt;+&lt;/span&gt; y2)
  sub &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;(x1&lt;span class="symbol"&gt;,&lt;/span&gt;x2) (y1&lt;span class="symbol"&gt;,&lt;/span&gt; y2)&lt;span class="symbol"&gt;.&lt;/span&gt; (x1 &lt;span class="symbol"&gt;-&lt;/span&gt; y1&lt;span class="symbol"&gt;,&lt;/span&gt; x2 &lt;span class="symbol"&gt;-&lt;/span&gt; y2)
  zero &lt;span class="symbol"&gt;=&lt;/span&gt; (zero&lt;span class="symbol"&gt;,&lt;/span&gt; zero)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;instance&lt;/span&gt; [&lt;span class="type-name"&gt;VSpace&lt;/span&gt; v&lt;span class="symbol"&gt;,&lt;/span&gt; &lt;span class="type-name"&gt;VSpace&lt;/span&gt; w] &lt;span class="type-name"&gt;VSpace&lt;/span&gt; (v &lt;span class="symbol"&gt;&amp;amp;&lt;/span&gt; w)
  scaleVec &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;\&lt;/span&gt;s (x&lt;span class="symbol"&gt;,&lt;/span&gt; y)&lt;span class="symbol"&gt;.&lt;/span&gt; (scaleVec s x&lt;span class="symbol"&gt;,&lt;/span&gt; scaleVec s y)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;More Fashion MNist&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Now that we has more functions we can revisit some of the Fashion MNist examples.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Function that uses state to produce a histogram:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="type-name"&gt;Pixels&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="type-name"&gt;Fin&lt;/span&gt; 256
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; bincount (inp &lt;span class="symbol"&gt;:&lt;/span&gt; a &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; b) &lt;span class="symbol"&gt;:&lt;/span&gt; b &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="type-name"&gt;Int&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    withState zero &lt;span class="symbol"&gt;\&lt;/span&gt;acc &lt;span class="symbol"&gt;.&lt;/span&gt;
        &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt;
            v &lt;span class="symbol"&gt;=&lt;/span&gt; acc&lt;span class="symbol"&gt;!&lt;/span&gt;(inp&lt;span class="symbol"&gt;.&lt;/span&gt;i)
            v &lt;span class="symbol"&gt;:=&lt;/span&gt; (get v) &lt;span class="symbol"&gt;+&lt;/span&gt; 1
        get acc
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Plot how many times each pixel value occurs in an image:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;hist &lt;span class="symbol"&gt;=&lt;/span&gt; bincount &lt;span class="symbol"&gt;$&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; (i&lt;span class="symbol"&gt;,&lt;/span&gt;j)&lt;span class="symbol"&gt;.&lt;/span&gt; (&lt;span class="type-name"&gt;FToI&lt;/span&gt; (ims&lt;span class="symbol"&gt;.&lt;/span&gt;(0 &lt;span class="symbol"&gt;@&lt;/span&gt; _)&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j) &lt;span class="symbol"&gt;@&lt;/span&gt;&lt;span class="type-name"&gt;Pixels&lt;/span&gt;)
&lt;/div&gt;&lt;div class="result-block"&gt;Ordinal index out of range:256 &amp;gt;= 256&lt;/div&gt;&lt;div class="err-block"&gt;Runtime error&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; hist
&lt;/div&gt;&lt;div class="err-block"&gt;Error: variable not in scope: hist&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; showPlot &lt;span class="symbol"&gt;$&lt;/span&gt; yPlot (&lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; (&lt;span class="type-name"&gt;IToF&lt;/span&gt; hist&lt;span class="symbol"&gt;.&lt;/span&gt;i))
&lt;/div&gt;&lt;div class="err-block"&gt;Error: variable not in scope: hist

:html showPlot $ yPlot (for i. (IToF hist.i))
                                     ^^^^
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Find nearest images in the dataset:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; imdot (x &lt;span class="symbol"&gt;:&lt;/span&gt; m&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;n&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float32&lt;/span&gt;) (y &lt;span class="symbol"&gt;:&lt;/span&gt; m&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;n&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Float32&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;Float32&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt;
    sum &lt;span class="keyword"&gt;for&lt;/span&gt; (i&lt;span class="symbol"&gt;,&lt;/span&gt; j)&lt;span class="symbol"&gt;.&lt;/span&gt; x&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j &lt;span class="symbol"&gt;*&lt;/span&gt; y&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;dist &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; b1&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; b2&lt;span class="symbol"&gt;.&lt;/span&gt;
        &lt;span class="keyword"&gt;case&lt;/span&gt; b1 &lt;span class="symbol"&gt;==&lt;/span&gt; b2 &lt;span class="keyword"&gt;of&lt;/span&gt;
             &lt;span class="type-name"&gt;True&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0
             &lt;span class="type-name"&gt;False&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="symbol"&gt;-&lt;/span&gt;imdot ims&lt;span class="symbol"&gt;.&lt;/span&gt;b1 ims&lt;span class="symbol"&gt;.&lt;/span&gt;b2
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;nearest &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; argmin dist&lt;span class="symbol"&gt;.&lt;/span&gt;i
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;double &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; b i j&lt;span class="symbol"&gt;.&lt;/span&gt; [ims&lt;span class="symbol"&gt;.&lt;/span&gt;b&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j&lt;span class="symbol"&gt;,&lt;/span&gt; ims&lt;span class="symbol"&gt;.&lt;/span&gt;(nearest&lt;span class="symbol"&gt;.&lt;/span&gt;b)&lt;span class="symbol"&gt;.&lt;/span&gt;i&lt;span class="symbol"&gt;.&lt;/span&gt;j&lt;span class="symbol"&gt;,&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; imseqshow double
&lt;/div&gt;&lt;img class="plot-img" src="data:image/png;base64, "&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Variable Length Lists&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;So far all the examples have assumed that we
know the exact size of our tables. This is a
common assumption in array languages, but
it makes some operations surprisingly difficult
to do.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;For instance, we might want to filter our set of
images to only allow for images of 5's. But what is
the type of this table?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Dex allows for tables with an unknown and varying length
using the &lt;code&gt;List&lt;/code&gt; construct. You can think of list as
hiding one finite dimension of a table.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Height&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;div class="result-block"&gt;((Fin 3) =&amp;gt; Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;toList &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Height&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;div class="result-block"&gt;(AsList 3 [0., 0., 0.])&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:t&lt;/span&gt; toList &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;:&lt;/span&gt;&lt;span class="type-name"&gt;Height&lt;/span&gt;&lt;span class="symbol"&gt;.&lt;/span&gt; 0&lt;span class="symbol"&gt;.&lt;/span&gt;0
&lt;/div&gt;&lt;div class="result-block"&gt;(List Float32)&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Tables of lists can be concatenated down to
single lists.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;z &lt;span class="symbol"&gt;=&lt;/span&gt; concat [toList [3&lt;span class="symbol"&gt;.&lt;/span&gt;0]&lt;span class="symbol"&gt;,&lt;/span&gt;
            toList [1&lt;span class="symbol"&gt;.&lt;/span&gt;0&lt;span class="symbol"&gt;,&lt;/span&gt; 2&lt;span class="symbol"&gt;.&lt;/span&gt;0 ]]
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;z
&lt;/div&gt;&lt;div class="result-block"&gt;(AsList 3 [3., 1., 2.])&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;And they can be deconstructed to fetch a new table.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;(&lt;span class="type-name"&gt;AsList&lt;/span&gt; _ temptab) &lt;span class="symbol"&gt;=&lt;/span&gt; z
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;temptab
&lt;/div&gt;&lt;div class="result-block"&gt;[3., 1., 2.]&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Using this construct we can return to extracting
items with label of shoes (label 5) from the image set.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;shoes &lt;span class="symbol"&gt;=&lt;/span&gt; (5 &lt;span class="symbol"&gt;@&lt;/span&gt; &lt;span class="type-name"&gt;Class&lt;/span&gt;)
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; findShoes (x &lt;span class="symbol"&gt;:&lt;/span&gt; a&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;b) (y &lt;span class="symbol"&gt;:&lt;/span&gt; a&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="type-name"&gt;Class&lt;/span&gt;) &lt;span class="symbol"&gt;:&lt;/span&gt; &lt;span class="type-name"&gt;List&lt;/span&gt; b &lt;span class="symbol"&gt;=&lt;/span&gt;
    concat &lt;span class="keyword"&gt;for&lt;/span&gt; i&lt;span class="symbol"&gt;.&lt;/span&gt; &lt;span class="keyword"&gt;case&lt;/span&gt; (y&lt;span class="symbol"&gt;.&lt;/span&gt;i &lt;span class="symbol"&gt;==&lt;/span&gt; (5 &lt;span class="symbol"&gt;@&lt;/span&gt; _)) &lt;span class="keyword"&gt;of&lt;/span&gt;
            &lt;span class="type-name"&gt;True&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; toList [x&lt;span class="symbol"&gt;.&lt;/span&gt;i]
            &lt;span class="type-name"&gt;False&lt;/span&gt; &lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt; toList []
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Note though that the type here does not tell us
how many there are. The type system cannot know this.
To figure it out we need to unpack the list.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;temp &lt;span class="symbol"&gt;=&lt;/span&gt; findShoes all_ims all_labels
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;(&lt;span class="type-name"&gt;AsList&lt;/span&gt; nShoes allShoes) &lt;span class="symbol"&gt;=&lt;/span&gt; temp
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;nShoes
&lt;/div&gt;&lt;div class="result-block"&gt;485&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;However we can still utilize the table. For instance
if we are summing over the hidden dimension, we never
need to know how big it is.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;&lt;span class="command"&gt;:html&lt;/span&gt; matshow (sum allShoes)
&lt;/div&gt;&lt;img class="plot-img" src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAAXNSR0IArs4c6QAABORJREFUSImdVsuO2zoS5ZsiZUmWbHVsozvIphdBA/n/P8gyyywCdJAHGrDbkh+iHqQo8S7qxrgzmEkGwwVBQORR1TnFU8To/xr416CUzvMcQoD5769/PBxCIISEEPA/BkKI/BqMMe+9tdZ7/z+BEkIQQpRSOE8pBUTGGMaYMcYY45w75/q+N8YALvs9KIRJKY2i6IZCKQVQIQRCSAhBKW2aZhzHaZr+DAoMEEIAUUophIDwAVdrnaapEEJr3XWdtXaapt+BAn2EEM4551wppZRCCEVRRCkNITDGkiRhjGmtOeen06mu6z+A3tSklEJEWmtK6W3DYrHgnCdJwjlv2zbLsiiKnHN/SJ8QIoSIomi5XMKZKIrQL+njOAbGvfeU0jiOkyQxxvwOFMpFCMEYS9N0u90CIkKIcy6lJISM4+icW6/XxhiQq6qq/woKhQ2H7+/vHx4edrtdmqYhhLZtgVCEEMSYJEmSJFpra+3z8/N/AAVxCCFKqSRJttvtZrMpimKxWEANRVHEGIvjOIRgjInjGBQ7n8/TNOV5zv4NDmOslIqiSCmVZVlZlrvdrizLOI6BXKUUxlhKmee59361WpVlCYRWVdW2rdaa3bCAxDRNV6uV1hqUKcsyz3OtNca4bVtr7TiOaZoul8vtdgtXgzGmlKqqynufJIlzjt2SRQhprZ+enuI4Xi6XURQVRYExjuPYOee9l1JijLuug8SllMMwhBCcc8fj8Xq99n3fdd00TQyqGnB3u9379++LooAcu67rug4Qh2G4qTfP893dnVKKc34+nxFCwzAQQoAcQghL0/Tu7g5oenx8/PDhQwiBUkoptdZeLheMsfeec44x5py/efNmu93meV4UBdiHMWa1WoUQoijinKdpyhaLxbt37+Z51lq/ffv24eEBIaSUgqKr69p775yDMLXW2+328fFxs9kQQn7+/DmOI6VUSpkkSZZl0zQxxlie509PT+M4LhaL+/v7siyllM45znkcxxAOpA83Nc/z9Xo9z/PLy8vxeGSMrVarxWIhpUzTtCiKLMtY13WXywWU0Vo3TXO9XvM87/semHLOhRC6rgMnNsZUVfXjx4+Xlxcp5Xq9bpomz/M0Ta21X79+Ncawuq4/f/68Xq/TNDXGdF0nhKjrmlJ6vV5Bn3meoebAjQ6Hw/fv38/nc5Zlq9WqKIqyLJVSy+Xy48ePz8/PDGNsrd3v9957jDFYRpZl4zhaa4dhcM7BBccYJ0lSVdWXL1+qqiKESCnLstxsNq+vr7D+9OlT0zQMdKCUtm0rhNjv91LK0+mEELpcLoSQruv6vhdCCCEOh8O3b9/2+721dp5npdQwDNM0GWOEENba4/HonGNgDcCXtRaSgsZwuVy89/M8g3F0XXc6nQ6Hw/l8ht45jiMh5HQ6QWHUdW2MmaaJzfM8TZMQIoRwY1BK6b0HZ4MfYIz7vn99fT0ej33fw52GGLXWUP9gYPM8M++9MSZNU4SQc26apmmaOOeMsXme+74nhHjvL5eLc66uaygDsAtYnM9n4DCE0Pd9CIHB1mEYwNCgWQIoQgjC9N73fd80zel0GscRHgMQLMYYiiSKor7vrbV/vxCg5XLOQQ3o8jffAn6stdCEb43rn0YOsxCiaZq2bf/lMXF7gNxCBuJu2YFosPPWcm4L0GCe578Ah64GSpaANekAAAAASUVORK5CYII="&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="code-block"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;We hope this gives you enough information to start playing with Dex.
This is just a start though of the different functionality available
in the language. If you are interested in continuing to learn, we recommend
you look at the examples in the &lt;code&gt;examples/&lt;/code&gt; directory, check out the prelude
in &lt;code&gt;lib/prelude.dx&lt;/code&gt;, and file issues on the GitHub repo. We have a welcoming
and excited community, and we hope you are interested enough to join us.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;p&gt;Here are some topics to check out in the Prelude:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="cell"&gt;&lt;div class="prose-block"&gt;&lt;ul&gt;
&lt;li&gt;Randomness and Keys&lt;/li&gt;
&lt;li&gt;Laziness of For Comprehensions&lt;/li&gt;
&lt;li&gt;Records and Variant Types&lt;/li&gt;
&lt;li&gt;File IO&lt;/li&gt;
&lt;li&gt;Effects Beyond State&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><category term="Dex"></category><category term="Teaching"></category><category term="Dex"></category></entry></feed>